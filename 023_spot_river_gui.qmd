---
execute:
  cache: false
  eval: true
  echo: true
  warning: false
---

# The spotriver GUI

## Starting the GUI

The GUI can be started by executing the `spotRiverGUI.py` file in the `spotRiver/gui` directory.

```{bash}
>> python spotRiverGUI.py
```


![spotriver GUI](./figures_static/spotGUIstart01.png)


After the GUI window has opened, the user can select the task:

1. Binary Classification
2. Regression

Depending on the task, the user can select the data set, the preprocessing model, the core model, and the evaluation function.

## Binary Classification

If the `Binary Classification` task is selected, the user can select pre-specified data sets from `River` the `Data` drop-down menu.


## Regression



## Starting a New Experiment

An experiment can be started by clicking on the `Run Experiment` button. 
The GUI calls `run_spot_river_experiment` from `spotRiver.tuner.run.py`.
Output will be shown in the shell window from which the GUI was started.


## Starting and Stopping Tensorboard

Tensorboard is automatically started when an experiment is started. The tensorboard process can be observed in a browser by opening the [http://localhost:6006](http://localhost:6006) page.


`spotPython.utils.tensorboard` provides the methods `start_tensorboard` and `stop_tensorboard` to start and stop tensorboard as a background process.
These will be used in future versions of the GUI to start and stop tensorboard.
Currently, only the `start_tensorboard` method is used to start tensorboard as a background process.


## Analysis


## Internal Methods

The spotriver GUI uses the following internal methods:

1. `run_spot_river_experiment`
2. `fun_oml_horizon`
3. `evaluate_model`
4. `eval_oml_horizon`


### The run_spot_river_experiment Method

`run_spot_river_experiment` calls the tuner spot after processing the following steps:

1. Generate an experiment name.
2. Initialize the `fun_control` dictionary.
3. Select the data set based on the `data_set` parameter and generate a data frame.
4. Splits the data into training and test sets.
5. Sets the oml_grace_period parameter.
6. Select the preprocessing model based on the `prepmodel` parameter.
7. Sets the weights for the evaluation function and the weight coeffient.
8. Loads the coremodel based on the `coremodel` parameter with hyperparameters set to the values specified in the `RiverHyperDict` dictionary.
9. Determines the default hyperparameters.
10. Selects the evaluation function: `HyperRiver.fun_oml_horizon`.
11. Determines hyperparameter types, names, lower and upper bounds for the `spot` tuner.
12. Starts tensorboard as a background process.
13. Starts the `spot` tuner.

When the tuner is finished, the following steps are performed:

1. The tensorboard process is terminated.
2. The spot_tuner object and the `fun_control` dictionary are returned.

After the tuner is finished, the following information is available:

The `run_spot_river_experiment` method is located in `spotRiver.tuner.run.py` and is called by the GUI. It calls the `fun_oml_horizon` evaluation function and the spot tuner.

### The fun_oml_horizon Method

The `fun_oml_horizon` method is located in `spotRiver.hyperriver.py` file. It calls the `evaluate_model` method, which in turn calls the `eval_oml_horizon` method from the `spotRiver.evaluation.eval_bml.py` file.

### The evaluate_model Method

### The eval_oml_horizon Method

