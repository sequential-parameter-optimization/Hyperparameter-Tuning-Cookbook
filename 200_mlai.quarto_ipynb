{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "execute:\n",
        "  cache: false\n",
        "  eval: true\n",
        "  echo: true\n",
        "  warning: false\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "# Machine Learning and Artificial Intelligence\n",
        "\n",
        "## Jupyter Notebooks\n",
        "\n",
        "* The Jupyter-Notebook version of this file can be found here: [malai.ipynb](https://github.com/sequential-parameter-optimization/Hyperparameter-Tuning-Cookbook/blob/main/mlai.ipynb)\n",
        "\n",
        "\n",
        "## Videos\n",
        "\n",
        "\n",
        "###  June, 11th 2024\n",
        "* [Happy Halloween (Neural Networks Are Not Scary)](https://youtu.be/zxagGtF9MeU?si=4klFloENih3Pw7Ix)\n",
        "* [The Essential Main Ideas of Neural Networks](https://youtu.be/CqOfi41LfDw?si=tGfuObKzWonsNLZ1)\n",
        "\n",
        "### June, 18th 2024\n",
        "* [The Chain Rule](https://youtu.be/wl1myxrtQHQ?si=jcGIAhXkBLUvSqeV)\n",
        "\n",
        "* [Gradient Descent, Step-by-Step](https://youtu.be/sDv4f4s2SB8?si=V3XzPVbJNsbZSbNw)\n",
        "* [Neural Networks Pt. 2: Backpropagation Main Ideas](https://youtu.be/IN2XmBhILt4?si=Ldx6rk6mPplQjZZv)\n",
        "\n",
        "#### Gradient Descent\n",
        "\n",
        "::: {#exr-GradDesc1}\n",
        "### GradDescStepSize\n",
        "How is the step size calculated? \n",
        ":::\n",
        "\n",
        "\n",
        "::: {#exr-GradDesc2}\n",
        "### GradDescIntercept\n",
        "How to calculate the new intercept?\n",
        ":::\n",
        "\n",
        "\n",
        "::: {#exr-GradDesc3}\n",
        "### GradDescIntercept\n",
        "When does the gradient descend stop?\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#### Backpropagation\n",
        "\n",
        "::: {#exr-BacPro1}\n",
        "### ChainRuleAndGradientDescent\n",
        "What are the key components involved in backpropagation?\n",
        ":::\n",
        "\n",
        "::: {#exr-BacPro2}\n",
        "### BackpropagationNaming\n",
        "Why is it called backpropagation?\n",
        ":::\n",
        "\n",
        "#### ReLU\n",
        "\n",
        "::: {#exr-Relu1}\n",
        "### Graph ReLU\n",
        "Draw the graph of a ReLU function. \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "* [Backpropagation Details Pt. 1: Optimizing 3 parameters simultaneously.](https://youtu.be/iyn2zdALii8?si=yBsgPec1R1O55f9q)\n",
        "* [Backpropagation Details Pt. 2: Going bonkers with The Chain Rule](https://youtu.be/GKZoOHXGcLo?si=Ypv_EDEMMC--8Flj)\n",
        "* [Neural Networks Pt. 3: ReLU In Action!!!](https://youtu.be/68BZ5f7P94E?si=3hPUkdicWLwFzOGZ)\n",
        "\n",
        "* [Neural Networks Pt. 4: Multiple Inputs and Outputs](https://youtu.be/83LYR-1IcjA?si=kePw0yRCj-A6MsOH)\n",
        "* [Neural Networks Part 5: ArgMax and SoftMax](https://youtu.be/KpKog-L9veg?si=gqXLSbOxwJwYs0hu)\n",
        "* [Tensors for Neural Networks, Clearly Explained!!!](https://youtu.be/L35fFDpwIM4?si=Q-oglIUJb8wVO9nd)\n",
        "* [Essential Matrix Algebra for Neural Networks, Clearly Explained!!!](https://youtu.be/ZTt9gsGcdDo?si=sKDLZ8nbj4vVi9aj)\n",
        "* [The StatQuest Introduction to PyTorch](https://youtu.be/FHdlXe1bSe4?si=Yh5gfWsnjDd2WqxN)\n",
        "\n",
        "#### PyTorch Links\n",
        "\n",
        "* [StatQuest: Introduction to Coding Neural Networks with PyTorch](https://lightning.ai/lightning-ai/studios/statquest-introduction-to-coding-neural-networks-with-pytorch?view=public&section=all)\n",
        "* [ML-AI Pytorch Introduction](https://uvadlc-notebooks.readthedocs.io/en/latest/tutorial_notebooks/tutorial2/Introduction_to_PyTorch.html)\n",
        "\n",
        "\n",
        "### June, 25th 2024\n",
        "### CNNs\n",
        "\n",
        "#### [Neural Networks Part 8: Image Classification with Convolutional Neural Networks (CNNs)](https://youtu.be/HGwBXDKFk9I?si=3yBfpZQ0dXw7s6j9)\n",
        "\n",
        "::: {#exr-CNN1}\n",
        "### CNNImageRecognition\n",
        "Why are classical neural networks poor at image recognition?\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-CNN2}\n",
        "### CNNFiltersInitialization\n",
        "How are the filter values in CNNs initialized and optimized?\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-CNN3}\n",
        "### CNNFilterInitialization\n",
        "How are the filter values determined in Convolutional Neural Networks (CNNs)?\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-CNN4}\n",
        "### GenNNStockPrediction\n",
        "What is a limitation of using classical neural networks for stock market prediction?\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "### RNN\n",
        "\n",
        "#### [Recurrent Neural Networks (RNNs), Clearly Explained!!!](https://youtu.be/AsNTP8Kwu80?si=-JiRYXyOpu-gnhnk)\n",
        "\n",
        "::: {#exr-RNN1}\n",
        "### RNNUnrolling\n",
        "How does the unrolling process work in Recurrent Neural Networks (RNNs)?\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-RNN2}\n",
        "### RNNReliability\n",
        "Why do Recurrent Neural Networks (RNNs) sometimes fail to work reliably?\n",
        ":::\n",
        "\n",
        "\n",
        "### LSTM\n",
        "\n",
        "#### [Long Short-Term Memory (LSTM), Clearly Explained](https://youtu.be/YCzL96nL7j0?si=DphYdoYgx23Twgz6)\n",
        "\n",
        "::: {#exr-LSTM1}\n",
        "### LSTMSigmoidTanh\n",
        "What are the differences between the sigmoid and tanh activation functions?\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-LSTM11}\n",
        "### LSTMSigmoidTanh\n",
        "What is the ?\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-LSTM2}\n",
        "### LSTMGates\n",
        "What are the gates in an LSTM network and their functions?\n",
        ":::\n",
        "\n",
        "\n",
        "::: {#exr-LSTM3}\n",
        "### LSTMLongTermInfo\n",
        "In which gate is long-term information used in an LSTM network?\n",
        ":::\n",
        "\n",
        "\n",
        "::: {#exr-LSTM4}\n",
        "### LSTMUpdateGates\n",
        "In which Gates is it updated in an LSTM?\n",
        ":::\n",
        "\n",
        "\n",
        "### Pytorch/Lightning\n",
        "\n",
        "#### [Introduction to Coding Neural Networks with PyTorch and Lightning](https://youtu.be/khMzi6xPbuM?si=6aqbmYIIaefKQnWX)\n",
        "\n",
        "::: {#exr-PyTorch1}\n",
        "### PyTorchRequiresGrad\n",
        "What does `requires_grad` mean in PyTorch?\n",
        ":::\n",
        "\n",
        "\n",
        "### July, 2nd 2024\n",
        "* [Word Embedding and Word2Vec, Clearly Explained!!!](https://youtu.be/viZrOnJclY0?si=B0gvlx4_ppegZAB-)\n",
        "* [Sequence-to-Sequence (seq2seq) Encoder-Decoder Neural Networks, Clearly Explained!!!](https://youtu.be/L8HKweZIOmg?si=LzC6wjlC2yE9ZekP)\n",
        "* [Attention for Neural Networks, Clearly Explained!!!](https://youtu.be/PSs6nxngL6k?si=jajDsVYk4FQgCgNA)\n",
        "\n",
        "#### Embeddings\n",
        "\n",
        "::: {#exr-Embedding1}\n",
        "### NN Strings\n",
        "Can neural networks process strings? \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-Embedding2}\n",
        "### Embedding Definition\n",
        "What is the meaning of word embedding? \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-Embedding3}\n",
        "### Embedding Dimensions\n",
        "Why do we need high dimension in word embedding? \n",
        ":::\n",
        "\n",
        "\n",
        "#### Sequence to Sequence\n",
        "\n",
        "::: {#exr-S2S1}\n",
        "### LSTM\n",
        "Why are LSTMs used? \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-S2S2}\n",
        "### Teacher Forcing\n",
        "Why is teacher forcing used? \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-S2S3}\n",
        "### Attention\n",
        "What is the idea of attention? \n",
        ":::\n",
        "\n",
        "\n",
        "### Additional Lecture (July, 9th 2024)?\n",
        "* [Transformer Neural Networks, ChatGPT's foundation, Clearly Explained!!!](https://youtu.be/zxQyTK8quyY?si=LGe6J13PJ4s0qKbr)\n",
        "* [Decoder-Only Transformers, ChatGPTs specific Transformer, Clearly Explained!!!](https://youtu.be/bQ5BoolX9Ag?si=cojnYPck8CK6NK8p)\n",
        "* [The matrix math behind transformer neural networks, one step at a time!!!](https://youtu.be/KphmOJnLAdI?si=JwIK3MhmoHxnuI3G)\n",
        "* [Word Embedding in PyTorch + Lightning](https://youtu.be/Qf06XDYXCXI?si=gIKMOQ0xjAxLo_7_)\n",
        "\n",
        "#### Transformers \n",
        "\n",
        "::: {#exr-Transformer1}\n",
        "### ChatGPT\n",
        "What kind of transformer does ChatGPT use? \n",
        ":::\n",
        "\n",
        "\n",
        "::: {#exr-Transformer2}\n",
        "### Translation\n",
        "What kind of NN are used for translation? \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-Transformer3}\n",
        "### Difference Encoder-Decoder and Decoder Only.\n",
        "What is the encoder-decoder transformer and the decoder only transformer? \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-Transformer4}\n",
        "### Weights\n",
        "How are the weights initialized (a) and trained (b)? \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-Transformer5}\n",
        "### Order of Words\n",
        "How is the word order preserved? \n",
        ":::\n",
        "\n",
        "\n",
        "::: {#exr-Transformer6}\n",
        "### Relationship Between Words\n",
        "How is the relationship between words modeled?  \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-Transformer7}\n",
        "### Masked Self Attention\n",
        "What is masked self-attention? \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-Transformer8}\n",
        "### Softmax\n",
        "Why is Softmax used to calculate percentage of similarities? \n",
        ":::\n",
        "\n",
        "::: {#exr-Transformer9}\n",
        "### Softmax Output\n",
        "How is the percentage output of softmax in Transformers used? \n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-Transformer10}\n",
        "### V´s\n",
        "What is done with the scaled V´s that we get for each token so far (example: “is”,”what”)? \n",
        ":::\n",
        "\n",
        "\n",
        "::: {#exr-Transformer11}\n",
        "### Residual Connections\n",
        "What are residual connections? \n",
        ":::\n",
        "\n",
        "\n",
        "::: {#exr-Transformer12}\n",
        "### Generate Known Word in Sequence\n",
        "Why do we want to generate the word in the sequence that comes after “what” that we already know? (Example from video)\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "::: {#exr-Transformer13}\n",
        "### Masked-Self-Attention Values and Bypass\n",
        "How do we use the two values (“masked-self-attention values + bypass”) which we have for each input? (Example from video: (“What”, ”is”, ”StatQuest”))\n",
        ":::\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### Additional Videos\n",
        "* [The SoftMax Derivative, Step-by-Step!!!](https://youtu.be/M59JElEPgIg?si=KoZGFEZWVc-PclSU)\n",
        "* [Neural Networks Part 6: Cross Entropy](https://youtu.be/6ArSys5qHAU?si=TxyJi22ELyYl0m3L)\n",
        "* [Neural Networks Part 7: Cross Entropy Derivatives and Backpropagation](https://youtu.be/xBEh66V9gZo?si=kUco4zKdH8CNW23k)\n",
        " \n",
        "\n",
        "### All Videos in a Playlist\n",
        "* Full Playlist [ML-AI](https://www.youtube.com/playlist?list=PLblh5JKOoLUIxGDQs4LFFD--41Vzf-ME1)\n",
        "\n",
        "\n",
        "## The StatQuest Introduction to PyTorch\n",
        "\n",
        "The following code is taken from [The StatQuest Introduction to PyTorch](https://lightning.ai/lightning-ai/studios/statquest-introduction-to-coding-neural-networks-with-pytorch?view=public&section=all&tab=files&layout=column&path=cloudspaces%2F01hf54c4fhjc8wwadsd037kjjm&y=3&x=0). Attribution goes to Josh Starmer, the creator of StatQuest, see [Josh Starmer](https://lightning.ai/josh-starmer).\n"
      ],
      "id": "1f0d09a2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import torch # torch provides basic functions, from setting a random seed (for reproducability) to creating tensors.\n",
        "import torch.nn as nn # torch.nn allows us to create a neural network.\n",
        "import torch.nn.functional as F # nn.functional give us access to the activation and loss functions.\n",
        "from torch.optim import SGD # optim contains many optimizers. Here, we're using SGD, stochastic gradient descent.\n",
        "\n",
        "import matplotlib.pyplot as plt ## matplotlib allows us to draw graphs.\n",
        "import seaborn as sns ## seaborn makes it easier to draw nice-looking graphs.\n",
        "\n",
        "%matplotlib inline"
      ],
      "id": "2d374c86",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Building a neural network in PyTorch means creating a new class with two methods: init() and forward(). The init() method defines and initializes all of the parameters that we want to use, and the forward() method tells PyTorch what should happen during a forward pass through the neural network.\n",
        "\n",
        "### Build a Simple Neural Network in PyTorch\n",
        "\n",
        "`__init__()` is the class constructor function, and we use it to initialize the weights and biases.\n"
      ],
      "id": "ba0be2bc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## create a neural network class by creating a class that inherits from nn.Module.\n",
        "class BasicNN(nn.Module):\n",
        "\n",
        "    def __init__(self): # __init__() is the class constructor function, and we use it to initialize the weights and biases.\n",
        "        \n",
        "        super().__init__() # initialize an instance of the parent class, nn.Model.\n",
        "        \n",
        "        ## Now create the weights and biases that we need for our neural network.\n",
        "        ## Each weight or bias is an nn.Parameter, which gives us the option to optimize the parameter by setting\n",
        "        ## requires_grad, which is short for \"requires gradient\", to True. Since we don't need to optimize any of these\n",
        "        ## parameters now, we set requires_grad=False.\n",
        "        ##\n",
        "        ## NOTE: Because our neural network is already fit to the data, we will input specific values\n",
        "        ## for each weight and bias. In contrast, if we had not already fit the neural network to the data,\n",
        "        ## we might start with a random initalization of the weights and biases.\n",
        "        self.w00 = nn.Parameter(torch.tensor(1.7), requires_grad=False)\n",
        "        self.b00 = nn.Parameter(torch.tensor(-0.85), requires_grad=False)\n",
        "        self.w01 = nn.Parameter(torch.tensor(-40.8), requires_grad=False)\n",
        "        \n",
        "        self.w10 = nn.Parameter(torch.tensor(12.6), requires_grad=False)\n",
        "        self.b10 = nn.Parameter(torch.tensor(0.0), requires_grad=False)\n",
        "        self.w11 = nn.Parameter(torch.tensor(2.7), requires_grad=False)\n",
        "\n",
        "        self.final_bias = nn.Parameter(torch.tensor(-16.), requires_grad=False)\n",
        "        \n",
        "        \n",
        "    def forward(self, input): ## forward() takes an input value and runs it though the neural network \n",
        "                              ## illustrated at the top of this notebook. \n",
        "        \n",
        "        ## the next three lines implement the top of the neural network (using the top node in the hidden layer).\n",
        "        input_to_top_relu = input * self.w00 + self.b00\n",
        "        top_relu_output = F.relu(input_to_top_relu)\n",
        "        scaled_top_relu_output = top_relu_output * self.w01\n",
        "        \n",
        "        ## the next three lines implement the bottom of the neural network (using the bottom node in the hidden layer).\n",
        "        input_to_bottom_relu = input * self.w10 + self.b10\n",
        "        bottom_relu_output = F.relu(input_to_bottom_relu)\n",
        "        scaled_bottom_relu_output = bottom_relu_output * self.w11\n",
        "        \n",
        "        ## here, we combine both the top and bottom nodes from the hidden layer with the final bias.\n",
        "        input_to_final_relu = scaled_top_relu_output + scaled_bottom_relu_output + self.final_bias\n",
        "        \n",
        "        output = F.relu(input_to_final_relu)\n",
        "    \n",
        "        return output # output is the predicted effectiveness for a drug dose."
      ],
      "id": "f3534f3d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Once we have created the class that defines the neural network, we can create an actual neural network and print out its parameters, just to make sure things are what we expect.\n"
      ],
      "id": "e2e2722a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## create the neural network. \n",
        "model = BasicNN()\n",
        "\n",
        "## print out the name and value for each parameter\n",
        "for name, param in model.named_parameters():\n",
        "    print(name, param.data)"
      ],
      "id": "eefde6b5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Use the Neural Network and Graph the Output\n",
        "\n",
        "Now that we have a neural network, we can use it on a variety of doses to determine which will be effective. Then we can make a graph of these data, and this graph should match the green bent shape fit to the training data that's shown at the top of this document. So, let's start by making a sequence of input doses...\n"
      ],
      "id": "fe39949e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## now create the different doses we want to run through the neural network.\n",
        "## torch.linspace() creates the sequence of numbers between, and including, 0 and 1.\n",
        "input_doses = torch.linspace(start=0, end=1, steps=11)\n",
        "\n",
        "# now print out the doses to make sure they are what we expect...\n",
        "input_doses"
      ],
      "id": "cf92ebe7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now that we have input_doses, let's run them through the neural network and graph the output...\n"
      ],
      "id": "2c523e5e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## create the neural network. \n",
        "model = BasicNN() \n",
        "\n",
        "## now run the different doses through the neural network.\n",
        "output_values = model(input_doses)\n",
        "\n",
        "## Now draw a graph that shows the effectiveness for each dose.\n",
        "##\n",
        "## First, set the style for seaborn so that the graph looks cool.\n",
        "sns.set(style=\"whitegrid\")\n",
        "\n",
        "## create the graph (you might not see it at this point, but you will after we save it as a PDF).\n",
        "sns.lineplot(x=input_doses, \n",
        "     y=output_values, \n",
        "     color='green', \n",
        "     linewidth=2.5)\n",
        "\n",
        "## now label the y- and x-axes.\n",
        "plt.ylabel('Effectiveness')\n",
        "plt.xlabel('Dose')\n",
        "\n",
        "## optionally, save the graph as a PDF.\n",
        "# plt.savefig('BasicNN.pdf')"
      ],
      "id": "566ad6ed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The graph shows that the neural network fits the training data. In other words, so far, we don't have any bugs in our code.\n",
        "\n",
        "### Optimize (Train) a Parameter in the Neural Network and Graph the Output\n",
        "\n",
        "Now that we know how to create and use a simple neural network, and we can graph the output relative to the input, let's see how to train a neural network. The first thing we need to do is tell PyTorch which parameter (or parameters) we want to train, and we do that by setting requiresgrad=True. In this example, we'll train finalbias.\n",
        "\n",
        "Now we create a neural network by creating a class that inherits from nn.Module.\n",
        "\n",
        "NOTE: This code is the same as before, except we changed the class name to BasicNN_train and we modified  final_bias in two ways:\n",
        "\n",
        "    1) we set the value of the tensor to 0, and\n",
        "    2) we set \"requires_grad=True\".\n",
        "\n",
        "Now let's graph the output of BasicNN_train, which is currently not optimized, and compare it to the graph we drew earlier of the optimized neural network.\n"
      ],
      "id": "4dd8c5ff"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "class BasicNN_train(nn.Module):\n",
        "\n",
        "    def __init__(self): # __init__ is the class constructor function, and we use it to initialize the weights and biases.\n",
        "        \n",
        "        super().__init__() # initialize an instance of the parent class, nn.Module.\n",
        "        \n",
        "        self.w00 = nn.Parameter(torch.tensor(1.7), requires_grad=False)\n",
        "        self.b00 = nn.Parameter(torch.tensor(-0.85), requires_grad=False)\n",
        "        self.w01 = nn.Parameter(torch.tensor(-40.8), requires_grad=False)\n",
        "        \n",
        "        self.w10 = nn.Parameter(torch.tensor(12.6), requires_grad=False)\n",
        "        self.b10 = nn.Parameter(torch.tensor(0.0), requires_grad=False)\n",
        "        self.w11 = nn.Parameter(torch.tensor(2.7), requires_grad=False)\n",
        "\n",
        "        ## we want to modify final_bias to demonstrate how to optimize it with backpropagation.\n",
        "        ## The optimal value for final_bias is -16...\n",
        "#         self.final_bias = nn.Parameter(torch.tensor(-16.), requires_grad=False)\n",
        "        ## ...so we set it to 0 and tell Pytorch that it now needs to calculate the gradient for this parameter.\n",
        "        self.final_bias = nn.Parameter(torch.tensor(0.), requires_grad=True) \n",
        "        \n",
        "    def forward(self, input):\n",
        "        \n",
        "        input_to_top_relu = input * self.w00 + self.b00\n",
        "        top_relu_output = F.relu(input_to_top_relu)\n",
        "        scaled_top_relu_output = top_relu_output * self.w01\n",
        "        \n",
        "        input_to_bottom_relu = input * self.w10 + self.b10\n",
        "        bottom_relu_output = F.relu(input_to_bottom_relu)\n",
        "        scaled_bottom_relu_output = bottom_relu_output * self.w11\n",
        "    \n",
        "        input_to_final_relu = scaled_top_relu_output + scaled_bottom_relu_output + self.final_bias\n",
        "        \n",
        "        output = F.relu(input_to_final_relu)\n",
        "        \n",
        "        return output"
      ],
      "id": "ca0cf4f8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## create the neural network. \n",
        "model = BasicNN_train() \n",
        "\n",
        "## now run the different doses through the neural network.\n",
        "output_values = model(input_doses)\n",
        "\n",
        "## Now draw a graph that shows the effectiveness for each dose.\n",
        "##\n",
        "## set the style for seaborn so that the graph looks cool.\n",
        "sns.set(style=\"whitegrid\")\n",
        "\n",
        "## create the graph (you might not see it at this point, but you will after we save it as a PDF).\n",
        "sns.lineplot(x=input_doses, \n",
        "             y=output_values.detach(), ## NOTE: because final_bias has a gradident, we call detach() \n",
        "                                       ## to return a new tensor that only has the value and not the gradient.\n",
        "             color='green', \n",
        "             linewidth=2.5)\n",
        "\n",
        "## now label the y- and x-axes.\n",
        "plt.ylabel('Effectiveness')\n",
        "plt.xlabel('Dose')\n",
        "\n",
        "## lastly, save the graph as a PDF.\n",
        "# plt.savefig('BasicNN_train.pdf')"
      ],
      "id": "d1a55489",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The graph shows that when the dose is 0.5, the output from the unoptimized neural network is 17, which is wrong, since the output value should be 1. So, now that we have a parameter we can optimize, let's create some training data that we can use to optimize it.\n"
      ],
      "id": "018ece34"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## create the training data for the neural network.\n",
        "inputs = torch.tensor([0., 0.5, 1.])\n",
        "labels = torch.tensor([0., 1., 0.])"
      ],
      "id": "249d4bd4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "..and now let's use that training data to train (or optimize) final_bias.\n"
      ],
      "id": "be94341f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## create the neural network we want to train.\n",
        "model = BasicNN_train()\n",
        "\n",
        "optimizer = SGD(model.parameters(), lr=0.1) ## here we're creating an optimizer to train the neural network.\n",
        "                                            ## NOTE: There are a bunch of different ways to optimize a neural network.\n",
        "                                            ## In this example, we'll use Stochastic Gradient Descent (SGD). However,\n",
        "                                            ## another popular algortihm is Adam (which will be covered in a StatQuest).\n",
        "\n",
        "print(\"Final bias, before optimization: \" + str(model.final_bias.data) + \"\\n\")\n",
        "\n",
        "## this is the optimization loop. Each time the optimizer sees all of the training data is called an \"epoch\".\n",
        "for epoch in range(100):\n",
        "\n",
        "    ## we create and initialize total_loss for each epoch so that we can evaluate how well model fits the\n",
        "    ## training data. At first, when the model doesn't fit the training data very well, total_loss\n",
        "    ## will be large. However, as gradient descent improves the fit, total_loss will get smaller and smaller.\n",
        "    ## If total_loss gets really small, we can decide that the model fits the data well enough and stop\n",
        "    ## optimizing the fit. Otherwise, we can just keep optimizing until we reach the maximum number of epochs. \n",
        "    total_loss = 0\n",
        "\n",
        "    ## this internal loop is where the optimizer sees all of the training data and where we \n",
        "    ## calculate the total_loss for all of the training data.\n",
        "    for iteration in range(len(inputs)):\n",
        "\n",
        "        input_i = inputs[iteration] ## extract a single input value (a single dose)...\n",
        "        label_i = labels[iteration] ## ...and its corresponding label (the effectiveness for the dose).\n",
        "\n",
        "        output_i = model(input_i) ## calculate the neural network output for the input (the single dose).\n",
        "\n",
        "        loss = (output_i - label_i)**2 ## calculate the loss for the single value.\n",
        "                                       ## NOTE: Because output_i = model(input_i), \"loss\" has a connection to \"model\"\n",
        "                                       ## and the derivative (calculated in the next step) is kept and accumulated\n",
        "                                       ## in \"model\".\n",
        "\n",
        "        loss.backward() # backward() calculates the derivative for that single value and adds it to the previous one.\n",
        "\n",
        "        total_loss += float(loss) # accumulate the total loss for this epoch.\n",
        "\n",
        "\n",
        "    if (total_loss < 0.0001):\n",
        "        print(\"Num steps: \" + str(epoch))\n",
        "        break\n",
        "\n",
        "    optimizer.step() ## take a step toward the optimal value.\n",
        "    optimizer.zero_grad() ## This zeroes out the gradient stored in \"model\". \n",
        "                          ## Remember, by default, gradients are added to the previous step (the gradients are accumulated),\n",
        "                          ## and we took advantage of this process to calculate the derivative one data point at a time.\n",
        "                          ## NOTE: \"optimizer\" has access to \"model\" because of how it was created with the call \n",
        "                          ## (made earlier): optimizer = SGD(model.parameters(), lr=0.1).\n",
        "                          ## ALSO NOTE: Alternatively, we can zero out the gradient with model.zero_grad().\n",
        "    if epoch % 10 == 0:\n",
        "        print(\"Step: \" + str(epoch) + \" Final Bias: \" + str(model.final_bias.data) + \"\\n\")\n",
        "    ## now go back to the start of the loop and go through another epoch.\n",
        "\n",
        "print(\"Total loss: \" + str(total_loss))\n",
        "print(\"Final bias, after optimization: \" + str(model.final_bias.data))"
      ],
      "id": "dcc94e0f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "So, if everything worked correctly, the optimizer should have converged on final_bias = 16.0019 after 34 steps, or epochs. BAM!\n",
        "\n",
        "Lastly, let's graph the output from the optimized neural network and see if it's the same as what we started with. If so, then the optimization worked.\n"
      ],
      "id": "a4e2de9a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## run the different doses through the neural network\n",
        "output_values = model(input_doses)\n",
        "\n",
        "## set the style for seaborn so that the graph looks cool.\n",
        "sns.set(style=\"whitegrid\")\n",
        "\n",
        "## create the graph (you might not see it at this point, but you will after we save it as a PDF).\n",
        "sns.lineplot(x=input_doses, \n",
        "     y=output_values.detach(), ## NOTE: we call detach() because final_bias has a gradient\n",
        "     color='green', \n",
        "     linewidth=2.5)\n",
        "\n",
        "## now label the y- and x-axes.\n",
        "plt.ylabel('Effectiveness')\n",
        "plt.xlabel('Dose')\n",
        "\n",
        "## lastly, save the graph as a PDF.\n",
        "# plt.savefig('BascNN_optimized.pdf')"
      ],
      "id": "b5e1f6d4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "And we see that the optimized model results in the same graph that we started with, so the optimization worked as expected.\n",
        "\n",
        "## Build a Long Short-Term Memory unit by hand using PyTorch + Lightning\n",
        "\n",
        "The following code is based on [Long Short-Term Memory with PyTorch + Lightning](https://www.youtube.com/watch?v=RHGiXPuo_pI&t=23s) and [StatQuest: Long Short-Term Memory (LSTM) with PyTorch + Lightning!!!](https://lightning.ai/lightning-ai/studios/statquest-long-short-term-memory-lstm-with-pytorch-lightning?view=public&section=all&tab=files&layout=column&path=cloudspaces%2F01henpavmdtqndyk17xpzjdbj6&y=3&x=0). Attribution goes to Josh Starmer, the creator of StatQuest, see [Josh Starmer](https://lightning.ai/josh-starmer).\n"
      ],
      "id": "82fb564b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import torch # torch will allow us to create tensors.\n",
        "import torch.nn as nn # torch.nn allows us to create a neural network.\n",
        "import torch.nn.functional as F # nn.functional give us access to the activation and loss functions.\n",
        "from torch.optim import Adam # optim contains many optimizers. This time we're using Adam\n",
        "\n",
        "import lightning as L # lightning has tons of cool tools that make neural networks easier\n",
        "from torch.utils.data import TensorDataset, DataLoader # these are needed for the training data"
      ],
      "id": "6e6b1ca0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "A Long Short-Term Memory (LSTM) unit is a type of neural network, and that means we need to create a new class. To make it easy to train the LSTM, this class will inherit from LightningModule and we'll create the following methods:\n",
        "\n",
        "* `init()` to initialize the Weights and Biases and keep track of a few other house keeping things.\n",
        "* `lstm_unit()` to do the LSTM math. For example, to calculate the percentage of the long-term memory to remember.\n",
        "* `forward()` to make a forward pass through the unrolled LSTM. In other words forward() calls `lstm_unit()` for each data point.\n",
        "* `configure_optimizers()` to configure the opimimizer. In the past, we have use SGD (Stochastic Gradient Descent), however, in this tutorial we'll change things up and use Adam, another popular algorithm for optimizing the Weights and Biases.\n",
        "* `training_step()` to pass the training data to forward(), calculate the loss and to keep track of the loss values in a log file.\n"
      ],
      "id": "9e133e0f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "class LSTMbyHand(L.LightningModule):\n",
        "\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        L.seed_everything(seed=42)\n",
        "\n",
        "        ## NOTE: nn.LSTM() uses random values from a uniform distribution to initialize the tensors\n",
        "        ## Here we can do it 2 different ways 1) Normal Distribution and 2) Uniform Distribution\n",
        "        ## We'll start with the Normal distribution.\n",
        "        mean = torch.tensor(0.0)\n",
        "        std = torch.tensor(1.0)\n",
        "\n",
        "        ## NOTE: In this case, I'm only using the normal distribution for the Weights.\n",
        "        ## All Biases are initialized to 0.\n",
        "        ##\n",
        "        ## These are the Weights and Biases in the first stage, which determines what percentage\n",
        "        ## of the long-term memory the LSTM unit will remember.\n",
        "        self.wlr1 = nn.Parameter(torch.normal(mean=mean, std=std), requires_grad=True)\n",
        "        self.wlr2 = nn.Parameter(torch.normal(mean=mean, std=std), requires_grad=True)\n",
        "        self.blr1 = nn.Parameter(torch.tensor(0.), requires_grad=True)\n",
        "\n",
        "        ## These are the Weights and Biases in the second stage, which determines the new\n",
        "        ## potential long-term memory and what percentage will be remembered.\n",
        "        self.wpr1 = nn.Parameter(torch.normal(mean=mean, std=std), requires_grad=True)\n",
        "        self.wpr2 = nn.Parameter(torch.normal(mean=mean, std=std), requires_grad=True)\n",
        "        self.bpr1 = nn.Parameter(torch.tensor(0.), requires_grad=True)\n",
        "\n",
        "        self.wp1 = nn.Parameter(torch.normal(mean=mean, std=std), requires_grad=True)\n",
        "        self.wp2 = nn.Parameter(torch.normal(mean=mean, std=std), requires_grad=True)\n",
        "        self.bp1 = nn.Parameter(torch.tensor(0.), requires_grad=True)\n",
        "\n",
        "        ## These are the Weights and Biases in the third stage, which determines the\n",
        "        ## new short-term memory and what percentage will be sent to the output.\n",
        "        self.wo1 = nn.Parameter(torch.normal(mean=mean, std=std), requires_grad=True)\n",
        "        self.wo2 = nn.Parameter(torch.normal(mean=mean, std=std), requires_grad=True)\n",
        "        self.bo1 = nn.Parameter(torch.tensor(0.), requires_grad=True)\n",
        "\n",
        "        ## We can also initialize all Weights and Biases using a uniform distribution. This is\n",
        "        ## how nn.LSTM() does it.\n",
        "#         self.wlr1 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "#         self.wlr2 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "#         self.blr1 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "\n",
        "#         self.wpr1 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "#         self.wpr2 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "#         self.bpr1 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "\n",
        "#         self.wp1 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "#         self.wp2 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "#         self.bp1 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "\n",
        "#         self.wo1 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "#         self.wo2 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "#         self.bo1 = nn.Parameter(torch.rand(1), requires_grad=True)\n",
        "\n",
        "\n",
        "    def lstm_unit(self, input_value, long_memory, short_memory):\n",
        "        ## lstm_unit does the math for a single LSTM unit.\n",
        "\n",
        "        ## NOTES:\n",
        "        ## long term memory is also called \"cell state\"\n",
        "        ## short term memory is also called \"hidden state\"\n",
        "\n",
        "        ## 1) The first stage determines what percent of the current long-term memory\n",
        "        ##    should be remembered\n",
        "        long_remember_percent = torch.sigmoid((short_memory * self.wlr1) +\n",
        "                                              (input_value * self.wlr2) +\n",
        "                                              self.blr1)\n",
        "\n",
        "        ## 2) The second stage creates a new, potential long-term memory and determines what\n",
        "        ##    percentage of that to add to the current long-term memory\n",
        "        potential_remember_percent = torch.sigmoid((short_memory * self.wpr1) +\n",
        "                                                   (input_value * self.wpr2) +\n",
        "                                                   self.bpr1)\n",
        "        potential_memory = torch.tanh((short_memory * self.wp1) +\n",
        "                                      (input_value * self.wp2) +\n",
        "                                      self.bp1)\n",
        "\n",
        "        ## Once we have gone through the first two stages, we can update the long-term memory\n",
        "        updated_long_memory = ((long_memory * long_remember_percent) +\n",
        "                       (potential_remember_percent * potential_memory))\n",
        "\n",
        "        ## 3) The third stage creates a new, potential short-term memory and determines what\n",
        "        ##    percentage of that should be remembered and used as output.\n",
        "        output_percent = torch.sigmoid((short_memory * self.wo1) +\n",
        "                                       (input_value * self.wo2) +\n",
        "                                       self.bo1)\n",
        "        updated_short_memory = torch.tanh(updated_long_memory) * output_percent\n",
        "\n",
        "        ## Finally, we return the updated long and short-term memories\n",
        "        return([updated_long_memory, updated_short_memory])\n",
        "\n",
        "    def forward(self, input):\n",
        "        ## forward() unrolls the LSTM for the training data by calling lstm_unit() for each day of training data\n",
        "        ## that we have. forward() also keeps track of the long and short-term memories after each day and returns\n",
        "        ## the final short-term memory, which is the 'output' of the LSTM.\n",
        "\n",
        "        long_memory = 0 # long term memory is also called \"cell state\" and indexed with c0, c1, ..., cN\n",
        "        short_memory = 0 # short term memory is also called \"hidden state\" and indexed with h0, h1, ..., cN\n",
        "        day1 = input[0]\n",
        "        day2 = input[1]\n",
        "        day3 = input[2]\n",
        "        day4 = input[3]\n",
        "\n",
        "        ## Day 1\n",
        "        long_memory, short_memory = self.lstm_unit(day1, long_memory, short_memory)\n",
        "\n",
        "        ## Day 2\n",
        "        long_memory, short_memory = self.lstm_unit(day2, long_memory, short_memory)\n",
        "\n",
        "        ## Day 3\n",
        "        long_memory, short_memory = self.lstm_unit(day3, long_memory, short_memory)\n",
        "\n",
        "        ## Day 4\n",
        "        long_memory, short_memory = self.lstm_unit(day4, long_memory, short_memory)\n",
        "\n",
        "        ##### Now return short_memory, which is the 'output' of the LSTM.\n",
        "        return short_memory\n",
        "\n",
        "    def configure_optimizers(self): # this configures the optimizer we want to use for backpropagation.\n",
        "        # return Adam(self.parameters(), lr=0.1) # NOTE: Setting the learning rate to 0.1 trains way faster than\n",
        "                                                 # using the default learning rate, lr=0.001, which requires a lot more\n",
        "                                                 # training. However, if we use the default value, we get\n",
        "                                                 # the exact same Weights and Biases that I used in\n",
        "                                                 # the LSTM Clearly Explained StatQuest video. So we'll use the\n",
        "                                                 # default value.\n",
        "        return Adam(self.parameters())\n",
        "\n",
        "\n",
        "    def training_step(self, batch, batch_idx): # take a step during gradient descent.\n",
        "        input_i, label_i = batch # collect input\n",
        "        output_i = self.forward(input_i[0]) # run input through the neural network\n",
        "        loss = (output_i - label_i)**2 ## loss = sum of squared residual\n",
        "        # Logging the loss and the predicted values so we can evaluate the training:\n",
        "        self.log(\"train_loss\", loss)\n",
        "        ## NOTE: Our dataset consists of two sequences of values representing Company A and Company B\n",
        "        ## For Company A, the goal is to predict that the value on Day 5 = 0, and for Company B,\n",
        "        ## the goal is to predict that the value on Day 5 = 1. We use label_i, the value we want to\n",
        "        ## predict, to keep track of which company we just made a prediction for and\n",
        "        ## log that output value in a company specific file\n",
        "        if (label_i == 0):\n",
        "            self.log(\"out_0\", output_i)\n",
        "        else:\n",
        "            self.log(\"out_1\", output_i)\n",
        "        return loss"
      ],
      "id": "9bb6a673",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Once we have created the class that defines an LSTM, we can use it to create a model and print out the randomly initialized Weights and Biases. Then, just for fun, we'll see what those random Weights and Biases predict for Company A and Company B. If they are good predictions, then we're done! However, the chances of getting good predictions from random values is very small. \n"
      ],
      "id": "cee1186c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## Create the model object, print out parameters and see how well\n",
        "## the untrained LSTM can make predictions...\n",
        "model = LSTMbyHand() \n",
        "\n",
        "print(\"Before optimization, the parameters are...\")\n",
        "for name, param in model.named_parameters():\n",
        "    print(name, param.data)\n",
        "\n",
        "print(\"\\nNow let's compare the observed and predicted values...\")\n",
        "## NOTE: To make predictions, we pass in the first 4 days worth of stock values \n",
        "## in an array for each company. In this case, the only difference between the\n",
        "## input values for Company A and B occurs on the first day. Company A has 0 and\n",
        "## Company B has 1.\n",
        "print(\"Company A: Observed = 0, Predicted =\", \n",
        "      model(torch.tensor([0., 0.5, 0.25, 1.])).detach())\n",
        "print(\"Company B: Observed = 1, Predicted =\", \n",
        "      model(torch.tensor([1., 0.5, 0.25, 1.])).detach())"
      ],
      "id": "3fed27d7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "With the unoptimized paramters, the predicted value for Company A, -0.0377, isn't terrible, since it is relatively close to the observed value, 0. However, the predicted value for Company B, -0.0383, is terrible, because it is relatively far from the observed value, 1. So, that means we need to train the LSTM.\n",
        "\n",
        "### Train the LSTM unit and use Lightning and TensorBoard to evaluate: Part 1 - Getting Started\n",
        "\n",
        "\n",
        "Since we are using Lightning training, training the LSTM we created by hand is pretty easy. All we have to do is create the training data and put it into a DataLoader...\n"
      ],
      "id": "e037e758"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## create the training data for the neural network.\n",
        "inputs = torch.tensor([[0., 0.5, 0.25, 1.], [1., 0.5, 0.25, 1.]])\n",
        "labels = torch.tensor([0., 1.])\n",
        "\n",
        "dataset = TensorDataset(inputs, labels)\n",
        "dataloader = DataLoader(dataset)\n",
        "\n",
        "# show the training data\n",
        "for i, (input_i, label_i) in enumerate(dataloader):\n",
        "    print(\"Training data: \", input_i, label_i)"
      ],
      "id": "7488da16",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "...and then create a Lightning Trainer, L.Trainer, and fit it to the training data.\n",
        "NOTE: We are starting with 2000 epochs. This may be enough to successfully optimize all of the parameters, but it might not. We'll find out after we compare the predictions to the observed values.\n"
      ],
      "id": "c1deb8fa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "trainer = L.Trainer(max_epochs=2000) # with default learning rate, 0.001 (this tiny learning rate makes learning slow)\n",
        "trainer.fit(model, train_dataloaders=dataloader)"
      ],
      "id": "553759be",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now that we've trained the model with 2000 epochs, we can see how good the predictions are...\n"
      ],
      "id": "ec53d743"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(\"\\nNow let's compare the observed and predicted values...\")\n",
        "print(\"Company A: Observed = 0, Predicted =\", model(torch.tensor([0., 0.5, 0.25, 1.])).detach())\n",
        "print(\"Company B: Observed = 1, Predicted =\", model(torch.tensor([1., 0.5, 0.25, 1.])).detach())"
      ],
      "id": "9f53cd49",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Unfortunately, these predictions are terrible. So it seems like we'll have to do more training. However, it would be awesome if we could be confident that more training will actually improve the predictions. If not, we can spare ourselves a lot of time, and potentially money, and just give up. So, before we dive into more training, let's look at the loss values and predictions that we saved in log files with TensorBoard. TensorBoard will graph everything that we logged during training, making it super easy to see if things are headed in the right direction or not.\n",
        "\n",
        "To get TensorBoard working:\n",
        "\n",
        "* First, check to see if the TensorBoard plugin is installed. If it's not, install it with the following command: pip install tensorboard\n",
        "* Next, run the following command: `tensorboard --logdir lightning_logs`\n",
        "\n",
        "\n",
        "NOTE: If your graphs look messed up and you see a bunch of different lines, instead of just one red line per graph, then check where this notebook is saved for a directory called `lightning_logs`. Delete `lightning_logs` and the re-run everything in this notebook.\n",
        "One source of problems with the graphs is that every time we train a model, a new batch of log files is created and stored in lightning_logs and TensorBoard, by default, will plot all of them. You can turn off unwanted log files in TensorBoard, and we'll do this later on in this notebook, but for now, the easiest thing to do is to start with a clean slate.\n",
        "\n",
        "Anyway, if we look at the loss (trainloss), we see that it is going down, which is good, but it still has further to go. When we look at the predictions for Company A (out0), we see that they started out pretty good, close to 0, but then got really bad early on in training, shooting all the way up to 0.5, but are starting to get smaller. In contrast, when we look at the predictions for Company B (out_1), we see that they started out really bad, close to 0, but have been getting better ever since and look like they could continue to get better if we kept training.\n",
        "\n",
        "In summary, the graphs seem to suggest that if we continued training our model, the predictions would improve. So let's add more epochs to the training.\n",
        "\n",
        "### Optimizing (Training) the Weights and Biases in the LSTM that we made by hand: Part 2 - Adding More Epochs without Starting Over\n",
        "\n",
        "\n",
        "The good news is that because we're using Lightning, we can pick up where we left off training without having to start over from scratch. This is because when we train with Lightning, it creates checkpoint files that keep track of the Weights and Biases as they change. As a result, all we have to do to pick up where we left off is tell the Trainer where the checkpoint files are located. This is awesome and will save us a lot of time since we don't have to retrain the first 2000 epochs. So let's add an additional 1000 epochs to the training.\n"
      ],
      "id": "a4f423bf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## First, find where the most recent checkpoint files are stored\n",
        "path_to_checkpoint = trainer.checkpoint_callback.best_model_path ## By default, \"best\" = \"most recent\"\n",
        "print(\"The new trainer will start where the last left off, and the check point data is here: \" + \n",
        "      path_to_checkpoint + \"\\n\")\n",
        "\n",
        "## Then create a new Lightning Trainer\n",
        "trainer = L.Trainer(max_epochs=3000) # Before, max_epochs=2000, so, by setting it to 3000, we're adding 1000 more.\n",
        "## And then call fit() using the path to the most recent checkpoint files\n",
        "## so that we can pick up where we left off.\n",
        "trainer.fit(model, train_dataloaders=dataloader, ckpt_path=path_to_checkpoint)"
      ],
      "id": "28279610",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now that we have added 1000 epochs to the training, let's check the predictions...\n"
      ],
      "id": "4ddce0de"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(\"\\nNow let's compare the observed and predicted values...\")\n",
        "print(\"Company A: Observed = 0, Predicted =\", model(torch.tensor([0., 0.5, 0.25, 1.])).detach())\n",
        "print(\"Company B: Observed = 1, Predicted =\", model(torch.tensor([1., 0.5, 0.25, 1.])).detach())"
      ],
      "id": "2721d1f4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The blue lines in each graph represents the values we logged during the extra 1000 epochs. The loss is getting smaller and the predictions for both companies are improving! Hooray!!! However, because it looks like there is even more room for improvement, let's add 2000 more epochs to the training.\n"
      ],
      "id": "ec7c3c04"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## First, find where the most recent checkpoint files are stored\n",
        "path_to_checkpoint = trainer.checkpoint_callback.best_model_path ## By default, \"best\" = \"most recent\"\n",
        "print(\"The new trainer will start where the last left off, and the check point data is here: \" + \n",
        "      path_to_checkpoint + \"\\n\")\n",
        "\n",
        "## Then create a new Lightning Trainer\n",
        "trainer = L.Trainer(max_epochs=5000) # Before, max_epochs=3000, so, by setting it to 5000, we're adding 2000 more.\n",
        "## And then call fit() using the path to the most recent checkpoint files\n",
        "## so that we can pick up where we left off.\n",
        "trainer.fit(model, train_dataloaders=dataloader, ckpt_path=path_to_checkpoint)"
      ],
      "id": "9f74af99",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now that we have added 2000 more epochs to the training (for a total of 5000 epochs), let's check the predictions.\n"
      ],
      "id": "5ab7a89b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(\"\\nNow let's compare the observed and predicted values...\")\n",
        "print(\"Company A: Observed = 0, Predicted =\", model(torch.tensor([0., 0.5, 0.25, 1.])).detach())\n",
        "print(\"Company B: Observed = 1, Predicted =\", model(torch.tensor([1., 0.5, 0.25, 1.])).detach())"
      ],
      "id": "efc153c0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The prediction for Company A is super close to 0, which is exactly what we want, and the prediction for Company B is close to 1, which is also what we want.\n",
        "\n",
        "The dark red lines show how things changed when we added an additional 2000 epochs to the training, for a total of 5000 epochs. Now we see that the loss (train_loss) and the predictions for each company appear to be tapering off, suggesting that adding more epochs may not improve the predictions much, so we're done!\n",
        "\n",
        "Lastly, let's print out the final estimates for the Weights and Biases. In theory, they should be the same (within rounding error) as what we used in the StatQuest on Long Short-Term Memory and seen in the diagram of the LSTM unit at the top of this Jupyter notebook.\n"
      ],
      "id": "782ee97a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(\"After optimization, the parameters are...\")\n",
        "for name, param in model.named_parameters():\n",
        "    print(name, param.data)"
      ],
      "id": "b31c55b0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Using and optimzing the PyTorch LSTM, nn.LSTM()\n",
        "\n",
        "\n",
        "Now that we know how to create an LSTM unit by hand, train it, and then use it to make good predictions, let's learn how to take advantage of PyTorch's `nn.LSTM()` function. For the most part, using nn.LSTM() allows us to simplify the init() function and the forward() function. The other big difference is that this time, we're not going to try and recreate the parameter values we used in the StatQuest on Long Short-Term Memory, and that means we can set the learning rate for the Adam to 0.1. This will speed up training a lot. Everything else stays the same.\n"
      ],
      "id": "de358271"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## Instead of coding an LSTM by hand, let's see what we can do with PyTorch's nn.LSTM()\n",
        "class LightningLSTM(L.LightningModule):\n",
        "\n",
        "    def __init__(self): # __init__() is the class constructor function, and we use it to initialize the Weights and Biases.\n",
        "\n",
        "        super().__init__() # initialize an instance of the parent class, LightningModule.\n",
        "\n",
        "        L.seed_everything(seed=42)\n",
        "\n",
        "        ## input_size = number of features (or variables) in the data. In our example\n",
        "        ##              we only have a single feature (value)\n",
        "        ## hidden_size = this determines the dimension of the output\n",
        "        ##               in other words, if we set hidden_size=1, then we have 1 output node\n",
        "        ##               if we set hidden_size=50, then we hve 50 output nodes (that can then be 50 input\n",
        "        ##               nodes to a subsequent fully connected neural network.\n",
        "        self.lstm = nn.LSTM(input_size=1, hidden_size=1)\n",
        "\n",
        "\n",
        "    def forward(self, input):\n",
        "        ## transpose the input vector\n",
        "        input_trans = input.view(len(input), 1)\n",
        "\n",
        "        lstm_out, temp = self.lstm(input_trans)\n",
        "\n",
        "        ## lstm_out has the short-term memories for all inputs. We make our prediction with the last one\n",
        "        prediction = lstm_out[-1]\n",
        "        return prediction\n",
        "\n",
        "\n",
        "    def configure_optimizers(self): # this configures the optimizer we want to use for backpropagation.\n",
        "        return Adam(self.parameters(), lr=0.1) ## we'll just go ahead and set the learning rate to 0.1\n",
        "\n",
        "\n",
        "    def training_step(self, batch, batch_idx): # take a step during gradient descent.\n",
        "        input_i, label_i = batch # collect input\n",
        "        output_i = self.forward(input_i[0]) # run input through the neural network\n",
        "        loss = (output_i - label_i)**2 ## loss = squared residual\n",
        "        self.log(\"train_loss\", loss)\n",
        "\n",
        "        if (label_i == 0):\n",
        "            self.log(\"out_0\", output_i)\n",
        "        else:\n",
        "            self.log(\"out_1\", output_i)\n",
        "\n",
        "        return loss"
      ],
      "id": "95a69c07",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now let's create the model and print out the initial Weights and Biases and predictions.\n"
      ],
      "id": "05a6e0f0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "model = LightningLSTM() # First, make model from the class\n",
        "\n",
        "## print out the name and value for each parameter\n",
        "print(\"Before optimization, the parameters are...\")\n",
        "for name, param in model.named_parameters():\n",
        "    print(name, param.data)\n",
        "\n",
        "print(\"\\nNow let's compare the observed and predicted values...\")\n",
        "print(\"Company A: Observed = 0, Predicted =\", model(torch.tensor([0., 0.5, 0.25, 1.])).detach())\n",
        "print(\"Company B: Observed = 1, Predicted =\", model(torch.tensor([1., 0.5, 0.25, 1.])).detach())"
      ],
      "id": "6d40ecd8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "As expected, the predictions are bad, so we will train the model. However, because we've increased the learning rate to 0.1, we only need to train for 300 epochs.\n"
      ],
      "id": "a0986953"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "## NOTE: Because we have set Adam's learning rate to 0.1, we will train much, much faster.\n",
        "## Before, with the hand made LSTM and the default learning rate, 0.001, it took about 5000 epochs to fully train\n",
        "## the model. Now, with the learning rate set to 0.1, we only need 300 epochs. Now, because we are doing so few epochs,\n",
        "## we have to tell the trainer add stuff to the log files every 2 steps (or epoch, since we have to rows of training data)\n",
        "## because the default, updating the log files every 50 steps, will result in a terrible looking graphs. So\n",
        "trainer = L.Trainer(max_epochs=300, log_every_n_steps=2)\n",
        "\n",
        "trainer.fit(model, train_dataloaders=dataloader)\n",
        "\n",
        "print(\"After optimization, the parameters are...\")\n",
        "for name, param in model.named_parameters():\n",
        "    print(name, param.data)"
      ],
      "id": "15f63579",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now that training is done, let's print out the new predictions...\n"
      ],
      "id": "5568ea63"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(\"\\nNow let's compare the observed and predicted values...\")\n",
        "print(\"Company A: Observed = 0, Predicted =\", model(torch.tensor([0., 0.5, 0.25, 1.])).detach())\n",
        "print(\"Company B: Observed = 1, Predicted =\", model(torch.tensor([1., 0.5, 0.25, 1.])).detach())"
      ],
      "id": "cc6dccb4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "...and, as we can see, after just 300 epochs, the LSTM is making great predictions. The prediction for Company A is close to the observed value 0 and the prediction for Company B is close to the observed value 1.\n",
        "\n",
        "Lastly, let's go back to TensorBoard to see the latest graphs. NOTE: To make it easier to see what we just did, deselect version0, version1 and version2 and make sure version3 is checked on the left-hand side of the page, under where it says Runs. This allows us to just look at the log files from the most recent training, which only went for 300 epochs.\n",
        "\n",
        "In all three graphs, the loss (trainloss) and the predictions for Company A (out0) and Company B (out_1) started to taper off after 500 steps, or just 250 epochs, suggesting that adding more epochs may not improve the predictions much, so we're done!\n"
      ],
      "id": "955f42af"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/bartz/miniforge3/envs/spot312/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}