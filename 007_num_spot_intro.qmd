---
execute:
  cache: false
  eval: true
  echo: true
  warning: false
---

# Introduction to spotpython {#sec-spot}

Surrogate model based optimization methods are common approaches in simulation and optimization. SPOT was developed because there is a great need for sound statistical analysis of simulation and optimization algorithms. SPOT includes methods for tuning based on classical regression and analysis of variance techniques.
It presents tree-based models such as classification and regression trees and random forests as well as Bayesian optimization (Gaussian process models, also known as Kriging). Combinations of different meta-modeling approaches are possible. SPOT comes with a sophisticated surrogate model based optimization method, that can handle discrete and continuous inputs. Furthermore, any model implemented in `scikit-learn` can be used out-of-the-box as a surrogate in `spotpython`.

SPOT implements key techniques such as exploratory fitness landscape analysis and sensitivity analysis. It can be used to understand the performance of various algorithms, while simultaneously giving insights into their algorithmic behavior.

The `spot` loop consists of the following steps:

1. Init: Build initial design $X$
2. Evaluate initial design on real objective $f$: $y = f(X)$
3. Build surrogate: $S = S(X,y)$
4. Optimize on surrogate: $X_0 =  \text{optimize}(S)$
5. Evaluate on real objective: $y_0 = f(X_0)$
6. Impute (Infill) new points: $X = X \cup X_0$, $y = y \cup y_0$.
7. Goto 3.


<!-- \begin{algorithm}
    \caption{Surrogate-Based Optimization}
    \label{alg:spot}
    \begin{algorithmic}[1]
        \State \textbf{Init:} Build initial design $X$
        \State \textbf{Evaluate} initial design on real objective $f$: $y = f(X)$
        
        \While{stopping criterion not met}
            \State \textbf{Build surrogate:} $S = S(X,y)$
            \State \textbf{Optimize on surrogate:} $X_0 =  \text{optimize}(S)$
            \State \textbf{Evaluate on real objective:} $y_0 = f(X_0)$
            \State \textbf{Impute (Infill) new points:} $X = X \cup X_0$, $y = y \cup y_0$
        \EndWhile
    \end{algorithmic} 
\end{algorithm} -->


## Advantages of the spotpython approach

* Neural networks and many ML algorithms are non-deterministic, so results are noisy (i.e., depend on the the initialization of the weights). Enhanced noise handling strategies, OCBA (description from HPT-book).

* Optimal Computational Budget Allocation (OCBA) is a very efficient solution to solve the "general ranking and selection problem" if the objective function is noisy. It allocates function evaluations in an uneven manner to identify the best solutions and to reduce the total optimization costs. [Chen10a, Bart11b]
Given a total number of optimization samples $N$ to be allocated to 
$k$ competing solutions whose performance is depicted by random variables with means
$\bar{y}_i$ ($i=1, 2, \ldots, k$), and finite variances $\sigma_i^2$, respectively, as 
$N \to \infty$, the \gls{APCS} can be asymptotically maximized when
\begin{align}
\frac{N_i}{N_j} & = \left( \frac{ \sigma_i / \delta_{b,i}}{\sigma_j/ \delta_{b,j}} \right)^2, i,j \in \{ 1, 2, \ldots, k\}, \text{ and }
i \neq j \neq b,\\
N_b &= \sigma_b \sqrt{ 
\sum_{i=1, i\neq b}^k \frac{N_i^2}{\sigma_i^2}
},
\end{align}
where $N_i$ is the number of replications allocated to solution $i$, $\delta_{b,i} = \bar{y}_b - \bar{y}_i$,
and $\bar{y}_b \leq \min_{i\neq b} \bar{y}_i$ [@Chen10a, @Bart11a].


* Surrogate-based optimization: Better than grid search and random search (Reference to HPT-book)
* Visualization
* Importance based on the Kriging model
* Sensitivity analysis.  Exploratory fitness landscape analysis. Provides XAI methods (feature importance, integrated gradients, etc.)
* Uncertainty quantification
* Flexible, modular meta-modeling handling. spotpython come with a Kriging model, which can be replaced by any model implemented in `scikit-learn`.
* Enhanced metric handling, especially for categorical hyperparameters (any sklearn metric can be used). Default is..
* Integration with TensorBoard: Visualization of the hyperparameter tuning process, of the training steps, the model graph. Parallel coordinates plot, scatter plot matrix, and more.
* Reproducibility. Results are stored as pickle files. The results can be loaded and visualized at any time and be transferred between different machines and operating systems.
* Handles scikit-learn models and pytorch models out-of-the-box. The user has to add a simple wrapper for passing the hyperparemeters to use a pytorch model in spotpython.
* Compatible with Lightning.
* User can add own models as plain python code.
* User can add own data sets in various formats.
* Flexible data handling and data preprocessing.
* Many examples online (hyperparameter-tuning-cookbook).
* spotpython uses a robust optimizer that can even deal with hyperparameter-settings that cause crashes of the algorithms to be tuned.
* even if the optimum is not found, HPT with spotpython prevents the user from choosing bad hyperparameters in a systematic way (design of experiments).


## Disadvantages of the spotpython approach

* Time consuming
* Surrogate can be misguiding
* no parallelization implement yet





Central Idea: Evaluation of the surrogate model `S` is much cheaper (or / and much faster) than running the real-world experiment $f$.
We start with a small example.

## Example: `Spot` and the Sphere Function

```{python}
import numpy as np
from math import inf
from spotpython.fun.objectivefunctions import Analytical
from spotpython.utils.init import fun_control_init, design_control_init
from spotpython.hyperparameters.values import set_control_key_value
from spotpython.spot import Spot
import matplotlib.pyplot as plt
```

### The Objective Function: Sphere

The `spotpython` package provides several classes of objective functions. We will use an analytical objective function, i.e., a function that can be described by a (closed) formula:
$$
f(x) = x^2
$$

```{python}
fun = Analytical().fun_sphere
```

We can apply the function `fun` to input values and plot the result:

```{python}
x = np.linspace(-1,1,100).reshape(-1,1)
y = fun(x)
plt.figure()
plt.plot(x, y, "k")
plt.show()
```

### The `Spot` Method as an Optimization Algorithm Using a Surrogate Model

We initialize the `fun_control` dictionary.
The `fun_control` dictionary contains the parameters for the objective function.
The `fun_control` dictionary is passed to the `Spot` method.

```{python}
fun_control=fun_control_init(lower = np.array([-1]),
                     upper = np.array([1]))
spot_0 = Spot(fun=fun,
                   fun_control=fun_control)
spot_0.run()
```

The method `print_results()` prints the results, i.e., the best objective function value ("min y") and the corresponding input value ("x0").

```{python}
spot_0.print_results()
```

To plot the search progress, the method `plot_progress()` can be used. The parameter `log_y` is used to plot the objective function values on a logarithmic scale.

```{python}
#| label: fig-spot-progress
#| fig-cap: "Visualization of the search progress of the `Spot` method. The black elements (points and line) represent the initial design, before the surrogate is build. The red elements represent the search on the surrogate."
spot_0.plot_progress(log_y=True)
```

If the dimension of the input space is one, the method `plot_model()` can be used to visualize the model and the underlying objective function values.

```{python}
#| label: fig-spot-model-1d
#| fig-cap: "Visualization of the model and the underlying objective function values."
spot_0.plot_model()
```

## `Spot` Parameters: `fun_evals`, `init_size` and `show_models`

We will modify three parameters:

  1. The number of function evaluations (`fun_evals`) will be set to `10` (instead of 15, which is the default value) in the `fun_control` dictionary.
  2. The parameter `show_models`, which visualizes the search process for each single iteration for 1-dim functions, in the `fun_control` dictionary.
  3. The size of the initial design (`init_size`) in the `design_control` dictionary.


The full list of the `Spot` parameters is shown in code reference on GitHub, see [Spot](https://sequential-parameter-optimization.github.io/spotpython/reference/spotpython/spot/spot/#spotpython.Spot).

```{python}
fun_control=fun_control_init(lower = np.array([-1]),
                     upper = np.array([1]),
                     fun_evals = 10,
                     show_models = True)               
design_control = design_control_init(init_size=9)
spot_1 = Spot(fun=fun,
                   fun_control=fun_control,
                   design_control=design_control)
spot_1.run()
```

## Print the Results

```{python}
spot_1.print_results()
```

## Show the Progress

```{python}
spot_1.plot_progress()
```


## Visualizing the Optimization and Hyperparameter Tuning Process with TensorBoard {#sec-visualizing-tensorboard-01}

`spotpython` supports the visualization of the hyperparameter tuning process with TensorBoard. The following example shows how to use TensorBoard with `spotpython`.

First, we define an "PREFIX" to identify the hyperparameter tuning process. The PREFIX is used to create a directory for the TensorBoard files.

```{python}
#| label: code-spot-tensorboard
fun_control = fun_control_init(
    PREFIX = "01",
    lower = np.array([-1]),
    upper = np.array([2]),
    fun_evals=100,
    TENSORBOARD_CLEAN=True,
    tensorboard_log=True)
design_control = design_control_init(init_size=5)
```

Since the `tensorboard_log` is `True`, `spotpython` will log the optimization process in the TensorBoard files.
The argument `TENSORBOARD_CLEAN=True` will move the TensorBoard files from the previous run to a backup folder, so that  TensorBoard files from previous runs are not overwritten and a clean start in the `runs` folder is guaranteed.

```{python}
spot_tuner = Spot(fun=fun,                   
                   fun_control=fun_control,
                   design_control=design_control)
spot_tuner.run()
spot_tuner.print_results()
```


Now we can start TensorBoard in the background. The TensorBoard process will read the TensorBoard files and visualize the hyperparameter tuning process.
From the terminal, we can start TensorBoard with the following command:

```{raw}
tensorboard --logdir="./runs"
```

`logdir` is the directory where the TensorBoard files are stored. In our case, the TensorBoard files are stored in the directory `./runs`.

TensorBoard will start a web server on port 6006. We can access the TensorBoard web server with the following URL:

```{raw}
http://localhost:6006/
```

The first TensorBoard visualization shows the objective function values plotted against the wall time. The wall time is the time that has passed since the start of the hyperparameter tuning process. The five initial design points are shown in the upper left region of the plot. The line visualizes the optimization process.
![TensorBoard visualization of the spotpython process. Objective function values plotted against wall time.](figures_static/01_tensorboard_01.png)

The second TensorBoard visualization shows the input values, i.e., $x_0$, plotted against the wall time.
![TensorBoard visualization of the spotpython process.](figures_static/01_tensorboard_02.png)

The third TensorBoard plot illustrates how `spotpython` can be used as a microscope for the internal mechanisms of the surrogate-based optimization process. Here, one important parameter, the learning rate $\theta$ of the Kriging surrogate is plotted against the number of optimization steps.

![TensorBoard visualization of the spotpython process.](figures_static/01_tensorboard_03.png){width="50%"}


## Jupyter Notebook

:::{.callout-note}

* The Jupyter-Notebook of this lecture is available on GitHub in the [Hyperparameter-Tuning-Cookbook Repository](https://github.com/sequential-parameter-optimization/Hyperparameter-Tuning-Cookbook/blob/main/007_num_spot_intro.ipynb)

:::
