{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b79c7cb6",
   "metadata": {},
   "source": [
    "---\n",
    "execute:\n",
    "  cache: false\n",
    "  eval: true\n",
    "  echo: true\n",
    "  warning: false\n",
    "jupyter: python3\n",
    "---\n",
    "\n",
    "\n",
    "# Hyperparameter Tuning with `spotpython` and `PyTorch` Lightning for the Diabetes Data Set {#sec-hpt-pytorch}\n",
    "\n",
    "In this section, we will show how `spotpython` can be integrated into the `PyTorch` Lightning\n",
    "training workflow for a regression task.\n",
    "It demonstrates how easy it is to use `spotpython` to tune hyperparameters for a `PyTorch` Lightning model.\n",
    "\n",
    "## The Basic Setting {#sec-basic-setup-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "imports",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_imports\n",
    "import os\n",
    "from math import inf\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df85a889",
   "metadata": {},
   "source": [
    "After importing the necessary libraries, the `fun_control` dictionary is set up via the `fun_control_init` function.\n",
    "The `fun_control` dictionary contains\n",
    "\n",
    "* `PREFIX`: a unique identifier for the experiment\n",
    "* `fun_evals`: the number of function evaluations\n",
    "* `max_time`: the maximum run time in minutes\n",
    "* `data_set`: the data set. Here we use the `Diabetes` data set that is provided by `spotpython`.\n",
    "* `core_model_name`: the class name of the neural network model. This neural network model is provided by `spotpython`.\n",
    "* `hyperdict`: the hyperparameter dictionary. This dictionary is used to define the hyperparameters of the neural network model. It is also provided by `spotpython`.\n",
    "* `_L_in`: the number of input features. Since the `Diabetes` data set has 10 features, `_L_in` is set to 10.\n",
    "* `_L_out`: the number of output features. Since we want to predict a single value, `_L_out` is set to 1.\n",
    "\n",
    "The `HyperLight` class is used to define the objective function `fun`.\n",
    "It connects the `PyTorch` and the `spotpython` methods and is provided by `spotpython`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "spotpython_setup",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module_name: light\n",
      "submodule_name: regression\n",
      "model_name: NNLinearRegressor\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_spotpython_setup\n",
    "\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "from spotpython.hyperdict.light_hyper_dict import LightHyperDict\n",
    "from spotpython.fun.hyperlight import HyperLight\n",
    "from spotpython.utils.init import (fun_control_init, surrogate_control_init, design_control_init)\n",
    "from spotpython.utils.eda import gen_design_table\n",
    "from spotpython.spot import spot\n",
    "from spotpython.utils.file import get_experiment_filename\n",
    "\n",
    "PREFIX=\"601\"\n",
    "\n",
    "data_set = Diabetes()\n",
    "\n",
    "fun_control = fun_control_init(\n",
    "    PREFIX=PREFIX,\n",
    "    save_experiment=True,\n",
    "    fun_evals=inf,\n",
    "    max_time=1,\n",
    "    data_set = data_set,\n",
    "    core_model_name=\"light.regression.NNLinearRegressor\",\n",
    "    hyperdict=LightHyperDict,\n",
    "    _L_in=10,\n",
    "    _L_out=1)\n",
    "\n",
    "fun = HyperLight().fun"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31c4fbcd",
   "metadata": {},
   "source": [
    "The method `set_hyperparameter` allows the user to modify default hyperparameter settings.\n",
    "Here we modify some hyperparameters to keep the model small and to decrease the tuning time.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5e5a27ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | transform             |\n",
      "|----------------|--------|-----------|---------|---------|-----------------------|\n",
      "| l1             | int    | 3         |     3   |   4     | transform_power_2_int |\n",
      "| epochs         | int    | 4         |     3   |   7     | transform_power_2_int |\n",
      "| batch_size     | int    | 4         |     4   |  11     | transform_power_2_int |\n",
      "| act_fn         | factor | ReLU      |     0   |   5     | None                  |\n",
      "| optimizer      | factor | SGD       |     0   |   2     | None                  |\n",
      "| dropout_prob   | float  | 0.01      |     0   |   0.025 | None                  |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |  10     | None                  |\n",
      "| patience       | int    | 2         |     2   |   3     | transform_power_2_int |\n",
      "| batch_norm     | factor | 0         |     0   |   1     | None                  |\n",
      "| initialization | factor | Default   |     0   |   4     | None                  |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.hyperparameters.values import set_hyperparameter\n",
    "set_hyperparameter(fun_control, \"optimizer\", [ \"Adadelta\", \"Adam\", \"Adamax\"])\n",
    "set_hyperparameter(fun_control, \"l1\", [3,4])\n",
    "set_hyperparameter(fun_control, \"epochs\", [3,7])\n",
    "set_hyperparameter(fun_control, \"batch_size\", [4,11])\n",
    "set_hyperparameter(fun_control, \"dropout_prob\", [0.0, 0.025])\n",
    "set_hyperparameter(fun_control, \"patience\", [2,3])\n",
    "\n",
    "design_control = design_control_init(init_size=10)\n",
    "\n",
    "print(gen_design_table(fun_control))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c60a362",
   "metadata": {},
   "source": [
    "Finally, a `Spot` object is created.\n",
    "Calling the method `run()` starts the hyperparameter tuning process.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "run",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23995.974609375, 'hp_metric': 23995.974609375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [256, 10] | [256, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23983.41015625, 'hp_metric': 23983.41015625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23741.552734375, 'hp_metric': 23741.552734375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24071.35546875, 'hp_metric': 24071.35546875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23949.021484375, 'hp_metric': 23949.021484375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24050.935546875, 'hp_metric': 24050.935546875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23958.79296875, 'hp_metric': 23958.79296875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24145.1328125, 'hp_metric': 24145.1328125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [1024, 10] | [1024, 1]\n",
      "-----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23706.568359375, 'hp_metric': 23706.568359375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24065.36328125, 'hp_metric': 24065.36328125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23994.953125, 'hp_metric': 23994.953125}\n",
      "spotpython tuning: 23706.568359375 [----------] 1.67% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23769.50390625, 'hp_metric': 23769.50390625}\n",
      "spotpython tuning: 23706.568359375 [----------] 4.15% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23939.123046875, 'hp_metric': 23939.123046875}\n",
      "spotpython tuning: 23706.568359375 [#---------] 5.99% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=64` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23275.673828125, 'hp_metric': 23275.673828125}\n",
      "spotpython tuning: 23275.673828125 [#---------] 9.02% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [1024, 10] | [1024, 1]\n",
      "-----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=64` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23818.576171875, 'hp_metric': 23818.576171875}\n",
      "spotpython tuning: 23275.673828125 [#---------] 11.32% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23994.216796875, 'hp_metric': 23994.216796875}\n",
      "spotpython tuning: 23275.673828125 [#---------] 12.40% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [256, 10] | [256, 1] \n",
      "----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23915.45703125, 'hp_metric': 23915.45703125}\n",
      "spotpython tuning: 23275.673828125 [#---------] 13.44% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22211.830078125, 'hp_metric': 22211.830078125}\n",
      "spotpython tuning: 22211.830078125 [##--------] 19.56% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23558.4296875, 'hp_metric': 23558.4296875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [###-------] 26.58% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23892.326171875, 'hp_metric': 23892.326171875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [###-------] 29.41% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23439.353515625, 'hp_metric': 23439.353515625}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [####------] 35.14% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=64` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23541.736328125, 'hp_metric': 23541.736328125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [####------] 39.56% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [1024, 10] | [1024, 1]\n",
      "-----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23998.673828125, 'hp_metric': 23998.673828125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [####------] 40.95% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23799.5703125, 'hp_metric': 23799.5703125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [####------] 43.03% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23228.322265625, 'hp_metric': 23228.322265625}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [#####-----] 49.13% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [256, 10] | [256, 1] \n",
      "----------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': nan, 'hp_metric': nan}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22521.150390625, 'hp_metric': 22521.150390625}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [#####-----] 52.92% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23720.818359375, 'hp_metric': 23720.818359375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [######----] 56.40% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23989.302734375, 'hp_metric': 23989.302734375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [######----] 59.20% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23949.74609375, 'hp_metric': 23949.74609375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [######----] 61.68% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22723.22265625, 'hp_metric': 22723.22265625}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [#######---] 65.17% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23123.189453125, 'hp_metric': 23123.189453125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [#######---] 68.98% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22926.396484375, 'hp_metric': 22926.396484375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [########--] 77.43% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23765.197265625, 'hp_metric': 23765.197265625}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [########--] 81.07% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24087.462890625, 'hp_metric': 24087.462890625}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [########--] 82.65% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22675.02734375, 'hp_metric': 22675.02734375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 22211.830078125 [#########-] 85.60% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 13072.373046875, 'hp_metric': 13072.373046875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 13072.373046875 [#########-] 89.88% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 21290.43359375, 'hp_metric': 21290.43359375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 13072.373046875 [##########] 96.28% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22605.306640625, 'hp_metric': 22605.306640625}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 13072.373046875 [##########] 100.00% Done...\r\n",
      "\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Experiment saved to spot_601_experiment.pickle\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_run\n",
    "spot_tuner = spot.Spot(fun=fun,fun_control=fun_control, design_control=design_control)\n",
    "res = spot_tuner.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c837ea8",
   "metadata": {},
   "source": [
    "## Looking at the Results\n",
    "\n",
    "### Tuning Progress\n",
    "\n",
    "After the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized with `spotpython`'s method `plot_progress`. The black points represent the performace values (score or metric) of  hyperparameter configurations from the initial design, whereas the red points represents the  hyperparameter configurations found by the surrogate model based optimization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "plot_progress_1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 2700x1800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| label: 601_plot_progress_1\n",
    "spot_tuner.plot_progress()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b3635e7",
   "metadata": {},
   "source": [
    "### Tuned Hyperparameters and Their Importance\n",
    "\n",
    "Results can be printed in tabular form.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74e33a50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | tuned                | transform             |   importance | stars   |\n",
      "|----------------|--------|-----------|---------|---------|----------------------|-----------------------|--------------|---------|\n",
      "| l1             | int    | 3         |     3.0 |     4.0 | 3.0                  | transform_power_2_int |        12.95 | *       |\n",
      "| epochs         | int    | 4         |     3.0 |     7.0 | 3.0                  | transform_power_2_int |         0.15 | .       |\n",
      "| batch_size     | int    | 4         |     4.0 |    11.0 | 4.0                  | transform_power_2_int |         2.25 | *       |\n",
      "| act_fn         | factor | ReLU      |     0.0 |     5.0 | ELU                  | None                  |         0.05 |         |\n",
      "| optimizer      | factor | SGD       |     0.0 |     2.0 | Adadelta             | None                  |         0.27 | .       |\n",
      "| dropout_prob   | float  | 0.01      |     0.0 |   0.025 | 0.016713658230795965 | None                  |       100.00 | ***     |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |    10.0 | 8.673638312631597    | None                  |         4.87 | *       |\n",
      "| patience       | int    | 2         |     2.0 |     3.0 | 3.0                  | transform_power_2_int |         0.01 |         |\n",
      "| batch_norm     | factor | 0         |     0.0 |     1.0 | 0                    | None                  |         0.01 |         |\n",
      "| initialization | factor | Default   |     0.0 |     4.0 | kaiming_uniform      | None                  |         0.15 | .       |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.utils.eda import gen_design_table\n",
    "print(gen_design_table(fun_control=fun_control, spot=spot_tuner))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02bf5bfc",
   "metadata": {},
   "source": [
    "A histogram can be used to visualize the most important hyperparameters.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b0cb55f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 1650x1050 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_importance(threshold=1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "30aee442",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l1:  12.95397071050501\n",
      "epochs:  0.14949682433506484\n",
      "batch_size:  2.2472201168199746\n",
      "act_fn:  0.053256038515850236\n",
      "optimizer:  0.2675944899306737\n",
      "dropout_prob:  100.0\n",
      "lr_mult:  4.87036199436319\n",
      "patience:  0.005862123951809096\n",
      "batch_norm:  0.005862123951809096\n",
      "initialization:  0.1452076956362811\n"
     ]
    },
    {
     "data": {
      "application/pdf": "JVBERi0xLjQKJazcIKu6CjEgMCBvYmoKPDwgL1R5cGUgL0NhdGFsb2cgL1BhZ2VzIDIgMCBSID4+CmVuZG9iago4IDAgb2JqCjw8IC9Gb250IDMgMCBSIC9YT2JqZWN0IDcgMCBSIC9FeHRHU3RhdGUgNCAwIFIgL1BhdHRlcm4gNSAwIFIKL1NoYWRpbmcgNiAwIFIgL1Byb2NTZXQgWyAvUERGIC9UZXh0IC9JbWFnZUIgL0ltYWdlQyAvSW1hZ2VJIF0gPj4KZW5kb2JqCjExIDAgb2JqCjw8IC9UeXBlIC9QYWdlIC9QYXJlbnQgMiAwIFIgL1Jlc291cmNlcyA4IDAgUgovTWVkaWFCb3ggWyAwIDAgNjY4Ljg5NDY3ODUyMzQgMjAwLjAyMTg3NSBdIC9Db250ZW50cyA5IDAgUiAvQW5ub3RzIDEwIDAgUgo+PgplbmRvYmoKOSAwIG9iago8PCAvTGVuZ3RoIDEyIDAgUiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJy0vUuzbElzFTg/v+IOYcD54v1gJjXdnxkzQGY9aGvDrIVaIKsEJAHqn9++3GNnxo7j69ybUGVCompVnsz9iHD3tdzD/U//6m/+x3/667/5t3/+yx//27/7+NPr3/76Hz/ij7+T//3bH+HH38n//tOP+OPP8r9/+xHk3x4frY3PMUvrU/71t/1fUwifIcXRq+Dh/q//8ePj//3401/I1/yj/NmfPz5K+Bxd/2PunyNV+eY0ymduqY9yYb/tWBxTvg/g629fmP7A3//48rWp5M8yw/qfH7HGz/TjH/7mx//54z//+NNfJLse+Z/PGrt8Psc4f/zD3+IZ4Drd//ZR6ucoMfT+uvYqvxtDkqfwvPRaP3ufZaQX1MJnL6PtN9jkU/Lto72gHj7b6GGMDaqfrbY04wsa8qlUy8wbVD+rvIpZX9CUi295zL5B8qmcw9wuNcqrqiHlkHasfpYea9guNsbwWUrooe2YfE6+LWyXG1P4zH3GGHesfuYyctwuOGb5XOw11h2rn2k0eSgbJq811Tr3y5OXkFKNacfkLcRZctovWV5DbLmm/ZLlPcScetovWV5EDHHm/ZLlTYQeY94vWV5FKCHn/ZLlXYQwa94vWRbu7KPvlyKLdRZZEvslT/lY7LHsn5vzUxZELtslp1A+R621jB2Tz6Uij2/DYvnsM8u17Nj87C3Lk9iwJJ/LKde+Y/K5EOv+s7l8th56Szs2P1ues+3btMjnwoxt/9syP2sfuW0LTRbsZ5Ur7vslV/lcbL3vl9zKZxl19v2S2/wsVbbifsldPidbfH8qfX7mmeu+735iWWR1TdnOsRxw/sRdpnnA/TMMec75DmPttT7kgd7hLCs344bvcPvMeco6P2C5xfPqWpLH8/XqGjb716sTc9ycq+tRXrdawNsTApxmyv32LBWVd17uT13hFuxWXi9I4VJ7v79LhTMW9u21Kxztw68Fomgotd3XEuA4k5il27JTeITQ7ytUYbGc8baWFa19tvuqV7iIgb5vEIXzSPm+lxSWB3VsO4NhqW87VGGxbfO+mRUOdd63PVAxnzneLYTBOd9MiYKjj3k3OgbnMO72SWF1LTdTZnDVW9ysnsHyKO4GUuE2+2FLDdant1ldQ1srdwNtsCyWmym/0LvNX19R0t09rN+r5e5J1tWlcnc6di/RPv3yTwYX3RubKzO4z3T3evZU0909GthavzlSe1nyEG4e11BbYi/XbKugHD7clkzU3fxy9oaOmW9Rga06PKw9fLCV225Rhi3yqg/zFY7Yjqi6M19xi+2eFvANrwBH0S7W4BZ22Qac4Y7upmdDNzu1oZtRe6FP87dBm6Hc0M2qbuhmgl/obq83dDPuG7p5gi+hJILM15OJcguxppTiLfwzuCZdC69nbrB8S7y9IIVbDPqGX+/S4Dx0M75evMHrol+rxOAxjyWlsCyJcA8NDc76kF5r1dDa021dG9p7PYJEw2frR6Co+Ihl3DeYwVkX7LYdDS69tPvuNbwlXV7bZjdcLibfbYPhYhaP8NFw+al0szsKgw0cYaThclv5btQMT1X3/GYCDc8ptbvFXHjXxbkZWMOLebPNHi+8xsN8L1xM8t3aL3yYe3n6huvjZrFejmThy6K+/M7C8+h3L7XwEA+ntm5Ldt3dB67HMy2GeLnMhdvj2Tzseszl7o7XSynt5rvXGyxqlDZPv974iltegcFaOVMN/xZHGC73cYQdawWun30FKYYnfWRbSGNwaOMeANlukMtp93jJ8LZCwmd0ZXDBF95iMcNT7SfvVTyklk+8uDGkXOvXIBLrzYsixRK4YaRctxtHyvaQF/k1zJWnJQvla5wrT/1zehf5JO77E9jA59N6YduT3cDXa3iB2yvbwNfrfYHbWtjA18J5gdsq28DXknyBr+W7Ya+V/gK3TbGBrx30ArfttoGvvfkE9428ga9d/wI3E7GBT3OyYS/T8wI3O7WBL6P2AjcLuIEvc/kCN9u6gS9D/AI3q72BTwv/wjZvsIEv1/ECNz+zgS+n9AI3D7aBL2/3AjfPuIEvN/oEN5f7wl7O+YltbvyFvTz+E9uCgxf2iiOe2BZyvLBXdPLEtkDmhb1inpcy9wqPvlXrdmwzEDu82ZMN3s3PDjcv9LwZtx0OXvD5sps7VrzwU01ymUHpmSqPphOKF2+yqqd8/B/+9oeDfbih9YOE4X7I7of3HhHwKYNPL3wq4tMWn+L4dIhwJ59nEU5GGBzhe4QdEi5JmKfLUgmjJfzXJ8uEWRMeTlg74fhEESDygSs1EF3CFTGI4sH0EaKmEO2FKDW+rEM0IKIYEX2JqFG+dEV0LqKKEQ3NF9yIOke0vDvsRGa9uIGZWMxRxGb24ycBy52V+/UBzWI0jpsBnIIu1f3WAYdFFLYHJXCW7ZqOpwq4d+WM+zsA3Eo5InmFq6zH4/0CFs6Sj9UAOA1bf6+lA1QcTDzWGeAwLELeVqXASaz3QW8UFhN4rniF4xGfKdrzOLYS0GUOt32nqD3UfZMCFlN/7GigZcwjTjO4pHQYC4XD0glfpgVwbmYPN0OksKyKw2wpHO27NxsHOImzOyyiwrbMdvupcFcmtdnahZ6S4PqOeZjx9YuHSnBd3yEqrLtp+XAo697n4X7sScUjilvPNR9+TVEhr3cnaC9MX/rmMO3t5rtvtYWgPnDzw7ZoTPx7+WxbYLpBN/9uq1E97hYJ2NId+R412DrPhyhom+LQBHX/LJ3vFbjYZsv38Ml2Zkr3gG23Pnf98GsUt6uKN6WtJnmooZV7pGRwzvFQ2hSuY9xjJYOH6V5b2AtY3nm+P0+DsxmULZhWWMxPu8fdCsvmSLfXavBMevNbNA+4RnuFW+CvcNKv3jmCwqW1+0o0uKV2aNmG935KbQpPk5g2UgO4hTKPwMlwsUeHCm94GhYrbNxK8TzqfT8bXPo4dr/h5k52fqewmJN2Ny0LnxZtbcxRcYnjTqHN8DmOEMrwoa96568G13nEUAvvdjkvYmzwOA309XELxTbGbXirh/VfeNFnuXN5w5ef3Ii/3VWbp0pgeBzx7rfWUzNJd9cf7OGPdkhtBgfz/JuuYe8w2sc3EcReebSv3xQTWyLBLmeTV2ypjXnkA9fKbDHeowXDYcnvwcVa+CZJ75KQ4jXqHtzkI4UlYjjFNtuEvZw6lu3ZMU79TJajl/WNdbhp39iim/e9i3lM/CNaIZMWmRRJlEuiczJZlMmoTHZlMi1RdYkG7AvGTF5mcjSRr5ncTeVxJqcz9Z2I9UzcZ8kAljxgyQaWnGDJDJb8ILkSllphqRiWumGpHpYaIpkkknciaSqS1fJTYH66jOTWSCaO5O1Ilo/kBEkGkeQb3ewkFa52OHr51Jtx2+HqZVTVdCYYnx8vUewziesTe4aduTSxA/pwI8sHiULdgNWPbf042I+Z/fjaj8X9uN0N8X02QKgD4RmElBAKQwgPoUeETBHq5fM0QuoIBSSEkdBLQkYJdSVEl9BiwqF9wk3oucvlfd5PNAIiKBD5gYgVvrJBZBAimhCJhQgyRL4hYg+RhoiQ5KtORKIigtYGdzf/iEVRl8q6fbfCwjXv8peiudRDy1M4ntlgoEW4yhHPKizEKd4fn8IS1d+ftaI11UOuVPgSSF/vUeFU6ri/dYWFZt7L4YDKn+VDZFV4rDjztfoU7mbhtrWqcGtH6KVo7eEQvxQu49wxBodwlCUonJMFCq/dqHAy5/zauorGWY96OINLPBKVCotbPWihwTUfFsfgOI+AC3CaMx3xlsE9HrbP4Dry3VIuON4L4i70kL+u7zjkr/WL6ZC/1vXloyLO7iZZGPryHeve65F9WU/KfMfLLa3neupf6y3cc0D2wlq4lxmttzvjzY+upVDuPnetm3YPsdYiq/cIyxZkj/cyKlu9Pd/jK1vqJgO8wom1L1RjeIUetoeSJRCfYYptuHoPf9bmnPdc425+fK3spnSVLh+peY670qVw7+OICAEjqXHEjwqLxz2ULoXlBY97bKpwK/coyNCRx5FgBixBf7m/P4PFft/jaUXFnMV79K1wTeNMhiu+smRbaK/wSOGsKVNctvuxooFPeSZGxDamoXg0XrgzE8VzCGdlgOHzS1GZ4kUozm3vGgx16b7TDW8lxLthMLyHfMjoC6/9rJJQfISjaHfBeZ5Sl+HtLCkzePR8N5gLn/fkwoXOU+la+JEwXLDEAndDv/Bqrm9j5IbbstkZvD0CW+074zc8WUpt0wfsEbdxlpQZHsI9RlpvKuWzpsxebB5H6nAtBAvddzFE8WT7aRdPbKFZQdUmtdi6DOMsULL1bZnuXclRvBfTxTblx7bPNCHqJRQpLP/U7gHN2prdJJ5Nh1I8hlOeKsM9CoFjU95ZiLtcxuQ1osYx8Y6JfUwcZGIiEx+ZWMnETSaGEu2USa1MmmVSLpN+iVTMpGUqRTPpmindRBhnQjrR3ZlMz2R9lgZgaQOSZSA5CZbCYCkPliJhKRWSgSH5Gpbe8bNBfuqI5JlIVorksEjGi+THSDaN5N5Ipo7k9dwsIFWddjh69f03+7bDCLBWRcpTumqlhikuF6vm0q4O7MOLCh8kgPSDTT8w9YNYP+D1g2M/kPaDbj9A94N5P/BnLIFwCsJACF8h7IZwIcKcfJpFOBlhcITvEXZIuCRhnoSnElZLKLDPlwm79rk4Ye6M5/uiAFEQiN7gixNEySC6B1FJiKbiCzBErSHaji8E+aIRUZiIHrXB8Sr23jDYWInKx/HFgNtM97hQUbH2R+WWwrJQ23F/gGMsR7gFWH7lzB4q3Ncb3x404BbOeFnhUixK316iGnujX/srBywb6xCv1AWkQwsFmiTkPgq3hjmGfGpXgFu3WrttUQOu7ahrVLT0swhS4TzKkeo32Apj9r0IWG6i3zcuULEm5djlCodyaleAg+3bzYAoGlYE9TI3OFw3V25xM04KL0V7M2UKL1O7GT6Fw3mWU2FZffc84YUeZHl9Rz+yhOsX0xFSretbBV0vV2B3s1KBL8eh9x7PgGo9qHZUbq3HeooO6yWMu7fT95XLvXJrvdxTulJ0KgncPK4tm3k/p2dLrB+lW7YejdlvXl8Xr2yce4SgKz2Guw5kuyK3e1G+7aCuO2gLUnS7xXhP9NnetMB9Q+OXav1d5LoLV2JDQLxO4UrgllI/zhAoXFaabhOuAHcLPnbhCrDYiuMwJOAerQx2V64Al6A7eVeuALeYT+UK8LBc6y5dAZblfMTZgIexwptyBTjncZ75ULzMU101XGjkF+kKeO/jrNJSfAajJrt0VdDaJJ2FkYbHvJLzm3QFHBm62941WExmvO/0hc908i3FSwvnmR3Fq6Vkb9KV4q2dp4EUF6rU70Zt4fmodF9wjeeZJMPNVezilX38LHZfeOlnvYfhqR1pinX1s31RrxSv9fAjCw9l3t3OemqlnCe/7CkvgWZXr/RlzXL3gAsO5UjxrXceytEqYa0dS7Pe1Cvg40vZ9VqDRT3NTb7SNbsK/3f5Std4bUckYXiy0w03+Uq3UBr3DNvacMaab/IV8G5r7aZTAQf/PvH6tb3HTeti0hhR0pjwxoQ6JuwxIZDohkxmZLIkkzGJ6slEUiaqMhGWibZE5GWiMBWRiebMFGpfz2byN1HLmbhOtHgm3TOpn6UGSCaBJR5YooIlNlgihCVOWKKFJWb8PA7J+pAckZ9QItknkqvyE1skC0ZyZiTDRvJxbvaOiks7fJmqHUMYhfKoH5cO9bnkpojN+kM+2WaXi4jyI5Ckvv3PH27g9yBBoh9Q+sGnH6j6Qa0fAPvBsh9Y+0G4H7D7wT1jAoQ3EJZBOAlhMITvEHbkUynCuwhLI5yOMEDCFwm79Kko4a2E5PqMmPBnn20Tbk6IPGH9RCMgioKrPhClgugaRAUhmglRWIgeQ9QbovX4whBRkYjmtMHlMzrZQvmnDjXxlL7wfPt6Ya8LAVqt4Hm/asDCqc57BBxzOR5IwUHJ3I8+Dwr3Mo/ydoVlhRwnFxTOs58CFeCUzzhL4dDHsUQKDpTmeFZXAe7zy+oretY7HkcLFa55HgdAFJZndkpUgHMcx/EShdOyANsWK3pQNx5NYhQWznJIVEVPd7dTolI4xoOgKTzsjPpuRRQOtR82B3Bv9dSoFM5nsajBYRzV7ArLizwyfwaPci/RWKj94maF7TvyabP1F2M4Tkat66tneZXdzTi9h937PDUqe1LzLK+y52oMdHNjCo90iFT6xmo7/KO93lOksrUwj7SQLpwz4WerLB/lVboia7gLM7Z8e74fL1R0BH34W0ihG8PY7xZ+6CYya7OFKrrjyjikJ6AlpnGi8Ws+b9ez7jJV1JSw/Ie7TBU1L97O+iqB5b7jGSsCLqmdMhVgFP8fYSjgafRwD1oFHtFyK3uICxhG/IiHAcsf3t+2wSP3s8JKYNT4xzMyB56svOAWyQOXRXMcgjVcjMzZ9UTxHs62XQqLmz4z5YrPVS6wE5copjdcO28jOsAl8DhlKoVnOxvAKC589zxNqHip5ZC7DRcfk++WZ+FtHIbK8Ba+VFgpbDz7xjEVr+3s2mV4OwmsfXqcFRmGl3y27zE89i90Wi9+tUPY6bfiXxozrIfTTbTY6b3iKxO4ywH6kOOZxlsv5ex7pGhMZ4PO9cYtdrxpGbpyTPi8aR+60MqXch5bmCtK2aUV4PL28z08WAt/lQXt0o1uFGuIcZN6dF+NeopUugtHODJva9O2L7IT4JTHCSd5ek5HrJukxSQwopgxgY0JckzAY4IfEwiZoMgESCZYEn2TyaFMPmVyK5NniZzL5F8qFzN5manRRLxmYjfRxpmUzqR3JtUzaZ+lAkjmgCUaWGKCJTJY4oMlSlhihSViSOLGT/OQnBDJIJF8E8lOkVwWyXyRPBnJqpEcnJuxowrUDm9Ga4cROCWzWUuvKiE22XYJt4XW+bK4J+64m1713X/+cIPABwkY/eDSD0T9oNUPcN1Y2A+b/RDbD8f90J3E+YwVEA5BGAfhJ4TNEO5DmJJPqwgHI4yN8DvCBgl3JEyT8FLCYgnl9fkxYdM+9yZMnfF6ogIQzYAoDL4cQbQLonQQXYSoKERzIQqNL+cQ7ccXioiqRDSoDW7ov3V1iXh9CeCc5z3GUhTL8ri8BsMS01kcBlg2/lk81dRelFPaAxxmO7Wppi3a+tF5QeHWjq5XipYejrYLCqcR712vFI3hi9TZPhsKKo+0tMK913NRApYneUpTgIsV8u4LHnBeXfK27QE4lS/SFOCYT2UK6MVlX9sU/R7F4h/dFhQerZ4FlYC7PevdXiiczz7NCuPzhy1SuIxTmVI4ziPpZ/A63bhZRcDVshqbCTU0nvbWviOeB/8U/lo9pXBNZ/WUwl/chN76OiCwORV9fiGfxVMK93yW/+pLqPkQpvSFFU0Xbp5QX66hm9fUlWCpxc3D6rKxY9ObMwZag17E5rh1QRbre/9y8rp651GGbku9Ho2vbF9YRPGKMwDKPY5bzGT77Uzk2d5cIpYrV90kqIx5SeKmDglK4WL50S2mUxh78h4BCjxDGOXo4arwCtO36FJh+Zd790+DZztkQYWj0dYtzFW02CPdgmKFez4LpRSW93I2swKeEJQdAbriedgu3wJ6xWtPR+2f4fIwTsKg+DTTvBMM4Dm0dLYrUXxVsG/8ReGc0nHGT2HZNEdJpOF1ddvc2JTiLdbzjJ/ho52FUop3O2K/szvDV/HDRgYVHyme5NHwPI/2Bwsv9dCg1sf72enG8HjEPNfVnDWxC89fCqXsbvvZp8fg5aA34m4PM7bjJPp6+KvKehMG7F2Fs07K3qxVM+yyg62EFVZtMoWunLEah26yhq20FM/O8bYySz6re2wl13g2YLKVX770jredYoUHu4yj+OoOu6k+tg3XWcpNJFJcvNCpQdkeT1/aXOHOvfZUu2ZFFC6ihzH5jMltTJ5jch6T/5hcyORFJkcS9ZJonUwaZVIqk16JVMukXSoFM+mYKc2+Ls1kbCZ7E5WciepMhGeiPRP5SU6ApRBYyoGlKFhKg2RAWMKEJVhIQobkb0i2h+SGSCaJ5J1IlorktEgGjOTLSHbNzcVRSWmDd4O1wxIfyT/P18E92cVVjMWAChi121SCoCy+xgSo7/7zhxvsPUhg6MaQfrjph6Z+GOuHvH547IfSftjth+gknmfRP+EKhFn4NIRwFsJwCB/yyRNhWoSXERZHOB9hiIRPEvZJuCohtj4L9imzz68JG2fcnTB9ogsQFcGXHIg+QdQMX/ogOglRVYgGQxQbou/4YhBRjojOtMH9MzptFMb4bBJHhaP6XWGxL/cCdUVjr6doJrC4h3C0UFC42rHb/YkAlnd3dKlQOLTz6KSgZcR81rIBrutCtvcIONum2d864GjkaVsiA3+WzumMCq+ttK8+wNWCkn2tAs7Gp/aVDVhI3BFoKRxGPM/ACox2dKfEC1g4Vjs2JOC+aiNfuxdoC/04oqIwumEchgFwMZlzNyOA5daP4zIGx3qaKMDpbP9p6KJ0m/VTOJ7TLAwOlgZ4GVZD23GKaH3HOPrlGFyOzN66unbwdLuXlI/pHgavXqmbp9HnVL6cM9enmsPZjUrfge6ZzePp67LemZt31Heb5z2jZwvBegpuXherRmKAw0PrErN+Jps3B1qsLcfm+XXxWmveLUrQlW6/tgUUui2sgGkLPnQLmcvYAhXdb2YlNv0JaIvhONK32R9fwbprVe0TJ0/qMeJQ4ZrOBqUKz3qUjStcs/VG3LUqwOJIjkAUcJP/e7ShULjM46UYvKSLXawSuMd2BtAKFysW28UqwGKizugcuAQ4/YtYBdxSfTetCnBdbUh2rQp4X5m6XasCPls7k+HAZ1zMa9eqgK/WDDexCrhY+4MaKSz75kzlK97L2aXTcPmWL2IV8GkHJm5iVfvMQYLe81Sf4e3LGRvF5TEe2vzC0xkeLXxt702sUjj2wx6vnx3nqT6DV9OEXazSu+qnb1hPYfYjR7dwI5Q3tUqfsvXWuKlVwOU7z+NW9rJCPzpiK5xWXLCrVcCF5H9Rq7B2JEQ+G3Qr3ko/C6YUL/HLnEPFl0W5qVXYEmOOY7KL4S3W82yc4nLnR1Mq3Z5zji9qFXAhhGc3KcVzPJN2wKvXZP2mbjE1jIhnTGtj2hzT8pj2x7RCpi0yLZJpl0TqZMooU1KZ8sqUWl/YZTow1Y2JzMxEaaJhM82baeRMU2caPNPsmcbPcgIkhcAyDiRBwfIZLP/B8iUsv8LyMSR/Q9I9JDlEUkl+3okkqUhKiyTASLqMJNdIKs5N3FEFaoc3k3WHU252l6pXQYMSb9+FuoG2BohUDvbhBnwPEhz6gaQfdPoBqh/M+oGvHyT7AbUffPuBuh/UMwZA+AJhF4SLEObi0xzCiXwCRdgW4WaEyfm0j3BEwigJ/yRslVBbnwcT1uxzbMLIGX8nbJ9oA0RJ8GUHolEQRYPoH0Qt8aUVosMQ1YZoPL4gRNQjojW9YNmYyZlvI7C8mlKPeinAEqnNe4G8oqmMo9kUYLF+8ZhVo3C1UsXtiSgc1yzE1+MDHIYdGd0etsJocnh/NQqns2cCjM8UR3XEVQq3csweVzRbAeO2nhSOS+97rT7A8A5HNlvhNs8hzgoXE6e3faAwDl7fd43C8dR+gfbZ01GArvBIR6MERfuSvV9bXeE6zkaeCstbOsyIwnk1W3gZHYPTOAiiwvJPB580OJ/9kA3+Mt1Z4Wh9W1+G1dCl7b+s8PqOdmQT1i/2oybE4LNNtN1MiUfCz55IPDv52PNbL+zllxRG9vTuxOwlpKNeyl6YzVR6eUd95/K+7rk+WwkWsLy8ri2b1f/g6aEVXQ0XXt5c0XVk7+n4bfHWe5LPFrqtjVc8oajEr/c26baDZrt37LTtZomjVwhkW7PVeqLp60iZXcS6C1NZXqOs3HIIUwJXWcNHXhJwW8cL9qgQsBjOe4G4wvj5U5gCLE/uFKYEHsmSZnswC7iXee+5qfAU539WUQFu7WzrKnC5NI09CAdcRjl7xio+7CTPLcgXXJZ4Pk9RKF5Xj9mdRAAf1mbjRjoEFyN2dnMzPJd6JuEVXxXCOwUCvDpC3hgT8Fm+TH0HLs/jnLhguJHnG4EDnK/jfRvhU3ymLwQReCn5qBpfePvSWsZwExF3vmpfM465FQtfXVh2NqyXk/pZ7WF3lcMXsg08hrN4fD01C41vZF6f8hoSvJN/fSmzHAm89RL7eRxL4Zi+lM7YGqnjnApoa6rlI1Raa7AcodJasqs3wa6kAL+6ZO7KC3AhUWdlkW6gbqrgTdnR/dbLPZVnu3OdFLjpRsBzTGf3c9v7szh48YYC3nQspnsRmYypakyFY6odU/mYKshURKY6MpWSiJpMA2WaKdNYmSZLNFym+VKNmEjKTIAmejXTt5kezvRzprczfZ7p+Uz/J+kCll1g2QiWvWDZDpYdYdkUknwhuRqS2iGJIJI2IkkmkpIiCSyS7iLJMZJKI4k3N01HtaYd3ozWHRY/NYa19lzKFKYRSICLOoanMnVgH27E9yDRoR9J+lGnG6C6oawf9foRsh9N+5G3H6WTkJ4RAEIXCLkgVMTnLYTkEErk8ydCtgg1I0SO0D5CEgmlJASU0FXCbX0iTGizy7EJIWf0nZB9Ig0QIcFXHYhEQQQNX/0gUgkRVogMQ0QbIvH4ehARj4jUtMFJHuRyHPuXAK7hfkRQwdDaURoFGGNbjjhK4WSnS/c7TzBGJRyN4hUuduh0f6qAhaGerwDnpfsqLdteGOCS+3FiT2EJF+8n9oCmkcuRQ1ZYLNER2Sssr/GInhQO9ZxBCVgseDtO7CksL/jogqBwWa0et70EWAK84+CIwjZTZ9ulCQdrlz/ftnTSM7vtYF8Kt1mOoEnhOo/2dYbGcURMCpdaDkHd4DNcUjSvtqObSVS45TuFXWg9kngGj+Mwtf1ePDJ4hvZw9JGyW1nV9ZuH0MexCmI3fwK4p/PEuD3TlQrdfJW+ATsouzk2vKw1oGRzgvpmx/20nq2CrgZk8626ZKwWfvPDur7GPZWkazGegouiEGLugQDQZqchtqAB6Iz3Dge6eyBM3KIiResZ/Sg66hH87JrUTWeSvShUHAX9N50JsCz44yShwhJz96MACnBZsekWEQKW13UvHVMU7XjvYY3BMx35NoXx6/c4Fijqp49eq4Bnsb22xcgCC6e2mUJ7SK34KOksfwKO9O2ZSwaeZEueEb7izRqx7owAuDzFfHRYM7zVM8JR/ApQd4aieOlH9aLBI1ribOM/wJcX3OmSwvk8pqJoPUufFO2lnv2CFZerOjrgGT7PkQ4L7uMcxmf4Kqx4EU+D1+Tmjabar8YvraIUl415VIcbXqzPxE6bFZeHdPTTtAcp/vIcx6d4s8k9O41XPC3laaP9+l7HOFoUGFy+pOJs2cgWOzyo4RgtfHe4tixHOLNxhsf+paG5Lu8awnkYTXdJH+fpfsOF9Zy9onSzJesjsWk6ujNznUfYYhu5LA1lk4zUGtQUvxzgC5CGvw7eu0lSTMIiihcTyJigxgQ4JtgxgY/ogUw+ZHIjUSeZmMnETyaWMnGViLFMvKViLxOHmZZMpGcmVTNpm0nhTDonSjsT5pmQT3R/liZgaQWWhmBpC5bmYGkRlkYhaRc/SUMyOiT/Q7JFJLdEMlEkb0WyXCQnRjJobr6NakY7vNmsDZZ9m2a15ftUmFA1I++vhE1hOrAPN6p7kAjQDRb9uNKPQf141Q1t/SjYj5jd4NqPw0nQzkJ8QggIfSBkg1ATn8f4nMfnR4RMEerl8zRC6ggF9PkiIZeEihLe6nJcQoh9+kzINqPmhMgT2k9EAl9RIPIDESuItEGEECKbEJGFSDJEwPHVHl8ZIjLSBsMMfq0sl30pPmNaU8ztq3VLxXmvv1I0tbNYS2Cxgrkfhw4VlnV4xJ2AR6nlqBoD3Nc0gP1hA87tmBUDFAdnjzZRCq+z8/tbF7ieHcMULCu63pYT4DDSkbIDLIZunJoT4Kt/17awAQc7MbxvA4Hzkk33TQO4rN6P2xYDHMs5UQCwcI56z8or2mY8isgVFgN7xFEK53yeXFE42lrYTQ5gsRen/i1wnONoOmxoCqfpAzx6O/qXG1z7YVUVNUV2t8AKr8HCm7nWX/wSPdlVp3zqTnqPNhxzdxyAU/2iOwEua6DN5pT0sVpbud2FAe79qHrCawwh3sMmRdORpQFWUzr8LdARj4hJV1g0q7K5caDi/Y+iJ30mtd17ROlCl7VxRBJAmxWhb1EH9lW0LP8WoQCtViK/KUzYsMHmT2zoZn18jeqmRsX4Kc8Ox+VvapTAchVncTtQ2XenGAV4TXZ5hY4Ai9iEo28U4DrMQW1hKWB0fUn3IBZwNya5RbxAR4tHwRPQaX5yC6UFTbYk9rhb0TWzaQvTAcs/tbNlFPAUbOzWTgMUX01jdtoAHGmHs2u54mLe831fGd7X3O+NxgBf45Q30qOosJtThVJcLu0wCIbXEI/+mAvP+ax2Wp8/pyus749fTuHZ9bRxVHyuq1+j2zfKaXc7w71LwXo4LRxWeD3MHs4SC334Lc7jzLXh8QyM1rs90262EuZyIBt9V1y+5qT7tsq+lISvNbnCiZeaYAu41VOJsvV+etW1O3I8TsWvzdTT2Th77bwvHaPWRk1nrZNtayso2aUZswJniKSwmLNj/q/CfZUj7DoRcDF+X7qQA8eWOUudBB9eqZO8hukdzYsD44+/NphKeApO93N5PenL4L7UZdt9nS9zF8uYuEa0OCbdMamPSYNMSmTSI5MqmbTJpFCinDKhlQmzTMhlwi8RipmwTIVoJlwznZvI4kxGJ6o7E+mZqO+nAPx0AcktkEwES1ywRAdLjLBECku8sEQNS+yQRBDJG5EsE8lJ+Qksku0iuTE/kUaybiRHRzJ6bv6PKlk7vJmrHb5M245tZnCDd6u5w5uR3eHNJt/hMNZIz6snFmYbyOLpUNTCaoR1Yh9uFPsgEa8fHfuRtB91+xG6H837kb/PEjw+4TMPn6UwSkMIEKFLhFwRKkaIG6F5PickBJLQTUJOfSZLaC8hyYRSEwJO2LpP7YkQ4MsGRGRgkgQRMIjcQcQRX0nxVRci0RBBx1d/iFREhCUiQxHRyle4iBxGxLMNbnCZXyJCeXXVCwhlazYMYTx+U7dsz/F+gUB1LsqhwSmeUm5niCd4lq3SD1kSeBp55Um3EA+4fGE6G2sILitjibVbiBcwmbW2L+cjgOerRH9bFbLax2qHuS2hiWYB63Dott50sccvq3Oq8U7HcVmB+xz9FJkFrfLlZ/3XhJo88ilgT3SlS/HU4tCTcZTzBCLuNrRTipvaxdSCxs0STFRYmoa72w2Bm4RSRyUFYPE4lspraLGG+G5fQbulAjzWRJ/NrAFeTWt3Iwi41nNehcJLRdkN7LQxnkddraKr2elmuvWr83luyi5kzaXY3IJedrJzBCl9DiEE7bjJzbfgidQ1CmPzRHh+seTzvCKeto013Z0cXk28fN/LI04t0yxHnkr7cFoN7uZosUCKDfbZnPKE21/DnV8OHEuvWD3x5uyxTLPl5bbAQJYg3sq9dEoXZuj53tQAuyWNcYxw1p0VrDp4i/d0HyKqvcd7um1lqR1hme5yiesP9W57JRu6mTlf/7tpeiGL7Qno1nvT9ABnO22/Ba9AhWeWox0r4DZszMcWFwMe60T8FkULjNc9juMMgGObx8tSOEezTFs4D7gUy0FvwT9g2bjtvmYUbr2Oo1Wb4r23fvbLBQ6KdjIX4GJlxtHZAbhYzBHPQyeK9zPBqTDSXUcLO8Nbz+cZGMWnZYc3Xgc4XUddNhaoeLJmrjtnNHxt4Y1h2vfEL72T9Wcx/upu1wyvX8vMFI/lS3mIPoUW09lKR5/mPOp0DU3lnIBj76RYGfvO7vUdlvblIKO+88t5beqBLpHU29GG1FZUSGdvR8UxufnsYqTrVT54dunGqp9tiYcvsQSw+MHT8dreWRUZN0cteLGR4je/njGLusejtl7xkKwL7S1uwGGbGNopJQFHH+ajW6fi2UpnbmEMikxQp3VEPVrslc7uDIrLuhynWAc8jXBGZth63dPZwpDX4BSf3URCJioSDZJJlkThZIIoE1CZ4MoEWiboEv2XqMVMXGZiNBOvmdjta+NESafCOxPqma5P0gAsbcDSDCwtwdIYLO3B0iQsrUKyMCRnw1I8LCXEUkgs5cRSVCyl5WfA3GyZn1jzk3B+wo5k90gukGQO3SwjyUj66Us310m1rT1A2wzVDm92bYezjpWczyZc8vxeulh9ymFuVP6gMTyJ+H16QLgEYR6EpxBWwziQS5gIuyJcjDA3QvN8TugTSJ9tEm7KmKxPewlHJozap9+EqzNqz6QAJh0wqYFJE0zKYNIHUUqIrsJkmB1PsCPfxRcsHiHhC4t2SHDEYikWe7FYjcV2JBRkkSMJNFlcyuJYFveyOJnE1SwOp3E7i/MZLfBJBOMcjKMwTsM4EONMjGMxTkYoHGN8jCEyRkkIKOOrjN8yPkz4M6HbhJwTKk+IP5EJiKhAJAgiWBB5w9dCXOGE+vYdvswVU3V8DYgoRr685EtRvmzlS1y+HOZLZ77M5ktyvnxHtD6mDPoyItEciULp65kag/2bH3//409/kX787T9K9IVzAH8nsdj48U/yb38Gsr253MUaQjDboPJpib6Pv/yIP/7p4+9xuODHvwjyPanJqtLRsylLnI4OKn/9+PjLv/r40/+B9fzjryT+k8/+1X/4+L9+/DMYtvDPf/zfP/7qX3/873/18W8+9Bo+BrxHgO99/vYG8d+WF4quH7LY4Z5+8ffr199Hl1mhU7DizwvYMX4FQpg/ZxXPLu5AVvqvXUJ0HoEQiM8JT7JdwQv65gJ6wpKbKWgS6hcvwHkG4kbhyVrYrmDHvlkBKSIXLRtZnEr/xUtIzjPYYp3XJWzYN5cAHyibTTwrCnB+8RJuT2F/phHxgITqOAshe+la4Pzb/r/6L3/8h3/45z/kSWC7/LP/8l//y3//b//+v+7I//P1fl/7S7jDKDrk7vEht55P1L9nsdByjy1LWIDwXzcBv8b03QXMjgOMsoZvF/BCv7uAidBLLKTYdPkkv4Dy3QWgukPogLiG2xVs8HeXgCKQmBFrTHyUX0P79hrqENM87Tz6dg0v+NtrkNi4rUVTvlss49trEMMX0nEBC3N/HcKBrvU4EI+N75f93fT8/Qe+4l/gyyw0tmkl7afLvf3LH7/9w79//Pff/tv+denHv5aPXI7lT//qb/7Hf/rrv/m3f/7LH3/9j9+7l+0G/93PrMDts863fv3z45OvJ8y+9U9/Ec1P/mt5On8r/795Sfnnj49k3hnp9+dPSvT0KVHvhv22Y6/v3v74BT7d8/O/2iJeXyWrSz5d42f68Q9/8+P//PGfX248QE7BZAJZAHHa8b6/+zCH/uW//U9degXJPa7cw15P2pZJ+IQWiyO5w+YCfsU+nO98uL+9YbB152972PNv7XrgyOU9FxC8dTkH9OF848P95Q1DPHn+soc9/3ZdTSto8aOTJp6Xc2Afznc+3N/esDGuIt/X33rY829Vm1s/G8GisXXb7BKSRwnxVa/77j9/OL/0cK9o3w4SF48v28EDn3+t11mCcIlScRzd+qS1MLtWQup1fvefP7yfevgXtYMxf13qPvj88//1GZnObz38q9pBCcO/2hgXfP75O+MRnG99+L+/g3l83Qw++PzzdzrjOd/68H9/B2v8uiN88Pnn7xymdr714f/+DoqJ+LonXPD55+9Unjrf+vB/fwd7c1a6Cz7/nKv9znc8/F/7ddfpXtevkN2vbk+uJcIKH+7sS7yVJVDSv1xOunyGn8VcQkWaw3a+OpfbNbycxs+uoc6fx30JwvG31/Ay369reBngn13DgOr802soHvl3TNvtIjaD9bOriAFCy08vo3rk07Eb98t4WYOfXoasivHzy5Av/v4yXjt1u4zXVvvpZbTwK4uz/2Rxboxku4xvKMl5Gb/CSxLa5/wqlyCRrLbcYJHs94H59se/bnKeX/kff0YaykgYMHwTuFrOGHi0Yb/t2OsXtz8+SMOf/iLrT37Oqlbun+wf/7wQ+d0pbwIhUEcqoIWu5w2K2KzcR0faucknp9Uji8tAWXaHsNxx1GJmTa2XGeVHs3XamUKzh1VTyIuX38Gtyv/V38RP+t8utwuGXmcLGXqBeHLrry0h+GdAuw/w5/YZYzDVmlyL/Waq9qtp3Wv65ma7PDF0S4k/SkenFmvlQK6GPRr52eVONleClxLlK0Af/3yyXVklqQaI1R3Wq4Uy9dFjCFeATAJlV+4y2M8O5BJrG+rG7OCDLCkJZj8D2i6LNyiQDTEvGvckD0oicBXZ+2eL07KcwEcLVaLKNmRFQSFeX1T7p7CuFMuPWj4TZGtdgqHogT5Vs0sqfSUSmjxw8VmwIFD2RknrgvQRiy0eWQfJl1iQLRImP+UtdkxM+yFvq16D0uuI6HwhrgeELKZp89pwQfiNNtuQa5X/hCMM0aagDoySjkFnOWf5PRu4NdMneKNEfg1ru3RtlIIvikMWDfqNqEwjDxfCuXxRnAhiJ2oLmlyE3L017kk4M4heTl1Fy6LvXZ/11JZZSEM1sRDy7AuqEWrWeB3BlNY7DNTj4Jti+kSn1ileMqJ7jzUHxjch/zWi5suQshul6A6o8sTkxoaWtJTPGsKwkfYpfopHsi7D6BGe1kPCIk04VNFwD6FVeWDX/o0xhapCZeoSp2s1rKzkaWodXkLtmlvS78GGKC3bedKM39WHLZtshCEvUZtZQ/PRw0D4oiBfNLTaVh5Rn+31TXKFGImO5kQh6w61b6pTngXeArKUayq50BqkFCfWCzIZ8iDy86IgbqaGRHVN6OmNuUv2VZg+NSBtI+vViv46rJD8cNE2T3I/o+rRFOhF6in+/Nb+17WMDE6OCTu0z2Q/L7QMSfMpz7yr2dWmR/LxoL+yrKyYm83flaHcpGD4pbzFinRsl/8XMRDw+1zEF4/neDtYAbnY3iesQJ6hqkxcxXKmPGVpI1SUzTvnT69U1usn6sDkXZXYf8hCFW/YxYz18JMrjb90pbID85R9PmFmdASeLnyxPrFrjryiliBZPu8nl5qxH2U/Vy2CkV0oJi9XWQ+5/0TWPxROsRfyyKpWPP4L5JplK0Qdvnj8y/a5gh2E3lLy6z1+YHeIyZRHjxqb3y8NwB6k656+W8ywtMgPq6HNmCOnG3xk2X4BxrHIYsfZ1vzzBw8BGN3BZyhI6slPztLEds8yvn/wv7REZBtXdDcSS476uDbNFOE2x+hIZyBrOnv+hSsV6zQ7hjKi7xCsroQpDccJv3tH6bP+0isIURPL4pPFU8h7lw2oLhM2MwYxex2RRxnj5xcKjzoa8vodThtZ746e4JCBvrnS+muPtEXxxE02SYcnqmIX1JLJsha3omXBYp+m/P/h5wZCrvEz94JmULB8eEVocxUrTjXyK+2/+EyToGJ/cJou6srUl9+QthaPvprhNyu4+MmFyt9kcdY1ikub+i5kh4oTFUP5bfrj80yAiJGHBw1wrgHlJ+JY5a0P2Irt326fg/MfEmn0Ila/fci1IP3Zc8Hsxf+5tMmvWwESMqtPhRuuLZrjllAwF/2DivbxErHhnIw83Vp/5QE3NK5HuWzCmUixL5gnigqN/L3O8GteDTdXUtQiV/mnKXzZrrWhOkIDhoyhuq39yrVKFNxbyaiUKqoCIJBD74P03bL9Ikjwi606Qmi1aJXL7mvlIkiV30Q8JOFCQzvQX7hcCXJ7kqA5oTcpUpxj4gRuQa7/W8XgVy+3geKiZQFiqyJx7dR4X34YgcIwGVE2zDNo/fZyJ+b4Cg+pOE0tTvET14rWevn7yx33y4Uq9ySzlq1ezNfSW0eSq2xJLnH8shIRQUB2/fi7H1uSa/9v4J8VCdGuZfKyf1LE7FnElQ1lTlXr0rX8LOi9C5fQCchazS+hp+z4aJwMTQgiZj3L/8Ho5LYKriUSwTmJS5jqNY3F4bTLX1V85DXjBN+fUcRsCz0hnW8Mt6L2L6/+Ay2Lh30Se/LrD/11RJp6skGsjuzGaAfykuzPGPWogsTcIdsEooqASxZasJJvmLBoOKiFNvrE55NslhHX9wy0YEmKN1SVWIt48TFygcXuOgiFLPGbp/EfX4nAijLrikrVVyLwhuFusXcqiiLxqxJPw1ctpoPSBnsKAS0N16MraDKxbqqNbvxXXvGQO0nrzIAQYy2/xCvAgNl1fESev1XtKu1umL2EbxcqE79/83SlsJXlrUQTGbJ+Jz5eh/UAAO+RFxX1bAqo1bAR7/uTvO0Cf/W77/uh71uYKyJHfTRCVdZqxhAjoTu4GDElo5TVm61fQ6W1ME3M8HrfA1VqVb8HPrfP1Rit65uadmahyD8nw1FyV9o6nIJy4ZC/WX/vrhvvhZvMIis32sWPuno948VWiWLztJuSa+zXlpbVBBkJeEAzo7QWvayJ0A3HzBeTa2STyB21dS5I45hv9xrbm2Qv0/VHlqu/ut9dON4Lx8KB4th7MRxFRnbxDRl2/JiJ7ljG+hAkZBQ2pfUo6obXZJ7akg6KjibS956tGBmfTxmkS78fDaZt81TUbfbQbaEp9fpuAW53K9H2rDYt53m3N+xDJRph57nU69iMvOUl0VT0fLIVIrvRGg3CQM2Ump7VAmlufUmmBVIZHjjuaiA1Pp5bX8MC+XhCm4p+2fxRZenY11/HLbjhYoaO2EXPjP6mdwV/tL5mlrI8EJ4fOK7tWVn14Vw4v7AH3c3z0FWfES+WlZVZB76wS2TpJi1InjiKketlKSRGxUw2HDcaAX+xLFRAqK0fR9P5ZYjwyBoy6AHnSGT9XnbIt1vMzjG7yPeyu/V9S/HmHnT3jjxK6Du5FS3Yl0eTR1HeLywNpeVqWAIU5B61wlgYFCK0hHUguJCiqAX+wDFjTffgUPXZlmVTaS42O5IqBmmWsb5fpTxb3XIFsX23l9/dg97eeeii7/JGhj2FMlbrNNi5iAc7FJdnnUu/zOKc6KuFq0cMHi9rn3Ma1VZOUNNyhSyycIYtTLG/l1UnXoB5DeZk+F72975rKt7dhN7meeiyh3xfbeXIey39cu9zTD1ggn+KNmYRRldc+NQ9i7qz0dfCQZ1DmMEWlFCLa+EgM4SQVnFta56+dQLEaTAn881udje/ayre3YTe5sEm7FBZbDl1bPFs/kse90CPKIWFlttYvdoD5oZmXa1N9khp2hZcdh+Oq2muWohBqDPZVoYYLSZ6KI4YMoz19RhpO2zLRtkw5h7JVn53C3pb56FLXi4ggYULji5jdvFi5nLI8pr1KmUB5xX9aW/3tNZTgQgwlxWVx4uBIHpXQ0KcuqwupiMsw5XksiwGpj6A+QzmY1hAR7Y+MRXvbkJv9zx01cutjGZPIYohs7EQDYEv1GZdIbKpzC03nAwqUc89NTRCs7kssMYFcV5RfMx1ugPWW95QROiNh9/sBAx3AsxpMCfD9jLb+76t2J6leI4O8VMC3+ezvGHyLDP091aCxSZNvtCSceKecHi1Xuez45wrlEGDr7qM61yHkhH59LZSZXpkpvRnpCSupNhCGGKuZ7xIWJdFYT5GnuQw+kvjPBYXsjjSizsFz9OmDNt14mSchSF5WE/R1fxhTHtZb5o01xY91BZBdkUYiZVWpx0srj3LVcaq27YiXrSV0wvE2aynMOsnDkOaRUPLtRF602/Bz9brW2YuONoKHEet7V114Try9SOvdZxsmhKxjG9aNNcSGf+NEdkdxcW45nxFnTXZWcWGxLUdCIUnwZjQZPcUe8t2r+KQegsqveLzz/UhrEQeQWpmvmUzjnyxGNehMv/L3DWzi8yO+nb3TXvmGqKHGpwgbzBYB4AJ3npZnAKROioukYz1sIXnlHvN1ZZTwFmpuXybZkSG4q3GaRNmcFRZvNJ6KWJjvnWozAEzf83MIrGivtF905q5Zshy3RFlymZupoTR9l4LdpqZVhw+KmtVIoRsykSAR4xXeuleY8zlxtM6BKnKgGzHtoKEEOZPImYWYbOInFlFZkV9q/uuNXPM0EPNkNySXktFUsRGudSuViDrydOCM9bNuHIfCKCaWqeCceVhmjWTOALDzabiEnQsvimfTzGOYIs1pbn0iy5rEUKFLW5Zk7l/ZxXfNWeeHXpYor3mPOxuO2xlX/YGpQfTrhLtXdOlykhI2fRqClzWMClSQhDoAt2aFMnaTvlieCOltGpeMIG7fRuakEiGBD7UKjIr6lvdd82ZZ4Yeam5kqwU9Vi8rBMf9xzI4OB4yDEenh+XvEqoZxjqvLjykWuAj+Ow6igefz3PYKWn4wY6TR+vZ97zkYeZOifNlvpqZRdeIEpP7rjnz7NDDUh3yZJYd6qhdKsveICm/QksJJke/BNCIagYz3WO20C6agTKHbLY4I7NXFw4FrFqIgDK0fokyPv0gdIXRm2/som9Hfbv7rj3zLBGKN/BmQ77WWV2+ATV1qddoJ/cxsNBCSK316ClZE4EQszUVAT7xTgxH7tdudiAMC1cHjinf2K+aPbTkTnMt4xLsd4lhfNOguYboYZJSzEF7TKA2TgLHtPwvCjKL/WoYy4lLeCGLd/X9kHdT6yVwYQRisS0rb3guptXR1ihpDZ98u8Se4fvIhEUyLPLhdtE1o77VfdOeuXbooQYETz2vxjCzDm1PVrV9iBgW4GqqLg+JmxXjmhWXzWRNn+E5kyzoYt8fc78+L2FTayFdbUUw5vBbj8o8MHHY1Cz6VtS3um9aNNcSPdSCCPdUXgnLgqYUZQXYEKwuT2UlkRaQQ0ld4aLw7EtbxGtOcMbqx1O1BkFV6ze0i7tGCTi8Pr/lH4SuMHbDDaNvSH3Dez1MuVGxNlVnXzwPLh4YuLuYh67rNMaOSoxuA75zQ4clbOUohjOX9WaF6qMiQEs+cIanTe1kCE4ckJ8wPMimTRfXlxiyr5Rz6jHUC0d5zspyYFTGSrowDYBoBkxj8CSJ3/Su5IqrtmUTI4ZuYHb5suPl8rFEtMBF1v3JwX7BObhWHc5B+yqZlU5YCTZCEcV7SI5pxyLYh7Bc6pCLl7/WpjHyPCDWmLUfKCC2HjMSxIlBtocw8IaS5vuDjlcMJkgMtDufdTXxiRLUmvRKvMy73sGz6w9TO4XNVvNVSSxLvcIZNDJSB5/gi20YJYKfjtoFM2liApc231FeNtARS+9KKM1IK7jKHZOL7fvFNC1JgoV6JDRkoST1M8wv+X7sXQfhGfaHGuSJCZi2dlAbNJaDz2K9NZqJOtizWwCBKL4GXVIRle3NRFYUG8rbQ0lQgD1BB/sVWGCs7rSvLzVZkxweoLCAxo9/qJthbsl3Y+86CM+wP9Qgy7sMV5QtEdWlEyV54evQwFDFYTGcjnak3fjZQMXHYkRyf8XuabS+7HGDvZI9MhSXKw+XJOuyOcb+KFtkXoZ5Jd+LvesePLv+UHuMx9ftbEwLWuFo9hud0bRLpgQKUyy22XscEYpXBSHaqOVLPBFHh7m7mhzH7JRnOY58fbDKAXkHW1LeVVWICMM0G+5mfLfku7F3/YNn1x9q12VvxrVp5XHYMPg6cVA+l2IdCccctv5mVDlm9UGUq1orZ0KxmUMXpur9cZb1eVkuPZmtQE7UyscGmkg2Sy5E7Axz5cTLvOsdPKtuMra46KxeQNYKtv5F1Bu6YRkuDmmuUBJEItZgzyZeDeqAY95PWzc1V+taBKptRKN/EXXG1h+VB84s0GaBOfMyzCv5XuxN7+Ca9Yeab/lqIy3Iazebmw7z3dFN0FaInvWyeEDuNPbViFPcx7jiBOHRaVqLyyrrYMUbaJIau3pOdM0VHzq+jU9YPMPiH+ZkmFPyndi73sEz65b5iwUF2WaoW7ZjDTDgVeux1e3L4zOPiiPfEvyscCCiMeNFLwdaIVpUFMTLPMs/ZI9PawRYUP9+JQR9duxzaca8mWTo+yTfg73pGlyTbnWgHZ3yDBcXviroSsMSukopZZG1p+6NozpWkFnlyZjlHp9F6Lj2OkfAf5W/IPtbitYho/wFNP1ZKOLJU0zOovIXczDMIfkO7E3P4Jp0O2kjMVUrq+ei/AeLgac8445Tg9atEEehFEbhFDJOgGX7B5NkceBTzGPWboVi4Yot7KmHWq/2ux19dtd3C4kuT2uAaZHfuJc3/YJrzy0jUJMOW9I2u3MdSu04NZT7WD1/Jcy2BHhHNhyztLSLsQTpl+yFcv9u5lC8g5XlwnyGKNGnfTmaq44ranWjZRZds2Cc+xbfF/m+612f4Fnzh1phiceEFWtfSRzr68uty5ZY/bvFRluXBgQB8txhDSdO8wpx6yv0EFuB+QITNKmu2YE4WYIyeP3uibLG8W1E4gcwLN75xq/4fsj3W2/6A9eQPyybWFH3bJZZVqQJzGKxheKFZbFTX9KC0EOJsOe0ftBCB3u9Up5R2Mg02pszgoqFT7w++zx6J9seZnSY0mdGt7lj8R2R67fe9QmOMbcSpZBTtOhZ/PfyiWj81WK0snJZe3ElyiMecE9Wai3ezvqIq0BWccDZgnyENVcCXX40xVWOhVdzla37+h7TA5l+yFwLcUXEdb3rEhxb/lBb3gNKfHS/NlSC6k6biLcQseBMdL5GuVsLELm9ieMQumtwVrIEnBXBR+X5D0slaId3nEYFLHtgqSH6mY6Dy2oIhk3JIy7lXV/w1YjbudnRdTrq1FP+qV7KQ7YjO3JJcyCPtmLFPrS9sMCyRGa9Eizy9XiY+LTs+JUvKXoSN+tDRamA0UQaGPthNAu6mfZCvA/xVu+6AceAP9T0or+APZckptfCqpl0Vq/YSXmDYkKyeSp0I0iYPjyhPI+l0kxkANCJQL5CdkyzRBpGGiJPrC9CY4/5XexBIhUW2DBPQhyP66bedQCe5X6oxe0SOy5vX+K0ZuSaxU0V/QLMrYuFuqpFW6/BvBcOnz9T0KinCsZsA5TIuhgm2mQEewSzQNz5lvEyhkwY9TeOxHc8vqN60wO4xvuhRjen1teZozFA5JaR7s2qQvVo9AiXqiUcra5hQaFMG0VkR5dm6ZbdRRXoqumS1TxGsKIDMWotXqVevoTHJD+iEHJP4nse31O95wEc6/3QnigRdcW2VaHEmqXXw2no4ATLXGw3NejXwlmaHjEWT2sDwwGLf8LhpIlmD9FEMW0wg7Pp+h2owdJsAX5xoF1MVDOAWbXfuJE3PYBnvS1hgtpVTH2VRQkB6jLTQrtQrT81DWVNfhE2in2PsA2aH1vlmAKj4Y8+KEyJWB+WFYGpSGrUYtG8Gg+DWdBMQmzmRojXcX3Um+bfsdwPtdFiKjCqHW0X5DHY1p9obVCywWjvugRChAyzGyyspttQa9yyRJNjWFeeZON0AYt/Ru0sOk6j4n+wWMMPS2gMQzwI8Teec3rT8nsW25LymCEzlgWW3RYuLRKzVdaEGIj35dIW5V2bkCq+Qd5jv8irxEvRBgTJKlmVKB0HJUZaLhGpj/oNpWUEmPBl5jyYs/Gd09PoD+uZlWNBzxXhOhL0YcDBsv/8PyN3IN6oameiKP8o14RDS0gto2lQ0qLzHPVEskkvSEXL+oX4jj5OEeGe4lgX84fNHilrC+aOg6ha/pMwh2bYtBckhGXFRR05hsbwsm4tcU0S1DShTfLfXrr8N70nWfpo8YJx9mKA88pPJzwDlYdSxVG21nf591edqucNrVdPwwNZJ9nk9+PziI642GAV7SnMZFauqZPJmkOakOymuT10DmvdhsOI+0hxbb2WsA9NCkI2p5Z2HT/wtU8ilRJl9Rvv7Dpz3/e/61Udn/jQPmrCXnFeHDYQy8naq8HlyerQqbXd2qEA1olLyFPqZPhgIVfDw0ZLee3dMboGWfYlsoGRaZbvztjZ1t4MlfMRp6RW17N4OW3HO7/rWB2faJkm9K62CeTWxhAxNJqVBMXEjIVyaToVTX50Drq8vGyJXiEQ6PE0tM1ZljsMF4GQrVmsg9vAEbnveAUhIT5l4a7ZdeSe13/Xpzr+8GGOT8dcamcWjHyaKxCSIDcPhRMq/K/mdV0eO2gsGowWq/LRQK2oUAW/ltckUI29xECKa0P3OHFTY34XwPnRHgkNiWN2nDhx+e96Vc8dWilDmdpBQT2cbP2rRG02VNEa38fMn8WaxRoXCx3k+aZnl0KUdltoiBrleKkDc8or00WS5eWs+kuiDvhaAlEeiGMmXtz1+b+PP/3iBx/mvzA7SfxXQhfFUp8FWajSQy+HBGO1Zrlp4r6gwBhwhOm2qlno0A0eJ+VPbKZ1bDbhTDvsfBTLgXSTKV8sm8+y/6RagDpl5sR9p/+mN3W94EO91xzmXqD/Syx1JfpKxrFOk/kQIigsu3rGFAyG7V04zl90G2EGlyG/fOm0Evf3NbBtCu9uV7mRrxsTmZmp0swlMxfuu/x3nanjBx/a5CwEBHxq+9CXTw0U+hxMbXglN5GnSYlofQarIL4cmaeAQhWFMS5Q5YiJ2g5U561PJ1mSUX8xoLeRmlX5RfyM2WZxC1GdBHHIb/pSzxNabi5giIFa8ppCXykSRD4JZ0+m9RNd7hQ987MaXJzpvFY0zCy+Ui8wZLngK2NX2wjyNjVJh8Kf74gaoXWEBPo+mThw192/509dV2gNbRN6qiTAeUAGWj6va9NLNFKbNcRSVrSEdiMwrJh2h7nSV4CG16CrR5Zzm/UKuTCyrwDW7O74Jm5jUR6JCYlTJi7cdfhvulTPGT7Ujw09iKreLQQTRQfaY+OssEZGz9q6UXCqIkIr7chLWlA90G4uo2uJRpupWVZpND3RmC3CEN/xzNC5UgsRZoiMQ52y68Jdh/+7OFTPF1pfGZzyhF6P5m/yN6ZN46RcQns2xXNA12HFUUMxkOrSAVghXF5Si4qxNDHrT6xWuHpOyMOaxiAzphU+z614dRCkaoIVWTDPTBy56/bf9aeeJ7RCYCQUs+XHxH/N/iywDSNchz3bGjMPwVrcnB1aMW69ikh1ZGpeRSwFfX4XLEZ5WmEVhszbMmIqPBHtmchP3TJz477bf9Ofer4Q/rTiICfq8GD7WjHdCf0/xa6g6hG2D8m7wT3nu07P8VeWfqxGYAVOYa7OPLBKU7xXwwXiKYxLEywDvRMBSyxqLWmUMZVhlrzjtMlFmCSCSVUvOxVoet/xKJd1EY5GHSdxs65TftfpOf7qYY4JA50HYPlla/uugYpQDEwNT9pfMJUrrBFbjuGqiONkBV/tzMU+4LzHRG/TNnN/xkaxZ/1uYVLW1JAGWH405odu3HG6btZ1yu/6vK/+yqpbMECvFvVAxca5wy91cTRZpRQJaWzQNaSDBB1RXTJMbb+EhoBx3PrahYq8ym2H8Iqhr72jYfOPb3QQXzXxBBbmNImLdR3y7+PvPEdl3TbRIBE2MIGjX4J8wVFeNU7AgxAl83eat9YSOfSdHWF1mtKxAVVbKEIDjdrf/Tc7qCSBo6qUDdOsg6UBaJ2HXxZCiki433S9rOuT33V4nqN62EkTIZbreO8QXtsukT2FNOo6DjzaejCoMe45xHVCUUzRvGqbix3z0lMQYtDqpfmLSVG5F3VTQmHXiRiWf2D5CpbfoK7TdbSuW37TSnoGztphJy0BRi9jpCfmRf6mrGhMUlZe0lt9Ojxxc/ols2PwssLEaxJzSIyna2rfc6auH3yoD8PUO1CDhJIby8mAMUg0h6wyhNKyDo83lc6rOqt1JPWSi7sYrakwqu2WGNhw80hZ45mkVWJIWRThXIShEZdMHLjn7d/1BY4htyIXjXzNNksAZJUVGEBS0JhMKZeYMwsY9fdnNkse4O4vwi7RGlR2hEs1rGoehBUVuqn6R0SO3/J4wvqJRkB9iueAXG/1+zgEz5I/GxcHNCxLTZ/8vOoaInoiN8tmITNztfyqaK00FIf/y1frMNntqdmU5o4O7ZbgwYEnjJtXliIPPxtzpVUfpEiE1ZQwx8Icke+43vQKrjW3yuYo5nydQ5ensRpliNVuaDOssIruVxo4zIke4HossV0tJQZ8t/4czj6M1vurBUqZ0Wy8kKo+rqIzTz4nYjuT5pljYY7Id1zvWkvH0FmGDgxVtuFU72R9S2DRpnBIhIma8C7tytAhjMH2xWLuYdQrzhaLD9qA1gkt17JgJMerfgmGcOT0XfjtB+sktGcmlxho15y/aS49S2dVIeCrWaN1eMmnfNjlsQU1gPJFwxofTG2ig5eMr8sS8l9UCisIpjhjVNwyDch2RJ0ANfWocV3eyWWAhC9SdklsLrHQrj3/Xeyla+fsYCkePnolJTDGGcrV4xKzJpqlKzA61uyNNhTDoC7gaKl2pcOHPCy1ckP+MF9tuadWumQbs9CQGr7S6m42n2X/abUAs7rMSvtW/V1z6dg5q/4V22VtrbQDf14kCjMtcu5W5i6G6Dp4nBDzl7DO6QkFNJICEVQMf7SCFyGTS8QTVomTxyaOSvAwwnfiKFFSfdmVWFxioIlBf9dWOmbuYfZMlgP2QNAxBktlgD3TtHGA3bJ6Yw1xB6Z9qwWtGJxyBcReDE5tomtBXXv7rjlzLNFjmZyA+XawRKOX+VSGop4eRFRdloXXxgjaBhnUYUIYvWJtdPHruD44wHHFvUJ3i6FhzHyFw24ETuJ1Et0Ti+jaT2Jtfx9j5lgh6yEvvgCV/dCE+1yNRTGVqGhAiOotcexXS7ISw0WnZ1sTlrQ/aSk2TaFrCi4+TzUiW22n5XDQv15ZTT+ZSnKvJFPLDaJrQInBfdOQuRbIiljFMoRpXTmwGe3ZDASBszTDMYjOXvVAGjZD1QCOkmRj/cMaqhUN2dAdwXSPMbQlVFSdqOCEo32LL3kxgcxX03xjSCynb2jtIaL4TXy0vDZbgejgAoeEBynuXV5zW2PWyQc/7h/80AF7eJYYaqknn4adi0FRRM86owIjPsKlGmVMWYh5GC6rdMUrmAzUk3YFgSaUr+6dWbaC/BFq2NAXduZgKzRryBt1+GIS/2T5E780kdUxsrpHr07yN72lKTEaag1zlz8Nw8qMUeeRMO5MLjFpjf9x9uYXbKprD1dOFqF9geVDcUG4Up7yiIYZxCrLIF6xNwaRDoXRBHZVjHd4n5azjQiLFphpfJy0jgsnO4q1jGWBOgvrCQkglpnYcc/o/y421bWHNhRAvCp0AOCowbhqRWSf6UHIhPOkmor47WoYXtU04/zpWF13W9eZEWnVywiZTdeRDvFAMxs/lm2Tl50kGTWagWMZO2aemTn3zf+7htUziFbEWDVg1cgJIoSZfwgl0cbUQtbsSEn/WGqL7HQ9p4eN0ON4yUQJ+T4Uxsmlr48nW73VckXy/VfZhKseEa3JV6aYdSa23LX8f5hldU3iQ+2ZcH2dSFuUElx2TlPT2kagFDzA1bU3a+WlvjdryzLNU2Ame5DbwPcHzCNO9eqnDQ8OmTqjpmfOlW/3S9VYZRuthHNttG/OfeP/rml1rOLjypUlnRwsUXQYT/M3E0iWZpTkop+FS1kM+wQc0rhSu35cz2yob3Bd6/z7mD/PbtlJuoxO2VYdL6F6LFfGHzxJ7V+AtrlO4qKZCnTQori8s1W6hOYrsnS1Kh+LUh7yhaPebfUwRsASvk+wsIQMSeBQO8rsrm+n37R/rt1ahWep6TlAdN1qTxm76mlJKHi11HWeUn6+CIkvpvfFGS4VG80voElBhRTbfuXD4fuj6v0DxPZSa1wliOhGRGWi9tO1tq5t/uNMn2eyHsvW6Fn5UrQW36xH0cmnSJLL7X3KYujz6pkdchpqQRHsaacWw5GWwnrA8AB5kqtbFipIik7izmgmFNY8LVpRxCqQWMUStaCuwSUG+ncxDe6WftjWjVN7ESb4b2Rnf5iUjBK6YXPTK1q5Xz010PtAhyzIPckbvI5a1d7rsCww0i/p6iguzjdpw3mleDFc6ourshNNnkn43L749si3X+/aBWdPr9IctJ3S+rn5jOkmmsNndRn6AIy2NW2YgRhJz88JNW3PZB26oWnCSliqzfxRLUPiV5Mh0Kl/XicOXFHFU2CIXEONCzFFruHaHbR2keqQ4V4OesfkAcJWNy3SGLBVFT1U5QFqqrcgjT1waD3Z9dlkW4yCwjFO2WRWUBclEmqQJ38IARbPFdanJZyAB6z4arHCq4hRomAMlJS1ivMp4xIgImxbAxmArc91RTIRsnHQ0hzd2GsVRmQWO1wqdKaEyoh1ga3a+RgdzbyOxmPqMRZq+jEwMAe5BoVB6yZ066EjEsbWc+APMKyuRbRhCvCPi8PKygnzqqVEDzaUOxa0CpPQ7OreLcZERzsUyI6xX8UfaBSOjZZxDLStHADGfc2JYEtH/YZYLAPISldYpQsrjOH22bfnvv3/fQyrYxDtsE22WD5i1u1c9aFQnWWDZ5O8ZOfGeXVCEjvZYSdj1xkdi5lAtbUjehiHKbHRvM7bDJzENQYpd7QsH5XjiXzP5H5mn5k5983/e4bVtYnPI/cBIXqHbG5dnKAitIw5SqjTghp55e8ijuWuE1TtEqUrDpGiak4LLNJYuoVOo4V3gJieEI3/+EZXISoM0WyocXZNuWv43zWsjlF8qD0Tty4MCXDBezVThAHXAVc7kg4ytCOzEdPVVCYbMMh99Q6X6ECCAtk5sMPxaoKd0NAS83xhziTmtGNsKO2CvKGJDgxisDAMHANVQ8qSSrBcdsR8i4oTutpjZKzmLMw0E0Pumv29FmorgbJnpUdYO7rI4Dblh3WkeoVwneTS5JvwMqP5TsyfEhYilz50tvPiJZhEOyv0LeyvXLJNC0AdHOTmArgLLTTjh87WFZON8YuYUG+yJPNkxO/5TtLxqIDl6Vf0eFctvJkbw2AyIUpyB+j/iNkirxqBP8IDOZ7Dxl/I7SGiQy/Yec3BEgdRdDIE4AxjcA0dFnOP5xh1EGtYB6Qr/haztlVIGJBDrlZVDVMamkq6UH3XQFxWKMMKa0ghDvVjzO/5fvJpH8XjorW1Npm/7OOBffiRxoPHJSSKIRsLxRMdPd5whimna3GqPNK69ZtOYu6NOSXs66oDyCKa4Qhtmc+vaZARdHourNsVaemDMaFyym2MtfaHvMSqsNjkFC8YJ53G1epb/qlfO0gWQSl2cLmYsP/yMig+VV+9eZk79uF7CCtvkZ2a9fyVGIa8soUYSC8WX2tKquyh8jz1hAFYavLFbffxVNgdiYl4E+J7XE+l9xh/QG+ABekgcgH36GBI0qApddQGODogGy0AZaUk1NtXkGV5pDqSw4L9hJGiqS1cjHqy5Z81V5o0esRAzbS6Vuiewnw9xVH7aSxQ1rzGa90+j0ONpkiyZA9LDpFkkpd7+k1vS8wRKrn1bnsv5skQSuLqq+Jj3ls//K8EfW64tg6EYWShwqCI82q0i6hJJx7jmkJYfTG1m4XONsFuHb2uhr0V/5LjXONy11gtcbEJJ7SMHsOtxuvMvZ+5ZJlOlhnlwaMfbPrB6btBixNvPDSyiGnIh0bS+su5AguJNRF7oBfxCGs0QELf/458yrCmK9YUQeBpjWIHVI5rjLVY+D7EQ2qwIOtymo+BIZeoBQEB8tKow1mfFpclxnXopPnVvhapeTsTjC7eJeXxbeDjR0leRPVtzOLFGw81i/JAZaEO/cbVk1jLr8UIVMBoTPBkyHjj4n9QGVNBhpaBlo2CgblY2zOuVkGw50L4q4Yy8qSWxkhiRBZRkviTBD4kTHKDqj8sbHEjjjWp3SrcgcvWi/GagT4w0E5hzKZY0wQw2a7i+YF5Qql8Dq9E2gr+M8suhWu8eqyAEiLgyAjetNP5b7xkjRS4sXo4Hv744ZIfXr0btjgRx4MG/i5JYPsqyx+GqJXZKcRh+ayETqqjZstPwuzny0qgxj5d08OvXpryebGDEG9RloeVuvasENS+JtigJtliahr5kEjJD6ze9OeuI35Y6UIp2KsREkrJa7RA1n1WNZGGCAZZNcXhcJT0wIOKh1ud0zB/p88I/aVgck+KlqfQeT2Y0G6fly9cOT2WYmQpSZbCZIEBCyT8wGM3mrEP3G3cT3nuGKhftXaCXQ1mvI62IeWE0fRAQ21rp6JreWrYS11n21fjYeCJ8mi6mlHZNUvfsQHG8AsdH2gr1Y0ZSLWjpgzWdVynhRl/9NmmT009Hgu4ozkuuqaouRRbowYD6bZpLjGioV7//Wov3GBmnRiU94Qm1Kj6lx0TrikGshfTalYirCWPK0ePZaBRBWao5DaffZLgctpq6pjWUEc9tQEGZlKVBNjr86zsgJQpsLIGGl2xaMwN3t4MiryI5qHBSBkBjSFlHcnqWvQ/YTZNgznDHCBMFJ0rXM5oTV11MWaxd2lF+wisxMxheWV0vlpBt4RwJag7nqA6acGYjJlVcRF3tBYSUv9ivhF0yHvMNawASIjREC9UEETJVk0rQqexlRuJuXHb95GRE9U81PhmSJ1dd6mQ7rXv0NQG4vuPrrMHmvVD09x4Rs8cDLBtEij0y/lA7NPHiNB9PQGc4ksIWvq0683fxaIkcvWiXB5dubGYG7n9cYGRF9E8NBQZZQ64FsHlcrLdOOYplaauSIfF5efw3SEsV0MOVHGXYQfIG/ZC0EHoGY0VgjF/dLZD8aNlXmeUcOWavesXwPr1sn5xLQuuWCzmx25vRkVeSPPgxMJnIWRbdVTtxqyZPtlfdoYFezNhwOFq198xF2fhoNIpriLf63wHvmbA/lqZ70jh2stgsHmu5Gpt/WfhlR+OecHbu3GRF8/Y9ES0jIymFMgVrvOAErfIbWA4lQoOqs7/pgl5tGDDy0EYIkv62TdL3BL2BD6uhwANl10bClqB2OfbarRI6w9IvQIpb/gmuvKjMT96ezcqciKahwYjKTYcr+8Y8yu7Pa/QRfsSRbWV66wpuJs4eShgvavLjVeyFgFVUsOacf74YqhzykotgOFk+iVcugyV8Fmf/NLIyo3D3Kjt94mKvGhm9YfHg+h2uKe0Vz1OxRmTYpMww7y6uAfMFl5daNAUf8Hy0dYtHfeUz9AiQlbb6lw2cjRSwGqR/MIlv8iJx1R+DObHbO8GQ04c89AQBF5K/gWd/NHk/skRkrbmQbIVkzbSohQSa+AQDdYgyvGuOvSGCTvVov51wCHjOHHBmCxoYmj3FtdGQ8sIKBYQWHOz5YPms/Ks5MEN5EFDtgUrv4jmqWJMNYSUAOK7gIqEX36w9m0s5IUxD3U4HXy6694U17fUMNRo4ziC5nZlqVyRWcM+lq3ZtDCwLdNfxZcG/bBY12j2SnPzWf4VP1jBRq5Y0A0/SbBKQlsSTpHgyw3Vnk5FrLUQRpy0fTmVA/vQ785oy28kc8rrTaZIoqFTylBPoJIj+Xw5xGT5raFleP1ywtCulArLPw7MGV5PpdU5cKYXRjyVFSGjJkx1bnwce+y5LFwJnkn2VOJ3MgL21OVOtW1SQcAODfdaFVgj9rOQEjai+EdElV44aD0hEb6AlGWdjzCsugbDwnHSKOnZjC4UeQ1oQ6v3CLlLz2ygluyaxoNejhqFIusZZrraSclWQ50jKknQJL5fQ2X9EwDsxAA5YMDCUxbOutHvu5GlExU+ODXziRyzUhEzF4MVNYhVmCZzWrITjeRQKV80E2+GURyR1uPgnAMK7uP1LQOtPvSYg5jieC119OaxMw5iOJ85Hzc6ZdGsG/y+OfxHxyTKU1FnoSkk9ThB0+hozwsTKg/ZuEzQyETeAmD4SvPOAdtbaFpTG5rGmq6IGUYYFq52GCds7MxGQGVQRu0z+t0WnLJR2NeZmCrlS1iO3vWb3k1BLZqSY3EYxXQNbZios1ZhQ7tOons/MPciaptbK/8ccTYaQuAIlt5E5Jxq09QThEN5Ws+5teK0lLAhFB6yJezzBZVAPdv3iAmLRh/lX7TDTV6fH+3ZjsitX2Plbqw8jgX4jBD4BOLNyNyLqi3vL8GGvCpddmLD45VqD2i+Ya5bLrdc6oGE67gUgbPs83BV+wjxTfJTOumgr6E2ScJjvPmoixRTRW1z+QoJ0VOY+kLje5cNuNzhd4nNvaja2jTUjlDJOlrJO7Y1hzqz2MbqdBXGjPnqCisePa7ihia2f4XQU5XZaROgh2y1+Zz0JSYl2CBHzIf/riSYFBDTcmMS5BNK4BKIN8NzL7J+rMM8GP6MJaTzFq+TPz3peGM0PYl1aTBoLY2pcFXXIRpwWDA/tBo0RGOfqwEAhCS59kvFjmsZZsgRaAyitVF5rJEzGc0HteYSA2JQCHodnxpNCxXR8q1ioMx3MT5hBB59+D46/xpZW2WGRAI4ld5VoV+zvsTJVUjnAkNivvZEDtoBtwKVqGkVQ2VtAYDASb4DkY9xM3W2A7xZHnhEw574HR/y2RPhWizEJ4TApQ/vRudeXG1sMHbMBrSU1+ir9FueCk6mLhM851WymhG+FdhplYjQKqCtNxrkiY/luco1LBkkr+uJdnw+mD7z2zcpNZaCYyk7Hui7xMDnEX9YgO4G1g9rk95js5N8YPqWJUX71oHWtoqXqTLibzb8DA2epuLhOkCGWWnygLoloGW1rkIwTO/GcqxaZwdz9hz15h5QYwfa6AE4FuYzWuDTiDcDdC+2fnC9gKgLxE5h6084bpzbbmkRY3ln4t1w/kiHULRFXcGdxGYUO3CnI7Dm+hbkX6eNgOny4OJlBSUES9r5oWPAQAmXAuIH+oQXuCxirV1xsGJIZcsXswByBaiX7vZAv/3PH35F4YPXH5JyRZbkx6KS1V5svWDU6zMukhBTp1NnNHCdvT/rgcRiadgpW2pis63vQbSM3o3QhiXC6Fc0JlYR8YNWnYTSnkWbqHBXVh8/n4d0UA0tywTnvDMO7CGtuSIsqJmLdgrBaGc1+S+RIIe/PIx6DFQTq6tq4ZmcFkPcZEfiQAR6ll2Jb/nDCr8hrirFVxWz0E+M/YCrkmDLdHU0Fu2ymzXqlJsP4yr7dFVlX4L29WrOo1zW5XK0d8N2J+K2upcJHcCeVNO6OltCBbs4AhbqOeOVfBRzKFb/R8dg+bpa5iGpErW9GwaRdZ2G+ptJVHlqDCVB6+p/S7Q8X/cjIiHJjPoswecUbzJIl/k9lOEl1IyspAlCjrQYnuzMjjWPPx1XbwaUZCPsT0bZOkbrKo7ZJ62of0Yf0rykGcHFTurAN6V4c00YYyXopGKd1bcTHspoq09zfx/249GWh9IQ+SEtvsU2RaRvNc/oQoX4Q21iR/xtBcvWgKYbnuN1OAeNYpO1Y6/rICeOyshXxGD5gyZh3Pz21I5/xIecB6L0yWNbjJ29y30c2vKwk7x2KACz6cXDh+vcMpqYKRowkMEOy6HSDKGE7mUJU2xJGM2AQUXX6rkIEdYkzJgKP13sS72EjFSxX5A9kD25Im70p8G5A628FJc7wiVXCJcAPcKICLSVvMYBEf7ksi2Pmn1LfRzaYjVs8mAg/MPCjXlJihio0xBfoI1yFB9/hdtl6lh1jFpEu4+2oqES9Kh1x3HVPFZQbfPeZCV0pZ0rb87IJqGmhMhSAuXSLZecvcl9XM5iEx1le1pmQvtprMnpOF0+Ql+y1AhpTXrLyIknK6PDg0uzXlGi3EXKZhNrUfpirxqHYJKZpyEGfnybN2dpdpaV5xTKp1w+RfvjuI9DWqzduBAP7eKToSDMdWiog+FFTBOM2uYkrjL6ruf9dBYl7jjFWq+xpkjkDC0zaSjnvZq8yg3DPqH4A5SxLdg9gM/O67Pz/azFB2FchKG9y3wc0vLgUgwRbnwzVVAvjAIBrZxBN91rJhrG/yQ9sY6QvlxHghM2UNaM9RxPPCBO1MQXZHOM4b56NiREd4YPuL9rqfsMihAul579LszH5SyPbwqZ/bJnVsVTdXTCNRCum1iSrH12sg4XvYn5vBLFzWrgkbYTL2FDqy3diFBIz2EPedBXNNtxPKYpjknNK5xl9InRLZ+evcIl8QwTM3kndrwEtLXoCLYrXKL/+cMLc6xdm1iNFq2lq3iDMq5DXGLbrmk08gehX+eNxV7UakmriDRdX7h3+IxERSyIcmOuN0mfR9isN4PcGzqfwEnXUJfCb22Co7KT0mVbXJp96xmxMpx0aCunGG1cFyIGHOBvK3YRFgtXk/QnW7ZjWjRfQbIbJBdCmCPhmS4rfZP1eYTNigdk3eMYvTbpzjlfdRbawF9CDoxFCD1dJ9eSbMihMPrqPWsHkC0pGhPFOlq+GhLiiGRWGEMmlmlyVWIiKTMBmnFHh2a6lPRd1uextYeyLB0jqOk4FMFeDeXFVU3040G43HRy6m96nqVjsEQzltWyncTU8y9QJS3dJ5FFs6Cy6vyMqvGNfH5c5/Po6R1y2IedDeLU0aWahJq+SU0cWmGNPyJiA5UZAsY/z4toQocrWEJoH5yuWWkR2rktuHQ5A0RpQ5tGIRqRHZCvLh7i79FqzyLivrojDT38gQNd0Niujp5QsyUe7XpYDL2m6nNqGyq+FRa33G0hMoJD6JBLnpabRecb+UNkvYKtRQf7WOpGVRUNLzyDJy2HOpKV6FU0u5hrTi3qhiQKR6mf4KGiXe61W+QKsaZx0Aqpumf1u1Az1BfLQm5T7NqVJumoXbbjrK3U1QuEVhT59UesWsmrbjJfKzYpIK7EehWanC9pMyMZUfTqZeOVL8WlX4meQ9IeGv1NtHmZatUwGu86TAQTLDeDwTjoHnqRjlm6krSkZ9uuktmBY+0dH0aWp1xjdXuVn8k/LBBOppsSau3ScMLZGVckzNLloe/SPI+emaogD1O7DhT0DZPt09YzkR/W4/JFd+8q+Ja7FyuIWa0qlYHiPMcEFwnNl90pdYVPBd2i5AatuqFhlMylOfhFGKxogxR5ULrI6KVPR/8wnucStIdyKwkKurYVQk1u6K+uNxI4IR5XqirG72ryE6ruH+DiRVZaFBnVrLPvEC1LSFPW94CwQSfAoQQJIteCZD2BWA8h1nKIEEZCL10y+i7Ncxjag8pOTKQiFr+qjUhaxiZuo/Sr8GdeY4nXfjVHJSYWMaJOa67o+bw+nTChsSj7E2IR+zVitIvlRLI1aMI/PneGzxYJuXSp6O/D8jx+9vjmVAY5xMGq6jBLfQwkmqIOV4jjiiUluqig/wggYylXMjvq6RrNCgtB6c/TYcIq1HXCaLUwzZjK38ZWjRUWpFuv2lTGFn126XHRd3mOQ1EsTygxGmaKwkUh8L3IiNxDQT0gPPuIV0ukAKVvwkPVsQbOVJ1hpNV0MCg6CNRQpH2C/qCOQr3crpvf8bNBJHfEuZJHrFwW9i7LcQiK1ZiimQQqIbNWytWrBkO2D+wRHpSYniXaRtQ/gEoLHHDQ7xJWG2hvAwzSVi41UB58tncgwdjVo4QIwkQ+JmKzT5V8XuWzsDeJjktRHkpFEnrEWD6p15qvWTAdx6C7pZlKW/23KvpxxDCsZaiO9DFGg6LtUbp9jVYNXDNuxIzFbIlnyPrr8+Q4Hju9xw77McLECJZPyN5lOg5LeazJlBEqNPqEStjRX4m/gZk8XWdkRbN8FemjjsnZWHVyffMakinuoDQlRkVuzpYXqF5FxIKgUKK8dvVXgAOuerQBA2zr9R09It1vh5FCDxctlEAcmSk95i3W6OohReiSS65cKvYu0/EYijkVMbS4LuCp13lpBbKGUCoL4jIGJouv/ZIS+IrixU6l2+6KkBaiUgsJ09fJbXiPq4QJnZzzWuy0NIuUcrHSr28Ik0+wfEL2PdX5ylKszFlcNhQCtJytYQ1CQeCdtBGKjvoszXyAthXWeFngOJ+cpkCiR7at60LIr9glThxB0Da3fXXaZVSdEHsiAzC+5JErn4q9yXVcjvIwBh9hNS2dP8XAXDqAOFczhPqrq2odGfTVSQoF22FNOkS+PeF4mxkeubVx7SYJfszsyLpPVk9DawVYbQGrReCEySdYPiH744iOR1DW8K9ps2SsvG1cfZ5ilrgtaZmRWC/bjtqeR+hZt+oj2V/mk9DkB/PPs8aKOCidrwE24p0gLesZGaRNxsL9LlisaxZpssXoks+uCBl7k+l4JOXBRSwieRGLj8pP9GbXesByHWHXrOOodr4lY0L48jFyIfh5dKnIYTlq6KZi0GDS0I9UzFV/VsXgYq0fbAqXhPkNYfLolcvFfh+e4xGUBzskRA4UsarEoqc19EwuxqOk1RoRpL/geaPoEwa5XRXhTfb2sBrXgjE218dVPFrdkXBc5Fn0mEYfRoowqXJxKEKWCLciVOx6uvLK9H9env2EPvy6wQcvM2RliTQPhyBbLn2og42oBUwLl31iWiI69iBzrzhTQplyypRWT5k1eoSzXzgtWEE04GwXPxLOHIsdiswwhccx5F+hjB7dMzlY4mG4LW0v3+q4dNYgPriYr0+zvLokiNORmAS+Hq0t4wo90K2n6XeHJKb3auySMY5U4wh5vyvMZukhkkwiqSfKPF2e6pHaN0mjx/eseiUhKmr6pEIp5izRMyrqG8eTAjOwrY4Mumw4gaGyrJnY0AojzqtrsJRRo/E8P4LNVTSGQrTSFuxpy0SIJrI1JZ4uTXVJ7Ys0duz1Auf4Io137IOwvYeyNLGPo9n+hIBlAXaDQiTuaiWqomzJa35fb0VPMmm+fYR6HVeFlSz2/eJNVzl0096neOdK68RxramE7LQtO51LTvN+wz59tuqz2zdpo8f4rMNfmLPJE8SYGjGn5jFr1rVZdYHB67arwR+eq4bu8sLWYGwcZYP1VBkEDORq+ifvCLwG0bV4jnyNo0Vyv9gxuVrWkRu0mYG4FfWYnNjf8ZzFLWuqaLufMC8Owainz1NdUvstz/E4ysMOUCaNEzG7J8oOa8+wOw/do+iVs05Dak0sti6qiWSnhSs/iOmd44fWHmFvX5ELRBO1nwW5/fiD03RC6pkEQLgSYVYuD7so9mv41Itin9gH4cYWz2CID3rAYDz6DDNdrXRx0gThKZpQz8tqo9RvCoMfius5/qtjRcN2svP9cgGrGE2DF13DenxI/jZdkxP9EkBWMshKDBlXZ9ze1wLeZY0O2zPFB06qrOO8ElSni9chqRTmJbYZBagY7aVH701rS7Vfa0wIu2rmGh5VK4KH1iHRTrSabuGMw7R0Wm1AqhP8WgbKPX2m6vPaP4wxulzPhqyKMWrDKrGgCbarCZ54GC07FFwIS3k2/RPTFLEctSJ2Wk03mu9hv8BTQZ0Rt2kB0EBHbfGxdR3cSuv0G2sSSJsKsiaEjHsyrupz23dZo0P4HlQQZPIhsfgFGzhctZQzlAueIIvaI15sWL0KXDpmUTQtJRNnco0k1/YfOIuNovmCAX3pWurymbKGZqO34dUo1mOfhKu6xPbiNbIfA3rYD936sq6tJq8vjvPNf/4gjO/xzbk1ds6NVXWikqIkPTNRMfK0x+vksdhnpGuQTZX1FJ8DwFDqjYpnMayoLMxX7bx4LhA6bSHX61XZjCPmymMRdIoRKi8j7jNQl7D6/PYt5uhSvqs/nVeqSSo7WWoPoXZGywy4GURb8UoQCjPVB1ZRz9qfTZA8YZkK0US35vTTp6s+vX2XNjqMz1p5zolqHeUxYg7Gs5eSPDD5l65tAfuVcpoobC0aOSHevCSCMZHG1NBptCuvFrT8vijpEdcf03UywU23+ck5kspj1JMQVZfWvksbHcb3sD0qj1neJp5U66u9CpYfau0mHlUbfdU3QsMOYrojYERW+VkghKGkDfCQYHtcfT4kPpfv0gd7ze1jOj1R9f0cAKGehKe6rPZN1uiyPRuKjINRY03Fkmi3XqxOvF1UXz+QIV4NYjGdOEukaOxNyNu60YYKqRgt5xfQX/wazilbpzWrAShIFcyFu0fA2YlxcsCcUU9GVX1q+y5l/ML2rPOpGAZZJcqBZFm0a7q9WPFeFMYBy2emtWGF6/pE0/+r8VPVYvAe9bi/GYMG3yt7ySSG2do6nZ5sVpQd0pSnZvQKzaPQoqHrIU0xqOki16h1GQo3DJaP37NOl6O6jPZ7xuiwPavklcfZ7P7TFUIj+EhIj8vqkGstpueJlQbvkkeIA/wRdS8r8skFcjO+QinTxYyFimL6gDxw8UVL1PAZOmHzhPtT0ulRVJfPvkkXXZpnJZRRrm9eI01KihedQyMXTXVaI/rnERoxVNMynRI3jHKl7iK2gBWHRqzy6wyNuB7N3+PEVbvm6pFCQlZ4SAsVOen0SapPat8kiy7Ne2jQWsEbrpoKiZ7GWhtBFmBdKhu6ncy1vsQa6REoqGw4RH4tMFlIdRlAsdazXn2Cxd80g8VjLrtISzZYiQepCOGs02epLqn94wijR/RseLz4jZQNx6A2y9VjRHbScjtttpzkLV4dR4XaqjSIhIjcmNmpiduPVTt0VEzXXpPgZrYit6HVYVNZ12+8garfbZX0ZqWkk5FUn9S+SRY9nvfgOiBRDYm1R12bNsAHkRe7Mp5tsjsqXm00hzznq6l2rtoVYerYyDWVqSKTmnSBhqB9U+q10CX01BNmghcEBtd+YaTTo6gun/192KLH8h78rB87G0irQ9WQwD9gHTUJhsLV1G6ItytrbMvUPru/Wa1GLWrEMb50rrYdWqxR0BzWukKidj1fwSuaKFldMpIKq3sdY52EpRJW+x5f9Ijeg1Z8kvpQmiIVKyB0LllBRa/h6o2DM9ijr8MPmKZbr8aTvkrKVFWiwlLi6dNUn9S+yxcdrrcS3+I7u4ZTEpqUcWW+xYOhk2jTQTPXUf6MTJ9EUQ39Okr9/2s7tyTbbRyL/t9R3BF0SKTExzB6HqX5/xYWQJ60y9gnQhHX0R9dltP50CEBLGADuHdJrbJxqvM9aO3ru0282BEJZJqUR/e48bTSJupyooonoTND1BxoX/JihnqhKLKfiDSMN1WwWOtymf2hKZ1XVVd7tCt7Ch+8cYn53NY/IqviA+wbggdz+/EYeQquyQPSzgK69Titd+TFEVFJEcyZA2pKs29xMcO8xwENz+TaTnZYziVqauxxutyhd1dJRx+BhxvdbRPDO9a0dqLtySZif2wetH42s9vNcWWUaybsR3zvmVc99qInX0GnYtQUad/C4j9JLyYan4YQMA2yo9bWAGFWcBXMUcN8Xqs1ppFfb2RQISCLwGN1nEGxmYXS/LDYr97DkDesTkfv7dXmtZSUIWeXa41Qh9t7/IxEJnkXnbTdvc3vAGhmBFzROteuuvE5RU4BqBnNfoXFjPQej308mG9cQwsy7rGLrt5d7beTivInsj7MptgL5U+2oxXifXtsLpndKg2fUpZIhaI5VXNnToszW+QOcz5XMC/QP0VOgacpzL7FxQTzIpDhkuIb7Qy1na0yyJjFn8Lfc6+uQMi4xgwOag97Ei6a20WEfOfVWYeusdER4T1brKXpy3CmOkwl21QyT9W6lgOq4Nm3oJgBXiR4DqPQMlYuvF+f89YORGgBfsOYaq4jZLBSrnjOeetbjmFG5b5C5nAxrWHH1WNMWk14bk5xDReVMg0h61AyEEmcAlBznv3XUDFFvMdRjkHUyE6Jw+69HG6iOpx11eCIFkNFMhureFFc8dwHhwTO+fJlPDjhtt3z49xzew0rPIVIf4/Z2sj2yHm+av6vmhcsmFMQag60b2Ex4bxH5gBFxlAZ+0pJn8wfota77Twvf6YPRR+ecB8fz2VexOIwxnHZG5ljuxecNTMthiui5s502vnzURdcnnKXr8SZ82lOs38EFVPEe740DKoGQ6WvZZozo9k4KnZur0/rvNnh6hU+Ot3NNvzsHz+dXBGWMeV57xlv5slndKQeGJItF7CggzHFPDcOW9N+vhBnTqg50b4ixZTxni+yWSWzVUVRwusBaOJSDMr2Irv+fz6jfK5uEAbFLvpNU6Qqo6oysBo5c0TNkfYlLCacF+XuaX8AUaP3vewO94bFoLBDfEtYtYvdk2WH08Omvf+BKJR1Sh40Ma+9LEfr8ZzHo5eBw9gLrrLqmqjFqcqd4E1BpynLvkXFBPOeuKU0CPkfzxTHYyf2i+GQhRaNiPlaIgLKAI29ujyG0OduKHMFyeCxGZdI5rL448Qn8lrthtWtq0gLHXlZJC2hKNgUaJqC7EtSzBjvcZYzZgvj1Hg152pE90bbclz+3BuwYuQYrUYzUsIGMOeCaqYw2EnySh51A4uQ4rl9JOynCMSbcE4gpOq6V136qqtfIadC1BxpX8JiBnoxXtsHFfl58ern2HzK85vHVynrwwYd6X64/MhVO7h7dpvP9yp8b+KryM+SOTA4pMJPoeBc55ZalrmxGf3B9t+1jfn8/JgbVNlwugd62ztEUEf/odmcFaJK5swANaXZ77yYoF4IoS3+otRAFsM+20Cv5ttQeElUk83Er/fCJk6HukY16hzjs7THjOxofJNztPPekYudWaQ0LZrE61dCFzyf07+EzpRQU559SYwp74Wgt1QWrftzew9rTRAdTfYbeutap6yxRn1Rr+vnsWY0WuS5aiVgGIOOYrMz+1DaNpZM+sA4gJZUtuYydakWU0g3pdJT4mdOqzndvuXGjPceP3ZGFUyH8Jy4QX68s0YLdKN44BxoMdq1tQv99N4ULAkqm/X1F5/+6YazE4P3UAVxahvT2vz5Neb1XaehdB1KB6LxM8fVHG//PW7MeO9xfgOPKdMVVlrNNdmZ/YbliJGXTJaZUUpksDE7sa+Q0bGSte85w2ZKsBpoQJknfNT1nAkpPiAZ6cmINkkxCFlNTc6nLGv4VLCaw+1LbMyI75G5QJE4FCY/Bu/F4mNzLEtUjycyhGfHOWmotqJlM3/sFmEzQPOVkn07NiYz2aWdRPHnWfeWNvuJ0wdBmys9j33OU/IUnJpS7Z+Bxgz2ni/Nl6JZU6lrEatcKAQ5Kva5l7aVAZNFkdXPrXnWazew2BUpqBxZ8kL1cg/LQ4XmSipufD3OLd61MP5usVzgtNuyGFOxp2LVFG3fIWOGeo+Wywp1raqLkhQzv7V8TGFxwhYHkuhla5LPK24rYJW50jy1mmVhFXQqRs2Z9i0s/gP0IkfMaI7q0U4t50oNXT6vGlUoIRN6uZ2vtfCSmAArcF3RSOlVKouwTmcdi3pW+obOmdMTpGYFjrqAXtXW8kKcqNpJ4MzwNIfZt6yYYF6oiMx8HfGeqH5toLN/8BgSa3m0Y6vwzTUjJ8AZ110Ov3kj3vBhX22euH+0HMz2Gs6b7E2qX8scoigiSiiCOAWfJiz7cuBNRnmP09zB9slYpm4xzIbFwSQK7jnPKZKGLRw+5ZiwDjpj+v/cQwE4rUd8PcQbL4thAWxqjC9n4E88VrML8lEHYjCCRE6FqDnS/lsRUh7ZPB7BMOH1dF2S3bjp9tHXLZiPbxHwmCdrM6YTX95EQFx6smCyTHedevpxGgipqCmPst7ic0K+MaKd3d9xbq97IVuPXoHql3O2Tc+Af+Gvdhxk+m88vjyb1/0C2fldE4ftPJutHEumYXxz7WyDHVa2kPPtLCiN8xZDqPrpXcHTT/DvyCnY/UYo2T0FUXZGISNwwes53X+l5wx8I9xjgK+9OkKo04eBRuDElka7iva/sP1z78gyF0srlP13FlhcbavBjWzQzzRXqK1FQKQvzLif/iPtnpa20wdpxkLkN0Q2RCC4APYU79/ic4a9EdrZG/GxirRJsrZxJwONXEtZbZU0duxO3LEWULki9lqTD1B3+uZVeNWM8Nn24GEzJlxLIhULZdakMilNVVJWJX1VFC6oXVD+S35OuTeSX2bnqvOzBZFmsdre2sa9aivviKPelAD4zggTaakJVRkJYkaXhY8ZgwVh60LZXR0tRCF2wteAGaFdyYUuUhajKFxAe874bzkuYbBHJ+nylJ4yP4WDYk7OBacWZK10YQVO0HSPhlZyRYQ0VqPkGkyMudzYxvcAXO3wTP8gWjhvpE3muuy3MuqrFsUtRpQwmKJjCpp/BOQyAHu+dEOq7kklfG1U4Sb84asY2upZsUCP9JsnMhipe93XHn9gRtv5sbqUZG1/9t4Ne9O3P0e2XPfP9WXRIcVGFbZHBiggTPkxx81XIJcS2PNFyaqUr6pueTOTI7rUCQj7EiSxfLktUfzNurOdpVTZS5XtVNlRTYQ5QebE+ZLnMhh7ltbmoHEHyDAbPX92jB2eTaZ3yuzkLhkfN2+eFfYGWG0/tevI/Du8uGHPZ1LVwOmCKby3spxDVv9S1TJRWxNQmBNkipsveS5jsccvy2DMpUc7ZvDOYwvo67yBEN6TceX9mVBif7LxAtGG/WPfCiCzVyxZJutU7as/HVoov6q/1eP+afNK6xB51ULUOBQVCoZMifMl0qUs9jhEdR8e5c/LbtlgQtrBEka/tPyPqEPRg2/O8Yilqsxwi5PJDIGTncJRuJuzr+9jN4nKeXyfi7bSQEM1W0DNIlCzCzQbpiiZk+dLgMngY40et8j2iJDczl1bkHH7dA2PyA1O5qcC2nxEa/O1EeXY88IxMMWPV297xXvnjBZGrXsGoLRIoQzOqPfNo7E1i7CKhciJbu8LNKtj/77vmeNIbm7vjCPhHx+FoiDBTClhfSeYBD6eFQMcZNXRGV2794kcUa83IvnCdKsSgqbOnoPJcPrm2ZC26bBZZAIfVCzYSrR7czSaot+OGz70+ws0CsRMeVRDUIpMKWC95JeUO0Jwi0nxROPlmsD4M+nNOelCi4mW/Wh9jzSyD+70FvnLQ/HVSEkKiqUTDgxmCI/VhzRc8u6dfnQPzL6kW0IyKSWWSpKpQSgHp5Sz3vJLxh2PHzszrPWIlma7avcP3xvYHJG3tthz7lVt6Ptdd0nfPO2U64gNi/J59xie4164w0DX0TyNg+Dnus897z+VUyj1hVJrCAG/YCbBWC/5JUOPR6ZJRE5F2B42C04yv+ykH23FHZ1EAkPzaC9DTjQ/OxYY7H//RsVJZLcTe5UlrBePzRivJhdWgFwk8Xk87e3XbwwkgCnFqz+DLxl3PF8a9ERDn1BjWvgC+WADWDFQ5qdL/WTW6XSd63WtRZiNaRI3RpWqbS/t2lrni8tyutiXye2fSGpS2btCHGx3Yo25UQykmClnrHf0klHH80VdqdSYooJ2+xR6n25KIcMijLqzMvOKNC6xvcWB8zOQKk0eiWSTSk5JClLUlFPWW3r5J3hEAo2eYHe+jHE4dgO+eR9zgXhqtiPPncYi3AkH7om/Tap3HXxOePB5rDwmI0TrcH+KJHeOD62nNRlRwUnLPRqBElxK0eotvCTcEYoT7tnpgY7nAnZzkbGBuUt/Twgur3UV7c2axUF9bW5rPcURVprPm89Q7dfuLaqnd7zyUuu5CF1lgUXOWGSYJQBluJTD1Vt2yaDjcbhgX3aJqjeuIf58BosZgAQTmMNcPnhMqH54IysTbiya3C3kF4O64jl+JwhwUiLuZT3nzt3f29xFW7xqo5cMpJgpZ6y38JKAR4wTN+PWzJ5x0sw5/NTYOjvOeWxOZJx7nHjnw+5+7gy/zj0FvB2ss/G4m8nA54K3axyrlG1+e40kvzEaRyiLb/oJNnnaeSFa7D7Gdu0jHigfzpi5Y+FAD++nASjDpRyuvrJLgh0R4yDphVGYCXeUuotS5skZDISHbKugzZqSzp7k33ZHFiBGjFPrZJK0a7f6DvF8hVm9/AfaO16yMoWLAi5zEhX4I2ApRau36JIhR0QzRvC4Im8lqx4Chrm4EVXE0H0mJa7y0MmkcOwwSMCv9ZG9GbCVGd5tWjR6bSM6jN38qk9fnDN2QJOr9pTKT6gCJQIpZMoR6yW7pNARiQd7a7UEo1hEsxQqRNfjOn3+GyDYamTfu0tRp2dB7FMxo7XKA+gwLv/tsbPnR2XMLAKUZv68kWH9Wt9XegCpH5AUlDJTjlhv6SUhj0fnSPKMijA/gyHinjBgrfx1r6zEQPxakcOZQTy8A2QZPItrqJfMgvlcw7GGf8dz+DxG+7fnNngMfzA68Y67dnwsm0CgFJhSvPojqwAy7Hh0y5hoMBOiwNsnVRPiHp25C2VsZaH9LXUt07N/N5YRQD/kkT4S0uNeUSFREOnheM7I/b5/Kj1SNSSqhtNLE6cgSCBTCljv0CVDjkeL/KQoUNWM7NaYc+pR7byLz/b4j6MnS7jXnFr7uJbrlXkjlWdSeSmNQDky5Yj1El0y7ojkGRxovwxnc7bj8zd1BiV2HjOFtmwiNWNPjx0+3OBgi/tP7Jx/C3N8YxM5e5ZxnHTJWYS8SwFp9UHUKkRlQ/CPoKWUrf7y/pr93XZbUP183t/fnv3KQ701TJgr6I8tNF6f/WANOv/C/xwfyxAR7WEGDLkgNWPvBIvHtOTN1WU/V8+wCgzzKDINOd8CRkYGj0f6dkWmk8RJzf/+6f89L9KSp8/OXks9J79BoSv+9CE1Zor8d6QJujSf5VNjZmmYv8miFlgpvt7+0+N7c7RqplbN1wpUFNjkIPQSdxNSfVbfEJP7uFcWgLVlimn04BIepF/HZxrlGfMZcCc0hoThpinOxx16OFjW8o7mexaZtkkgbf+r7vR9UjAQ1QVVixDALPA6hfHveJGwwRJaGhzQRnkQbpQVt9FZhFL2N5k2+4WPvUzJjDOdWt5rbYS4Awj7wLEQzCDoZs33Y3NtdLrjqphDPL4RXc5/ghYVpQimSQnoJWGkZPBET1ekS6m8t7JgzH4vA+5YP1c8XVp3bNFpmoxJfIylPrd8qVHH6F6joIHr2k19Vy/nDDBg5WfZRzeXNSkZlJJNaVDJwSYHobeAkYFBJAfso7xXMfjo9drx//LzDJTqx7q+o3iOxuN2VKJ2U3agy8LgEXrdw5xvJAyJhu1n9cjX1NXuJSvNqjItCtmKUQTTCAZ6SRcZGDwyiSEyHsINssy80ZrAothphye+iQs0kFuCGaOvcBTVFbOeB9MX7CZvN03DfCN4tccN/7Wr+IYf7K+drIrw2OsLoQieSennz9BFAgaPbC0SfUi5UI1hVJM2a58v2I7Vu0CRq7bii70YOt/HTwXIPjHuP9uczRbXrfs1v8ygaJ6TBa1bj1jMbsEuBfoqvWyprWCUHGlyBHqFFykWPFp5poRqqqhDW+KIC4RCYPTPQB0WI4ywsIijx07hpKkdlQqSqSNFKYpqcgp6Sxf/BINIb61eO/w3w8J34dycg31iuO9jBxN0aDKlyr33sfv2zJqZRYrAgAzm9elUtntW3HmbtVwBpigOiEpCXndQfCJoJkOfr6FOFqUs/ZHdDB4zS7HuHDhGjEWxfHXH9vVliQCdCBj7vQBSsYgMadIAKA2XXoJESgCPR+6DADMi/dL2cqfJUkyzxFFJJYwOczEt1L2YvBULL5l7+mmL7cV7y7h07GPm6+lQtbjLL2OJHrHVJZK3y6r2Wt2Oq4kkJ5iceN6SRMIBIdVgjk/1GzPsj1gzImhfOYr9jtyzYX/AljGPbi6hcsCGBfZtJ8PN6rAACUPT2/hkzhvVy+6n4OZv9scih58n/EV1QAFJRi856/xEIea/LFbsxLGfKOTvz37lEcSjsRsxbJm3rxm2v2ovlCXvfdLUP2DFe66YgIXCJ3rWSc5glBW1iXhDRCdpLPOWALLQPfRlTEWKUdysGVuox9/DAjuP6Lv9DWUPwSTEmbFns57meXYEYKFdxJWMgbjX9pPuEZJ3kFZXmozPdMxcGZQLiZTuSIKEAo8cVF4CQBq6P253J2mxSElWchA73WN/t1MNs219XW583IcX0SNvYqFTr58jZp4xKqTN7FuU2RnKbZbJn5+eKloNgaJiqwq8qh6sUCIHjxxT/kwAmwSfj+ypUB0YuVQJjb47UgZeWyCy+x6bm2IGEJ5mD+aOu7wYg9TWhxF0Wga3qUMMgCClIAG13/Heto6u+O7PWYZyfqxdGgmryDkNtF9OM0r94xN+0LCuhZ+yQxq7bfCDbAsFbMmE2RU5o1uy+Oi3GhkyY5hQA8mmSzV9Ine/yl2/C9ezOPvRYislzlJlDBJbNEFE7e3a5s3zy4MB7tgTi5p7/bT1pYkSlVgReRhV0BWUIKjiZbSexNqRKoqUChHogSRjv5hBEei3fwI7xYU8yMymfY2P9tlpHCyP/5cEGeZqPsa6epWBn9fs7W8wTdObIhmaJk5VwJ/SQcoSL2OxLIyK0jM79uItVTMW81N5Pnx+OG+p7/m5nRSX2xDKHp1A6/fKudTGXmtow47mKvRO/OGEAQb73sq5Re9ZulMkR1UqVQR0IvxLg8WXcUoaYITxZ31gTHAd2Iu5fqbxzXnHpB+MX936VZJSNaQHFFj7/osmc39CwmA/utxbZ2LOrEYcYd5s1F2LzzUASjOgNAYq3FHhUR5OvY1TsgAjNpa02nzJDYEEfcZhiA/2cvhCFQIP+yjj5E3o1XEHxZad+PXllF0vD8pwL/YW1gAfX6ddeAmFef8O1//5UvgRdSJRVpLhjgqP8nDqj0QqSZDxaPG0kFoLVYJvkKYqdbBp8lom3u71MDNQY16pBW+lflp5qn38a1ZNZ8nD+nozUFRqeD5of/6oT8wT3TEP1aK7lTuQAY8KkPKA6q3dTExeZNSZg4ltI7/Wjs87IGUz3bvczHLdqo/RvKcVgRHzpOZ6M2nuRBjI3JzmxvdViJKFFs8XQYUSYIhcKBOC7rL6Sr2bZg85vBnhEyPMJvsPv4KcAj/FiTrQyQOjPJB6G6H8M7wIlD2RUfnTOj8/EtHMZHU7h4ic0p4VWQwihj+2/7dm2gMZlIyrfxMs+DbIdiaOOBZmR85PWJ+mTfIki0jJqEgnD4vSGOqtk8284+OXnKTbOix2RXanCaN4Eav9ji33ZWUm3Eb1c8Wb3c77sW+ivfEQCjIxDGBfV/Gm43k1HE68hD9XtbC8dCYKbV+cderb81DgpY/NfGNMercr6NcLH2inYaUykfpUH/5YYidTBAhGtPaWgxu9V2W9YR+G130aN9uZmaIQz72y03CCpBqJKHfqM0+JqhSqSrkqX618ex4L/BknmzjIR4r8hCJQFOdorqtsrmEMgsXo7d4lPvMN15pl2ICgvXSbRUBnjPY5YhJ0fP1B31Es10a+tWU3Fxtwuj+eFp2MPdpJOevUueexwDvvk7iNR1fcVIVO5jGoApsLjYYhlpd++mDRXw03EK0f1/wenqtwXkT/yokJpyec5Evvk3mOIBQcnv1mt69Yuz9/EqkW+0GUDmk8q+vNmP9iq93NSAP7v51Xstfb/Ys7fU47O8Xqo8EPtGNwnjtUSzlRUKVgUOnBUn+Xescfk9n4gAdpqx+T+fdnv4StiymnJytJ67Jp52d+6GQFQqSTzAGuUtRkMt7tO0C8CmPG9JNmSrJb2jQqU5qb3u1qr2kGBcnkX1zt/z77JVxkVPTsF5trOg6rHVYc7wKiVqN5dSCxv5alapQpw6VWO173J7d8nXxqTpbnh/9ZGH5cZV1IWmK2AiJPOosctUppK4+tPHweEby9ecmlibDlLl4zQvlpZHVu3mLvOTxwE4KuXB7BTPfJyUySsE97ya9y1tCXLLuR2e39Iz4w81+PlqII4YooO020QhUrerCkqM6yO7Uqc/m6D72zaPYHzOuckVMlTbDn4g4uZPd5eIUlJtes+8eeM0KPk7h9zQ764ktz35v76ldeMHVfz5e0vUrzK0pmTfCIWgkW9BjH1iR6miDGJNb7OFa+SATQMuBWAbryp8r/pu76pWlLTVJUTot7oGA8FKP3Mj1msGegnxnfa36O32Q7UOTMzLOWvT8X/e0MTZq9yVUaYUEOW4tW5YkdZnM9T7NUIqmlkmDSQCqDmhvgP3Prkwv7yKqy/cOgReD2JnfkPGMLmeeN+s4bxe1orLECxMdHvTz2cz+9OorU/Vb2QNiPdxczu1CPTlOptJaMrOl9vs8RnNNikVH4t45qKg4l0paxxTK5u1XuWbjzLxc8Nwi5AXl7M7Mr9cQa6GlmM7wzDcr1Q292Yeci5+ryiEWBB3t/Qv45jHD2frDDnPkaKVuZW7IeM7Zzv2SqT/Mr3CoYVvAsbrgyCLkB2eeyWOh4k676OZf/8+iXOE/PF7ITIKh8nUUXLGBZPQlkqbbLNIChE8xffD9m/1y1zFYq06ossT7d+W3Ib8/LU5mepiX7KsfluQZW7tqvf61j03xW1e81tWpF5fR6k2+uzmFtaakEPKijp45qerLfHZnss350GCSiJmmFC3XW1hf2oKv8LOGrKOAjUmfBWP96h9WdFzZCHj11VPOjvc8Mi2lR1J1/OTP/++yXeAvPF9/lkwL9Jvju6nuNCvRCTDnDrA52g++eo/zoqZemXnL+ofgf+/+//gsAltqRCmVuZHN0cmVhbQplbmRvYmoKMTIgMCBvYmoKMzYxNDEKZW5kb2JqCjEwIDAgb2JqClsgXQplbmRvYmoKMTcgMCBvYmoKPDwgL0xlbmd0aCAyNDQgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicRZFNcgUhCIT3nqIv8KrkVz3PpFJZTO6/Dc28JCtaheYD0wITR/ASQ+yJlRMfMnwv6DJ8tzI78DrZmXBPuG5cw2XDM2Fb4DsqyzteQ3e2Uj+doarvGjneLlI1dGVkn3qhmgvMkIiuEVl0K5d1QNOU7lLhGmxbghT1SqwnnaA06BHK8HeUa3x1E0+vseRUzSFaza0TGoqwbHhB1MkkEbUNiyeWcyFR+aobqzouYJMl4vSA3KCVZnx6UkkRMIN8rMlozAI20JO7ZxfGmkseRY5XNJiwO0k18ID34ra+9zZxj/MX+IV33/8rDn3XAj5/AEv+XQYKZW5kc3RyZWFtCmVuZG9iagoxOCAwIG9iago8PCAvTGVuZ3RoIDczIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nDM2NlcwUDA0BJFGRgYKpkBWiiEXSMDQyEQhlwskCGLlgFkGQBqiOAeuJocrA8wGaYWoB7Eg6o0tjaEqESyIbAZXGgCnyBevCmVuZHN0cmVhbQplbmRvYmoKMTkgMCBvYmoKPDwgL0xlbmd0aCAyMzEgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicNU85kgQhDMt5hT4wVRjbQL+np7Y22Pl/upKZTpDwIcnTEx2ZeJkjI7Bmx9taZCBm4FNMxb/2tA8TqvfgHiKUiwthhpFw1qzjbp6OF/92lc9YB+82+IpZXhDYwkzWVxZnLtsFY2mcxDnJboxdE7GNda2nU1hHMKEMhHS2w5Qgc1Sk9MmOMuboOJEnnovv9tssdjl+DusLNo0hFef4KnqCNoOi7HnvAhpyQf9d3fgeRbvoJSAbCRbWUWLunOWEX712dB61KBJzQppBLhMhzekqphCaUKyzo6BSUXCpPqforJ9/5V9cLQplbmRzdHJlYW0KZW5kb2JqCjIwIDAgb2JqCjw8IC9MZW5ndGggMzk1IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nD1SS27FQAjb5xRcoNLwm895UlXdvPtva0NSqSq8iTHGMH3KkLnlS10ScYXJt16uWzymfC5bWpl5iLuLjSU+ttyX7iG2XXQusTgdR/ILMp0qRKjNqtGh+EKWhQeQTvChC8J9Of7jL4DB17ANuOE9MkGwJOYpQsZuURmaEkERYeeRFaikUJ9Zwt9R7uv3MgVqb4ylC2Mc9Am0BUJtSMQC6kAAROyUVK2QjmckE78V3WdiHGDn0bIBrhlURJZ77MeIqc6ojLxExD5PTfoolkwtVsZuUxlf/JSM1Hx0BSqpNPKU8tBVs9ALWIl5EvY5/Ej459ZsIYY6btbyieUfM8UyEs5gSzlgoZfjR+DbWXURrh25uM50gR+V1nBMtOt+yPVP/nTbWs11vHIIokDlTUHwuw6uRrHExDI+nY0peqIssBqavEYzwWEQEdb3w8gDGv1yvBA0p2sitFgim7ViRI2KbHM9vQTWTO/FOdbDE8Js753WobIzMyohgtq6hmrrQHazvvNwtp8/M+iibQplbmRzdHJlYW0KZW5kb2JqCjIxIDAgb2JqCjw8IC9MZW5ndGggMjQ5IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nE1RSYoDMAy75xX6QCFek7ynQ5lD5//Xyg6FOQQJr5KTlphYCw8xhB8sPfiRIXM3/Rt+otm7WXqSydn/mOciU1H4UqguYkJdiBvPoRHwPaFrElmxvfE5LKOZc74HH4W4BDOhAWN9STK5qOaVIRNODHUcDlqkwrhrYsPiWtE8jdxu+0ZmZSaEDY9kQtwYgIgg6wKyGCyUNjYTMlnOA+0NyQ1aYNepG1GLgiuU1gl0olbEqszgs+bWdjdDLfLgqH3x+mhWl2CF0Uv1WHhfhT6YqZl27pJCeuFNOyLMHgqkMjstK7V7xOpugfo/y1Lw/cn3+B2vD838XJwKZW5kc3RyZWFtCmVuZG9iagoyMiAwIG9iago8PCAvTGVuZ3RoIDk0IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nEWNwRHAIAgE/1RBCQoK2k8mk4f2/40QMnxg5w7uhAULtnlGHwWVJl4VWAdKY9xQj0C94XItydwFD3Anf9rQVJyW03dpkUlVKdykEnn/DmcmkKh50WOd9wtj+yM8CmVuZHN0cmVhbQplbmRvYmoKMjMgMCBvYmoKPDwgL0xlbmd0aCA0NyAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJwzMrdQMFCwNAEShhYmCuZmBgophlyWEFYuF0wsB8wC0ZZwCiKewZUGALlnDScKZW5kc3RyZWFtCmVuZG9iagoyNCAwIG9iago8PCAvTGVuZ3RoIDI1OCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJxFkUtyBCAIRPeegiOA/OQ8k0plMbn/Ng3OZDZ2l6j9hEojphIs5xR5MH3J8s1ktul3OVY7GwUURSiYyVXosQKrO1PEmWuJautjZeS40zsGxRvOXTmpZHGjjHVUdSpwTM+V9VHd+XZZlH1HDmUK2KxzHGzgym3DGCdGm63uDveJIE8nU0fF7SDZ8AcnjX2VqytwnWz20UswDgT9QhOY5ItA6wyBxs1T9OQS7OPjdueBYG95EUjZEMiRIRgdgnadXP/i1vm9/3GGO8+1Ga4c7+J3mNZ2x19ikhVzAYvcKajnay5a1xk63pMzx+Sm+4bOuWCXu4NM7/k/1s/6/gMeKWb6CmVuZHN0cmVhbQplbmRvYmoKMjUgMCBvYmoKPDwgL0xlbmd0aCAyMTggL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicPVC5jQQxDMtdhRpYwHrtqWcWi0um//RI+fYi0RZFUio1mZIpL3WUJVlT3jp8lsQOeYblbmQ2JSpFL5OwJffQCvF9ieYU993VlrNDNJdoOX4LMyqqGx3TSzaacCoTuqDcwzP6DW10A1aHHrFbINCkYNe2IHLHDxgMwZkTiyIMSk0G/65yj59eixs+w/FDFJGSDuY1/1j98nMNr1OPJ5Fub77iXpypDgMRHJKavCNdWLEuEhFpNUFNz8BaLYC7t17+G7QjugxA9onEcZpSjqG/a3Clzy/lJ1PYCmVuZHN0cmVhbQplbmRvYmoKMjYgMCBvYmoKPDwgL0xlbmd0aCA4MyAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJxFjLsNwDAIRHumYAR+JvY+UZTC3r8NECVuuCfdPVwdCZkpbjPDQwaeDCyGXXGB9JYwC1xHUI6d7KNh1b7qBI31plLz7w+Unuys4obrAQJCGmYKZW5kc3RyZWFtCmVuZG9iagoyNyAwIG9iago8PCAvTGVuZ3RoIDIzOSAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJxNUMltBDEM+7sKNTDA6By7HgeLPLL9f0PKCZKXaEviofKUW5bKZfcjOW/JuuVDh06VafJu0M2vsf6jDAJ2/1BUEK0lsUrMXNJusTRJL9nDOI2Xa7WO56l7hFmjePDj2NMpgek9MsFms705MKs9zg6QTrjGr+rTO5UkA4m6kPNCpQrrHtQloo8r25hSnU4t5RiXn+h7fI4APcXejdzRx8sXjEa1LajRapU4DzATU9GVcauRgZQTBkNnR1c0C6XIynpCNcKNOaGZvcNwYAPLs4Skpa1SvA9lAegCXdo64zRKgo4Awt8ojPX6Bqr8XjcKZW5kc3RyZWFtCmVuZG9iagoyOCAwIG9iago8PCAvTGVuZ3RoIDUxIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nDM2tFAwUDA0MAeSRoZAlpGJQoohF0gAxMzlggnmgFkGQBqiOAeuJocrgysNAOG0DZgKZW5kc3RyZWFtCmVuZG9iagoyOSAwIG9iago8PCAvTGVuZ3RoIDE2MCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJxFkDkSAzEIBHO9gidIXIL3rMu1wfr/qQfWR6LpAjQcuhZNynoUaD7psUahutBr6CxKkkTBFpIdUKdjiDsoSExIY5JIth6DI5pYs12YmVQqs1LhtGnFwr/ZWtXIRI1wjfyJ6QZU/E/qXJTwTYOvkjH6GFS8O4OMSfheRdxaMe3+RDCxGfYJb0UmBYSJsanZvs9ghsz3Ctc4x/MNTII36wplbmRzdHJlYW0KZW5kb2JqCjMwIDAgb2JqCjw8IC9MZW5ndGggNzAgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicMzM2UzBQsDACEqamhgrmRpYKKYZcQD6IlcsFE8sBs8wszIEsIwuQlhwuQwtjMG1ibKRgZmIGZFkgMSC6MrjSAJiaEwMKZW5kc3RyZWFtCmVuZG9iagozMSAwIG9iago8PCAvTGVuZ3RoIDMyMCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJw1UktuBTEI288puECl8E/O86qqi777b2sTvRVMMGDjKS9Z0ku+1CXbpcPkWx/3JbFC3o/tmsxSxfcWsxTPLa9HzxG3LQoEURM9WJkvFSLUz/ToOqhwSp+BVwi3FBu8g0kAg2r4Bx6lMyBQ50DGu2IyUgOCJNhzaXEIiXImiX+kvJ7fJ62kofQ9WZnL35NLpdAdTU7oAcXKxUmgXUn5oJmYSkSSl+t9sUL0hsCSPD5HMcmA7DaJbaIFJucepSXMxBQ6sMcCvGaa1VXoYMIehymMVwuzqB5s8lsTlaQdreMZ2TDeyzBTYqHhsAXU5mJlgu7l4zWvwojtUZNdw3Duls13CNFo/hsWyuBjFZKAR6exEg1pOMCIwJ5eOMVe8xM5DsCIY52aLAxjaCaneo6JwNCes6VhxsceWvXzD1TpfIcKZW5kc3RyZWFtCmVuZG9iagozMiAwIG9iago8PCAvTGVuZ3RoIDE4IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nDM2tFAwgMMUQ640AB3mA1IKZW5kc3RyZWFtCmVuZG9iagozMyAwIG9iago8PCAvTGVuZ3RoIDEzMyAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJxFj0sOBCEIRPecoo7Axx/ncTLphXP/7YCdbhNjPYVUgbmCoT0uawOdFR8hGbbxt6mWjkVZPlR6UlYPyeCHrMbLIdygLPCCSSqGIVCLmBqRLWVut4DbNg2yspVTpY6wi6Mwj/a0bBUeX6JbInWSP4PEKi/c47odyKXWu96ii75/pAExCQplbmRzdHJlYW0KZW5kb2JqCjM0IDAgb2JqCjw8IC9MZW5ndGggMzQwIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nDVSOW4EMQzr/Qp9IIBu2+/ZIEiR/L8NqdkUA3F0UpQ7WlR2y4eFVLXsdPm0ldoSN+R3ZYXECcmrEu1ShkiovFYh1e+ZMq+3NWcEyFKlwuSk5HHJgj/DpacLx/m2sa/lyB2PHlgVI6FEwDLFxOgals7usGZbfpZpwI94hJwr1i3HWAVSG9047Yr3oXktsgaIvZmWigodVokWfkHxoEeNffYYVFgg0e0cSXCMiVCRgHaB2kgMOXssdlEf9DMoMRPo2htF3EGBJZKYOcW6dPTf+NCxoP7YjDe/OirpW1pZY9I+G+2Uxiwy6XpY9HTz1seDCzTvovzn1QwSNGWNksYHrdo5hqKZUVZ4t0OTDc0xxyHzDp7DGQlK+jwUv48lEx2UyN8ODaF/Xx6jjJw23gLmoj9tFQcO4rPDXrmBFUoXa5L3AalM6IHp/6/xtb7X1x8d7YDGCmVuZHN0cmVhbQplbmRvYmoKMzUgMCBvYmoKPDwgL0xlbmd0aCAyNTEgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicLVFJcgNBCLvPK/SEZqffY5crh+T/1wjKBwYNi0B0WuKgjJ8gLFe85ZGraMPfMzGC3wWHfivXbVjkQFQgSWNQNaF28Xr0HthxmAnMk9awDGasD/yMKdzoxeExGWe312XUEOxdrz2ZQcmsXMQlExdM1WEjZw4/mTIutHM9NyDnRliXYZBuVhozEo40hUghhaqbpM4EQRKMrkaNNnIU+6Uvj3SGVY2oMexzLW1fz004a9DsWKzy5JQeXXEuJxcvrBz09TYDF1FprPJASMD9bg/1c7KT33hL584W0+N7zcnywlRgxZvXbkA21eLfvIjj+4yv5+f5/ANfYFuICmVuZHN0cmVhbQplbmRvYmoKMzYgMCBvYmoKPDwgL0xlbmd0aCAxNzQgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicTZBJDkMhDEP3nMIXqIQzwOc8v6q6aO+/rUMHdYH85CBwPDzQcSQudGTojI4rmxzjwLMgY+LROP/JuD7EMUHdoi1Yl3bH2cwSc8IyMQK2RsnZPKLAD8dcCBJklx++wCAiXY/5VvNZk/TPtzvdj7q0Zl89osCJ7AjFsAFXgP26x4FLwvle0+SXKiVjE4fygeoiUjY7oRC1VOxyqoqz3ZsrcBX0/NFD7u0FtSM83wplbmRzdHJlYW0KZW5kb2JqCjM3IDAgb2JqCjw8IC9MZW5ndGggNTQgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicMzUwUDBQ0LVU0DUyNlUwNQSyDc1MFVIMueDsXAgTJJ/DBVMJYYGkcxAqc7gyuNIAc1EPjwplbmRzdHJlYW0KZW5kb2JqCjM4IDAgb2JqCjw8IC9MZW5ndGggODkgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicNU25EYAwDOs9hUfAj0i8D8dRhP1b7IQ0lk6fEcoHa+QBguGNLyH4oi8ZhLULDyr7SHTYRA1nFSQTw68s8KqcFW1zJRPZWUyjs0HL9K3tb4Meuj/djhwKCmVuZHN0cmVhbQplbmRvYmoKMzkgMCBvYmoKPDwgL0xlbmd0aCAyMTUgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicNVE5DgMhDOz3Ff5AJIwveE+iKM3+v82M0VYewVyGtJQhmfJSk6gh5VM+epkunLrc18xqNOeWtC1zgLi2vC+tksCJZoiDwWmYuAGaPAFD19GoUUMXHtDUpVMosNwEPoq3bg/dY7WBl7Yh54kgYigZLEHNqUUTFm3PJ6Q1v16LG96X7d3IU6XGlhiBBgFWOBzX6NfwlT1PJtF0FTLUqzXLGAkTRSI8+Y6m1RPrWjTSMhLUxhGsagO8O/0wTgAAE3HLAmSfSpSz5MRvsfSzBlf6/gGfR1SWCmVuZHN0cmVhbQplbmRvYmoKMTUgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL0Jhc2VGb250IC9CTVFRRFYrRGVqYVZ1U2FucyAvRmlyc3RDaGFyIDAgL0xhc3RDaGFyIDI1NQovRm9udERlc2NyaXB0b3IgMTQgMCBSIC9TdWJ0eXBlIC9UeXBlMyAvTmFtZSAvQk1RUURWK0RlamFWdVNhbnMKL0ZvbnRCQm94IFsgLTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvRm9udE1hdHJpeCBbIDAuMDAxIDAgMCAwLjAwMSAwIDAgXQovQ2hhclByb2NzIDE2IDAgUgovRW5jb2RpbmcgPDwgL1R5cGUgL0VuY29kaW5nCi9EaWZmZXJlbmNlcyBbIDMyIC9zcGFjZSA0NiAvcGVyaW9kIDQ4IC96ZXJvIC9vbmUgL3R3byAvdGhyZWUgL2ZvdXIgL2ZpdmUgL3NpeCAvc2V2ZW4KL2VpZ2h0IDU4IC9jb2xvbiA5NSAvdW5kZXJzY29yZSA5OCAvYiAxMDAgL2QgMTA4IC9sIC9tIDExMSAvbyAvcCAxMTQgL3IgMTE2Ci90IC91IDEyMCAveCBdCj4+Ci9XaWR0aHMgMTMgMCBSID4+CmVuZG9iagoxNCAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0ZvbnROYW1lIC9CTVFRRFYrRGVqYVZ1U2FucyAvRmxhZ3MgMzIKL0ZvbnRCQm94IFsgLTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvQXNjZW50IDkyOSAvRGVzY2VudCAtMjM2IC9DYXBIZWlnaHQgMAovWEhlaWdodCAwIC9JdGFsaWNBbmdsZSAwIC9TdGVtViAwIC9NYXhXaWR0aCAxMzQyID4+CmVuZG9iagoxMyAwIG9iagpbIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwCjYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgMzE4IDQwMSA0NjAgODM4IDYzNgo5NTAgNzgwIDI3NSAzOTAgMzkwIDUwMCA4MzggMzE4IDM2MSAzMTggMzM3IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYKNjM2IDYzNiAzMzcgMzM3IDgzOCA4MzggODM4IDUzMSAxMDAwIDY4NCA2ODYgNjk4IDc3MCA2MzIgNTc1IDc3NSA3NTIgMjk1CjI5NSA2NTYgNTU3IDg2MyA3NDggNzg3IDYwMyA3ODcgNjk1IDYzNSA2MTEgNzMyIDY4NCA5ODkgNjg1IDYxMSA2ODUgMzkwIDMzNwozOTAgODM4IDUwMCA1MDAgNjEzIDYzNSA1NTAgNjM1IDYxNSAzNTIgNjM1IDYzNCAyNzggMjc4IDU3OSAyNzggOTc0IDYzNCA2MTIKNjM1IDYzNSA0MTEgNTIxIDM5MiA2MzQgNTkyIDgxOCA1OTIgNTkyIDUyNSA2MzYgMzM3IDYzNiA4MzggNjAwIDYzNiA2MDAgMzE4CjM1MiA1MTggMTAwMCA1MDAgNTAwIDUwMCAxMzQyIDYzNSA0MDAgMTA3MCA2MDAgNjg1IDYwMCA2MDAgMzE4IDMxOCA1MTggNTE4CjU5MCA1MDAgMTAwMCA1MDAgMTAwMCA1MjEgNDAwIDEwMjMgNjAwIDUyNSA2MTEgMzE4IDQwMSA2MzYgNjM2IDYzNiA2MzYgMzM3CjUwMCA1MDAgMTAwMCA0NzEgNjEyIDgzOCAzNjEgMTAwMCA1MDAgNTAwIDgzOCA0MDEgNDAxIDUwMCA2MzYgNjM2IDMxOCA1MDAKNDAxIDQ3MSA2MTIgOTY5IDk2OSA5NjkgNTMxIDY4NCA2ODQgNjg0IDY4NCA2ODQgNjg0IDk3NCA2OTggNjMyIDYzMiA2MzIgNjMyCjI5NSAyOTUgMjk1IDI5NSA3NzUgNzQ4IDc4NyA3ODcgNzg3IDc4NyA3ODcgODM4IDc4NyA3MzIgNzMyIDczMiA3MzIgNjExIDYwNQo2MzAgNjEzIDYxMyA2MTMgNjEzIDYxMyA2MTMgOTgyIDU1MCA2MTUgNjE1IDYxNSA2MTUgMjc4IDI3OCAyNzggMjc4IDYxMiA2MzQKNjEyIDYxMiA2MTIgNjEyIDYxMiA4MzggNjEyIDYzNCA2MzQgNjM0IDYzNCA1OTIgNjM1IDU5MiBdCmVuZG9iagoxNiAwIG9iago8PCAvYiAxNyAwIFIgL2NvbG9uIDE4IDAgUiAvZCAxOSAwIFIgL2VpZ2h0IDIwIDAgUiAvZml2ZSAyMSAwIFIKL2ZvdXIgMjIgMCBSIC9sIDIzIDAgUiAvbSAyNCAwIFIgL28gMjUgMCBSIC9vbmUgMjYgMCBSIC9wIDI3IDAgUgovcGVyaW9kIDI4IDAgUiAvciAyOSAwIFIgL3NldmVuIDMwIDAgUiAvc2l4IDMxIDAgUiAvc3BhY2UgMzIgMCBSIC90IDMzIDAgUgovdGhyZWUgMzQgMCBSIC90d28gMzUgMCBSIC91IDM2IDAgUiAvdW5kZXJzY29yZSAzNyAwIFIgL3ggMzggMCBSCi96ZXJvIDM5IDAgUiA+PgplbmRvYmoKMyAwIG9iago8PCAvRjEgMTUgMCBSID4+CmVuZG9iago0IDAgb2JqCjw8IC9BMSA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAwIC9jYSAxID4+Ci9BMiA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAxIC9jYSAxID4+Ci9BMyA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAwLjUgL2NhIDAuNSA+PgovQTQgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMSAvY2EgMC45ID4+ID4+CmVuZG9iago1IDAgb2JqCjw8ID4+CmVuZG9iago2IDAgb2JqCjw8ID4+CmVuZG9iago3IDAgb2JqCjw8ID4+CmVuZG9iagoyIDAgb2JqCjw8IC9UeXBlIC9QYWdlcyAvS2lkcyBbIDExIDAgUiBdIC9Db3VudCAxID4+CmVuZG9iago0MCAwIG9iago8PCAvQ3JlYXRvciAoTWF0cGxvdGxpYiB2My45LjIsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcpCi9Qcm9kdWNlciAoTWF0cGxvdGxpYiBwZGYgYmFja2VuZCB2My45LjIpCi9DcmVhdGlvbkRhdGUgKEQ6MjAyNDExMDUyMjI4MTcrMDInMDAnKSA+PgplbmRvYmoKeHJlZgowIDQxCjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAxNiAwMDAwMCBuIAowMDAwMDQ0NTg4IDAwMDAwIG4gCjAwMDAwNDQzMTAgMDAwMDAgbiAKMDAwMDA0NDM0MiAwMDAwMCBuIAowMDAwMDQ0NTI1IDAwMDAwIG4gCjAwMDAwNDQ1NDYgMDAwMDAgbiAKMDAwMDA0NDU2NyAwMDAwMCBuIAowMDAwMDAwMDY1IDAwMDAwIG4gCjAwMDAwMDAzNDggMDAwMDAgbiAKMDAwMDAzNjU4NiAwMDAwMCBuIAowMDAwMDAwMjA4IDAwMDAwIG4gCjAwMDAwMzY1NjQgMDAwMDAgbiAKMDAwMDA0Mjk1NiAwMDAwMCBuIAowMDAwMDQyNzQ5IDAwMDAwIG4gCjAwMDAwNDIyODIgMDAwMDAgbiAKMDAwMDA0NDAwOSAwMDAwMCBuIAowMDAwMDM2NjA2IDAwMDAwIG4gCjAwMDAwMzY5MjMgMDAwMDAgbiAKMDAwMDAzNzA2OCAwMDAwMCBuIAowMDAwMDM3MzcyIDAwMDAwIG4gCjAwMDAwMzc4NDAgMDAwMDAgbiAKMDAwMDAzODE2MiAwMDAwMCBuIAowMDAwMDM4MzI4IDAwMDAwIG4gCjAwMDAwMzg0NDcgMDAwMDAgbiAKMDAwMDAzODc3OCAwMDAwMCBuIAowMDAwMDM5MDY5IDAwMDAwIG4gCjAwMDAwMzkyMjQgMDAwMDAgbiAKMDAwMDAzOTUzNiAwMDAwMCBuIAowMDAwMDM5NjU5IDAwMDAwIG4gCjAwMDAwMzk4OTIgMDAwMDAgbiAKMDAwMDA0MDAzNCAwMDAwMCBuIAowMDAwMDQwNDI3IDAwMDAwIG4gCjAwMDAwNDA1MTcgMDAwMDAgbiAKMDAwMDA0MDcyMyAwMDAwMCBuIAowMDAwMDQxMTM2IDAwMDAwIG4gCjAwMDAwNDE0NjAgMDAwMDAgbiAKMDAwMDA0MTcwNyAwMDAwMCBuIAowMDAwMDQxODMzIDAwMDAwIG4gCjAwMDAwNDE5OTQgMDAwMDAgbiAKMDAwMDA0NDY0OCAwMDAwMCBuIAp0cmFpbGVyCjw8IC9TaXplIDQxIC9Sb290IDEgMCBSIC9JbmZvIDQwIDAgUiA+PgpzdGFydHhyZWYKNDQ4MDUKJSVFT0YK",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_important_hyperparameter_contour(max_imp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcc69d40",
   "metadata": {},
   "source": [
    "### Get the Tuned Architecture {#sec-get-spot-results-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "093579e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'act_fn': ELU(),\n",
      " 'batch_norm': False,\n",
      " 'batch_size': 16,\n",
      " 'dropout_prob': 0.016713658230795965,\n",
      " 'epochs': 8,\n",
      " 'initialization': 'kaiming_uniform',\n",
      " 'l1': 8,\n",
      " 'lr_mult': 8.673638312631597,\n",
      " 'optimizer': 'Adadelta',\n",
      " 'patience': 8}\n"
     ]
    }
   ],
   "source": [
    "import pprint\n",
    "from spotpython.hyperparameters.values import get_tuned_architecture\n",
    "config = get_tuned_architecture(spot_tuner, fun_control)\n",
    "pprint.pprint(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9cb1418",
   "metadata": {},
   "source": [
    "### Test on the full data set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1f9e500e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# set the value of the key \"TENSORBOARD_CLEAN\" to True in the fun_control dictionary and use the update() method to update the fun_control dictionary\n",
    "fun_control.update({\"TENSORBOARD_CLEAN\": True})\n",
    "fun_control.update({\"tensorboard_log\": True})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "feeace5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Restoring states from the checkpoint path at /Users/bartz/workspace/Hyperparameter-Tuning-Cookbook/runs/saved_models/8_8_16_ELU_Adadelta_0.0167_8.6736_8_False_kaiming_uniform_TEST/last-v1.ckpt\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loaded model weights from the checkpoint at /Users/bartz/workspace/Hyperparameter-Tuning-Cookbook/runs/saved_models/8_8_16_ELU_Adadelta_0.0167_8.6736_8_False_kaiming_uniform_TEST/last-v1.ckpt\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\">        Test metric        </span>┃<span style=\"font-weight: bold\">       DataLoader 0        </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">         hp_metric         </span>│<span style=\"color: #800080; text-decoration-color: #800080\">            nan            </span>│\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">         val_loss          </span>│<span style=\"color: #800080; text-decoration-color: #800080\">            nan            </span>│\n",
       "└───────────────────────────┴───────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1m       Test metric       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      DataLoader 0       \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36m        hp_metric        \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m           nan           \u001b[0m\u001b[35m \u001b[0m│\n",
       "│\u001b[36m \u001b[0m\u001b[36m        val_loss         \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m           nan           \u001b[0m\u001b[35m \u001b[0m│\n",
       "└───────────────────────────┴───────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_model result: {'val_loss': nan, 'hp_metric': nan}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['age',\n",
       " 'sex',\n",
       " 'bmi',\n",
       " 'bp',\n",
       " 's1_tc',\n",
       " 's2_ldl',\n",
       " 's3_hdl',\n",
       " 's4_tch',\n",
       " 's5_ltg',\n",
       " 's6_glu']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.light.testmodel import test_model\n",
    "from spotpython.utils.init import get_feature_names\n",
    "\n",
    "test_model(config, fun_control)\n",
    "get_feature_names(fun_control)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfd727a9",
   "metadata": {},
   "source": [
    "## Cross Validation With Lightning\n",
    "\n",
    "* The `KFold` class from `sklearn.model_selection` is used to generate the folds for cross-validation.\n",
    "* These mechanism is used to generate the folds for the final evaluation of the model.\n",
    "* The `CrossValidationDataModule` class [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/data/lightcrossvalidationdatamodule.py) is used to generate the folds for the hyperparameter tuning process.\n",
    "* It is called from the `cv_model` function [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/light/cvmodel.py).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "57605a8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'l1': 8,\n",
       " 'epochs': 8,\n",
       " 'batch_size': 16,\n",
       " 'act_fn': ELU(),\n",
       " 'optimizer': 'Adadelta',\n",
       " 'dropout_prob': 0.016713658230795965,\n",
       " 'lr_mult': 8.673638312631597,\n",
       " 'patience': 8,\n",
       " 'batch_norm': False,\n",
       " 'initialization': 'kaiming_uniform'}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "137512f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k: 0\n",
      "Train Dataset Size: 221\n",
      "Val Dataset Size: 221\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 29116.642578125, 'hp_metric': 29116.642578125}\n",
      "k: 1\n",
      "Train Dataset Size: 221\n",
      "Val Dataset Size: 221\n",
      "train_model result: {'val_loss': nan, 'hp_metric': nan}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "nan"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.light.cvmodel import cv_model\n",
    "fun_control.update({\"k_folds\": 2})\n",
    "fun_control.update({\"test_size\": 0.6})\n",
    "cv_model(config, fun_control)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cec87a36",
   "metadata": {},
   "source": [
    "## Extending the Basic Setup\n",
    "\n",
    "This basic setup can be adapted to user-specific needs in many ways. For example, the user can specify a custom data set, a custom model, or a custom loss function.\n",
    "The following sections provide more details on how to customize the hyperparameter tuning process.\n",
    "Before we proceed, we will provide an overview of the basic settings of the hyperparameter tuning process and explain the parameters used so far.\n",
    "\n",
    "### General Experiment Setup {#sec-general-experiment-setup-601}\n",
    "\n",
    "To keep track of the different experiments, we use a `PREFIX` for the experiment name. The `PREFIX` is used to create a unique experiment name. The `PREFIX` is also used to create a unique TensorBoard folder, which is used to store the TensorBoard log files.\n",
    "\n",
    "`spotpython` allows the specification of two different types of stopping criteria: first, the number of function evaluations (`fun_evals`), and second, the maximum run time in seconds (`max_time`). Here, we will set the number of function evaluations to infinity and the maximum run time to one minute.\n",
    "\n",
    "`max_time` is set to one minute for demonstration purposes. For real experiments, this value should be increased.\n",
    "Note,  the total run time may exceed the specified `max_time`, because the initial design is always evaluated, even if this takes longer than `max_time`.\n",
    "\n",
    "\n",
    "### Data Setup {#sec-data-601}\n",
    "\n",
    "Here, we have provided the `Diabetes` data set class, which is a subclass of `torch.utils.data.Dataset`. \n",
    "Data preprocessing is handled by `Lightning` and `PyTorch`. It is described in the [LIGHTNINGDATAMODULE](https://lightning.ai/docs/pytorch/stable/data/datamodule.html) documentation. \n",
    "\n",
    "The data splitting, i.e., the generation of training, validation, and testing data, is handled by `Lightning`.\n",
    "\n",
    "\n",
    "### Objective Function `fun` {#sec-the-objective-function-601}\n",
    "\n",
    "The objective function `fun` from the class `HyperLight` [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/fun/hyperlight.py) is selected next. It implements an interface from `PyTorch`'s training, validation, and testing methods to `spotpython`.\n",
    "\n",
    "### Core-Model Setup\n",
    "\n",
    "By using `core_model_name = \"light.regression.NNLinearRegressor\"`, the `spotpython` model class `NetLightRegression` [[SOURCE]](https://sequential-parameter-optimization.github.io/spotpython/reference/spotpython/light/regression/netlightregression/) from the `light.regression` module is selected.\n",
    "\n",
    "### Hyperdict Setup\n",
    "\n",
    "For a given `core_model_name`, the corresponding hyperparameters are automatically loaded from the associated dictionary, which is stored as a JSON file. The JSON file contains hyperparameter type information, names, and bounds. For `spotpython` models, the hyperparameters are stored in the `LightHyperDict`, see [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/hyperdict/light_hyper_dict.json)\n",
    "Alternatively, you can load a local hyper_dict.\n",
    "The `hyperdict`  uses the default hyperparameter settings. These can be modified as described in @sec-modifying-hyperparameter-levels.\n",
    "\n",
    "### Other Settings {#sec-other-settings-601}\n",
    "\n",
    "There are several additional parameters that can be specified, e.g., since we did not specify a loss function, `mean_squared_error` is used, which is the default loss function. These will be explained in more detail in the following sections.\n",
    "\n",
    "\n",
    "## Tensorboard {#sec-tensorboard-601}\n",
    "\n",
    "The textual output shown in the console (or code cell) can be visualized with Tensorboard, if the argument `tensorboard_log` to `fun_control_init()` is set to `True`. The Tensorboard log files are stored in the `runs` folder. To start Tensorboard, run the following command in the terminal:\n",
    "\n",
    "\n",
    "\n",
    "```{raw}\n",
    "tensorboard --logdir=\"runs/\"\n",
    "```\n",
    "\n",
    "\n",
    "Further information can be found in the [PyTorch Lightning documentation](https://lightning.ai/docs/pytorch/stable/api/lightning.pytorch.loggers.tensorboard.html) for Tensorboard.\n",
    "\n",
    "## Loading the Saved Experiment and Getting the Hyperparameters of the Tuned Model\n",
    "\n",
    "To get the tuned hyperparameters as a dictionary, the `get_experiment_from_PREFIX` function can be used.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cdf89eaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded experiment from spot_601_experiment.pickle\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'l1': 8,\n",
       " 'epochs': 8,\n",
       " 'batch_size': 16,\n",
       " 'act_fn': ELU(),\n",
       " 'optimizer': 'Adadelta',\n",
       " 'dropout_prob': 0.016713658230795965,\n",
       " 'lr_mult': 8.673638312631597,\n",
       " 'patience': 8,\n",
       " 'batch_norm': False,\n",
       " 'initialization': 'kaiming_uniform'}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.utils.file import get_experiment_from_PREFIX\n",
    "config = get_experiment_from_PREFIX(\"601\")[\"config\"]\n",
    "config"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16fe9fa1",
   "metadata": {},
   "source": [
    "## Using the `spotgui`\n",
    "\n",
    "The `spotgui` [[github]](https://github.com/sequential-parameter-optimization/spotGUI) provides a convenient way to interact with the hyperparameter tuning process.\n",
    "To obtain the settings from @sec-basic-setup-601, the `spotgui` can be started as shown in @fig-spotgui.\n",
    "\n",
    "![spotgui](./figures_static/024_gui.png){width=100% #fig-spotgui}\n",
    "\n",
    "## Summary\n",
    "\n",
    "This section presented an introduction to the basic setup of hyperparameter tuning with `spotpython` and `PyTorch` Lightning.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/bartz/miniforge3/envs/spot312/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
