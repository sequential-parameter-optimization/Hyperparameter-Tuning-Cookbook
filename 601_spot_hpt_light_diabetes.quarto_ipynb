{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e3ccf4af",
   "metadata": {},
   "source": [
    "---\n",
    "execute:\n",
    "  cache: false\n",
    "  eval: true\n",
    "  echo: true\n",
    "  warning: false\n",
    "jupyter: python3\n",
    "---\n",
    "\n",
    "\n",
    "# Hyperparameter Tuning with `spotpython` and `PyTorch` Lightning for the Diabetes Data Set {#sec-hpt-pytorch}\n",
    "\n",
    "In this section, we will show how `spotpython` can be integrated into the `PyTorch` Lightning\n",
    "training workflow for a regression task.\n",
    "It demonstrates how easy it is to use `spotpython` to tune hyperparameters for a `PyTorch` Lightning model.\n",
    "\n",
    "## The Basic Setting {#sec-basic-setup-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "imports",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_imports\n",
    "import os\n",
    "from math import inf\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a358d8c",
   "metadata": {},
   "source": [
    "After importing the necessary libraries, the `fun_control` dictionary is set up via the `fun_control_init` function.\n",
    "The `fun_control` dictionary contains\n",
    "\n",
    "* `PREFIX`: a unique identifier for the experiment\n",
    "* `fun_evals`: the number of function evaluations\n",
    "* `max_time`: the maximum run time in minutes\n",
    "* `data_set`: the data set. Here we use the `Diabetes` data set that is provided by `spotpython`.\n",
    "* `core_model_name`: the class name of the neural network model. This neural network model is provided by `spotpython`.\n",
    "* `hyperdict`: the hyperparameter dictionary. This dictionary is used to define the hyperparameters of the neural network model. It is also provided by `spotpython`.\n",
    "* `_L_in`: the number of input features. Since the `Diabetes` data set has 10 features, `_L_in` is set to 10.\n",
    "* `_L_out`: the number of output features. Since we want to predict a single value, `_L_out` is set to 1.\n",
    "\n",
    "The `HyperLight` class is used to define the objective function `fun`.\n",
    "It connects the `PyTorch` and the `spotpython` methods and is provided by `spotpython`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "spotpython_setup",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module_name: light\n",
      "submodule_name: regression\n",
      "model_name: NNLinearRegressor\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_spotpython_setup\n",
    "\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "from spotpython.hyperdict.light_hyper_dict import LightHyperDict\n",
    "from spotpython.fun.hyperlight import HyperLight\n",
    "from spotpython.utils.init import (fun_control_init, surrogate_control_init, design_control_init)\n",
    "from spotpython.utils.eda import gen_design_table\n",
    "from spotpython.spot import spot\n",
    "from spotpython.utils.file import get_experiment_filename\n",
    "\n",
    "PREFIX=\"601\"\n",
    "\n",
    "data_set = Diabetes()\n",
    "\n",
    "fun_control = fun_control_init(\n",
    "    PREFIX=PREFIX,\n",
    "    save_experiment=True,\n",
    "    fun_evals=inf,\n",
    "    max_time=1,\n",
    "    data_set = data_set,\n",
    "    core_model_name=\"light.regression.NNLinearRegressor\",\n",
    "    hyperdict=LightHyperDict,\n",
    "    _L_in=10,\n",
    "    _L_out=1)\n",
    "\n",
    "fun = HyperLight().fun"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ea80c3d",
   "metadata": {},
   "source": [
    "The method `set_hyperparameter` allows the user to modify default hyperparameter settings.\n",
    "Here we modify some hyperparameters to keep the model small and to decrease the tuning time.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a65b41cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | transform             |\n",
      "|----------------|--------|-----------|---------|---------|-----------------------|\n",
      "| l1             | int    | 3         |     3   |   4     | transform_power_2_int |\n",
      "| epochs         | int    | 4         |     3   |   7     | transform_power_2_int |\n",
      "| batch_size     | int    | 4         |     4   |  11     | transform_power_2_int |\n",
      "| act_fn         | factor | ReLU      |     0   |   5     | None                  |\n",
      "| optimizer      | factor | SGD       |     0   |   2     | None                  |\n",
      "| dropout_prob   | float  | 0.01      |     0   |   0.025 | None                  |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |  10     | None                  |\n",
      "| patience       | int    | 2         |     2   |   3     | transform_power_2_int |\n",
      "| batch_norm     | factor | 0         |     0   |   1     | None                  |\n",
      "| initialization | factor | Default   |     0   |   4     | None                  |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.hyperparameters.values import set_hyperparameter\n",
    "set_hyperparameter(fun_control, \"optimizer\", [ \"Adadelta\", \"Adam\", \"Adamax\"])\n",
    "set_hyperparameter(fun_control, \"l1\", [3,4])\n",
    "set_hyperparameter(fun_control, \"epochs\", [3,7])\n",
    "set_hyperparameter(fun_control, \"batch_size\", [4,11])\n",
    "set_hyperparameter(fun_control, \"dropout_prob\", [0.0, 0.025])\n",
    "set_hyperparameter(fun_control, \"patience\", [2,3])\n",
    "\n",
    "design_control = design_control_init(init_size=10)\n",
    "\n",
    "print(gen_design_table(fun_control))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dceba502",
   "metadata": {},
   "source": [
    "Finally, a `Spot` object is created.\n",
    "Calling the method `run()` starts the hyperparameter tuning process.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "run",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23995.974609375, 'hp_metric': 23995.974609375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [256, 10] | [256, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23983.41015625, 'hp_metric': 23983.41015625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23741.552734375, 'hp_metric': 23741.552734375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24071.35546875, 'hp_metric': 24071.35546875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23948.748046875, 'hp_metric': 23948.748046875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24022.400390625, 'hp_metric': 24022.400390625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24036.333984375, 'hp_metric': 24036.333984375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23058.591796875, 'hp_metric': 23058.591796875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [1024, 10] | [1024, 1]\n",
      "-----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23857.533203125, 'hp_metric': 23857.533203125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23734.53125, 'hp_metric': 23734.53125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 6335.7216796875, 'hp_metric': 6335.7216796875}\n",
      "spotpython tuning: 6335.7216796875 [#---------] 5.26% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 7812.763671875, 'hp_metric': 7812.763671875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6335.7216796875 [#---------] 11.84% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23424.34375, 'hp_metric': 23424.34375}\n",
      "spotpython tuning: 6335.7216796875 [##--------] 15.92% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24067.88671875, 'hp_metric': 24067.88671875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6335.7216796875 [##--------] 19.07% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23550.724609375, 'hp_metric': 23550.724609375}\n",
      "spotpython tuning: 6335.7216796875 [####------] 37.30% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [256, 10] | [256, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24066.865234375, 'hp_metric': 24066.865234375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6335.7216796875 [####------] 40.54% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24170.91015625, 'hp_metric': 24170.91015625}\n",
      "spotpython tuning: 6335.7216796875 [####------] 42.95% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23315.263671875, 'hp_metric': 23315.263671875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6335.7216796875 [#####-----] 52.78% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24067.201171875, 'hp_metric': 24067.201171875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6335.7216796875 [######----] 57.38% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3219.52978515625, 'hp_metric': 3219.52978515625}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3219.52978515625 [##########] 95.37% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 20688.962890625, 'hp_metric': 20688.962890625}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3219.52978515625 [##########] 100.00% Done...\r\n",
      "\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Experiment saved to spot_601_experiment.pickle\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_run\n",
    "spot_tuner = spot.Spot(fun=fun,fun_control=fun_control, design_control=design_control)\n",
    "res = spot_tuner.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "409e534d",
   "metadata": {},
   "source": [
    "## Looking at the Results\n",
    "\n",
    "### Tuning Progress\n",
    "\n",
    "After the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized with `spotpython`'s method `plot_progress`. The black points represent the performace values (score or metric) of  hyperparameter configurations from the initial design, whereas the red points represents the  hyperparameter configurations found by the surrogate model based optimization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "plot_progress_1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 2700x1800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| label: 601_plot_progress_1\n",
    "spot_tuner.plot_progress()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4eb55403",
   "metadata": {},
   "source": [
    "### Tuned Hyperparameters and Their Importance\n",
    "\n",
    "Results can be printed in tabular form.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f2fd3d27",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | tuned                 | transform             |   importance | stars   |\n",
      "|----------------|--------|-----------|---------|---------|-----------------------|-----------------------|--------------|---------|\n",
      "| l1             | int    | 3         |     3.0 |     4.0 | 3.0                   | transform_power_2_int |         0.00 |         |\n",
      "| epochs         | int    | 4         |     3.0 |     7.0 | 7.0                   | transform_power_2_int |         0.00 |         |\n",
      "| batch_size     | int    | 4         |     4.0 |    11.0 | 5.0                   | transform_power_2_int |         0.00 |         |\n",
      "| act_fn         | factor | ReLU      |     0.0 |     5.0 | Swish                 | None                  |         0.00 |         |\n",
      "| optimizer      | factor | SGD       |     0.0 |     2.0 | Adadelta              | None                  |         0.00 |         |\n",
      "| dropout_prob   | float  | 0.01      |     0.0 |   0.025 | 7.235526135247649e-06 | None                  |         0.00 |         |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |    10.0 | 2.126547240830241     | None                  |         0.00 |         |\n",
      "| patience       | int    | 2         |     2.0 |     3.0 | 2.0                   | transform_power_2_int |         0.00 |         |\n",
      "| batch_norm     | factor | 0         |     0.0 |     1.0 | 0                     | None                  |       100.00 | ***     |\n",
      "| initialization | factor | Default   |     0.0 |     4.0 | xavier_normal         | None                  |         0.00 |         |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.utils.eda import gen_design_table\n",
    "print(gen_design_table(fun_control=fun_control, spot=spot_tuner))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2e21a4d",
   "metadata": {},
   "source": [
    "A histogram can be used to visualize the most important hyperparameters.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0857aa8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "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ZUZvbnQgL0JNUVFEVitEZWphVnVTYW5zIC9GaXJzdENoYXIgMCAvTGFzdENoYXIgMjU1Ci9Gb250RGVzY3JpcHRvciAxNCAwIFIgL1N1YnR5cGUgL1R5cGUzIC9OYW1lIC9CTVFRRFYrRGVqYVZ1U2FucwovRm9udEJCb3ggWyAtMTAyMSAtNDYzIDE3OTQgMTIzMyBdIC9Gb250TWF0cml4IFsgMC4wMDEgMCAwIDAuMDAxIDAgMCBdCi9DaGFyUHJvY3MgMTYgMCBSCi9FbmNvZGluZyA8PCAvVHlwZSAvRW5jb2RpbmcKL0RpZmZlcmVuY2VzIFsgNDggL3plcm8gL29uZSAvdHdvIDUyIC9mb3VyIDU0IC9zaXggNTYgL2VpZ2h0IDk1IC91bmRlcnNjb3JlIDk3IC9hIC9iIC9jCjEwNCAvaCAxMDkgL20gL24gL28gMTE0IC9yIDExNiAvdCBdCj4+Ci9XaWR0aHMgMTMgMCBSID4+CmVuZG9iagoxNCAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0ZvbnROYW1lIC9CTVFRRFYrRGVqYVZ1U2FucyAvRmxhZ3MgMzIKL0ZvbnRCQm94IFsgLTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvQXNjZW50IDkyOSAvRGVzY2VudCAtMjM2IC9DYXBIZWlnaHQgMAovWEhlaWdodCAwIC9JdGFsaWNBbmdsZSAwIC9TdGVtViAwIC9NYXhXaWR0aCAxMzQyID4+CmVuZG9iagoxMyAwIG9iagpbIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwCjYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgMzE4IDQwMSA0NjAgODM4IDYzNgo5NTAgNzgwIDI3NSAzOTAgMzkwIDUwMCA4MzggMzE4IDM2MSAzMTggMzM3IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYKNjM2IDYzNiAzMzcgMzM3IDgzOCA4MzggODM4IDUzMSAxMDAwIDY4NCA2ODYgNjk4IDc3MCA2MzIgNTc1IDc3NSA3NTIgMjk1CjI5NSA2NTYgNTU3IDg2MyA3NDggNzg3IDYwMyA3ODcgNjk1IDYzNSA2MTEgNzMyIDY4NCA5ODkgNjg1IDYxMSA2ODUgMzkwIDMzNwozOTAgODM4IDUwMCA1MDAgNjEzIDYzNSA1NTAgNjM1IDYxNSAzNTIgNjM1IDYzNCAyNzggMjc4IDU3OSAyNzggOTc0IDYzNCA2MTIKNjM1IDYzNSA0MTEgNTIxIDM5MiA2MzQgNTkyIDgxOCA1OTIgNTkyIDUyNSA2MzYgMzM3IDYzNiA4MzggNjAwIDYzNiA2MDAgMzE4CjM1MiA1MTggMTAwMCA1MDAgNTAwIDUwMCAxMzQyIDYzNSA0MDAgMTA3MCA2MDAgNjg1IDYwMCA2MDAgMzE4IDMxOCA1MTggNTE4CjU5MCA1MDAgMTAwMCA1MDAgMTAwMCA1MjEgNDAwIDEwMjMgNjAwIDUyNSA2MTEgMzE4IDQwMSA2MzYgNjM2IDYzNiA2MzYgMzM3CjUwMCA1MDAgMTAwMCA0NzEgNjEyIDgzOCAzNjEgMTAwMCA1MDAgNTAwIDgzOCA0MDEgNDAxIDUwMCA2MzYgNjM2IDMxOCA1MDAKNDAxIDQ3MSA2MTIgOTY5IDk2OSA5NjkgNTMxIDY4NCA2ODQgNjg0IDY4NCA2ODQgNjg0IDk3NCA2OTggNjMyIDYzMiA2MzIgNjMyCjI5NSAyOTUgMjk1IDI5NSA3NzUgNzQ4IDc4NyA3ODcgNzg3IDc4NyA3ODcgODM4IDc4NyA3MzIgNzMyIDczMiA3MzIgNjExIDYwNQo2MzAgNjEzIDYxMyA2MTMgNjEzIDYxMyA2MTMgOTgyIDU1MCA2MTUgNjE1IDYxNSA2MTUgMjc4IDI3OCAyNzggMjc4IDYxMiA2MzQKNjEyIDYxMiA2MTIgNjEyIDYxMiA4MzggNjEyIDYzNCA2MzQgNjM0IDYzNCA1OTIgNjM1IDU5MiBdCmVuZG9iagoxNiAwIG9iago8PCAvYSAxNyAwIFIgL2IgMTggMCBSIC9jIDE5IDAgUiAvZWlnaHQgMjAgMCBSIC9mb3VyIDIxIDAgUiAvaCAyMiAwIFIKL20gMjMgMCBSIC9uIDI0IDAgUiAvbyAyNSAwIFIgL29uZSAyNiAwIFIgL3IgMjcgMCBSIC9zaXggMjggMCBSIC90IDI5IDAgUgovdHdvIDMwIDAgUiAvdW5kZXJzY29yZSAzMSAwIFIgL3plcm8gMzIgMCBSID4+CmVuZG9iagozIDAgb2JqCjw8IC9GMSAxNSAwIFIgPj4KZW5kb2JqCjQgMCBvYmoKPDwgL0ExIDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDAgL2NhIDEgPj4KL0EyIDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDEgL2NhIDEgPj4gPj4KZW5kb2JqCjUgMCBvYmoKPDwgPj4KZW5kb2JqCjYgMCBvYmoKPDwgPj4KZW5kb2JqCjcgMCBvYmoKPDwgPj4KZW5kb2JqCjIgMCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9LaWRzIFsgMTEgMCBSIF0gL0NvdW50IDEgPj4KZW5kb2JqCjMzIDAgb2JqCjw8IC9DcmVhdG9yIChNYXRwbG90bGliIHYzLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZykKL1Byb2R1Y2VyIChNYXRwbG90bGliIHBkZiBiYWNrZW5kIHYzLjkuMikKL0NyZWF0aW9uRGF0ZSAoRDoyMDI0MTExNzEwMTcyMSswMicwMCcpID4+CmVuZG9iagp4cmVmCjAgMzQKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDE2IDAwMDAwIG4gCjAwMDAwMDc0NDcgMDAwMDAgbiAKMDAwMDAwNzI1MyAwMDAwMCBuIAowMDAwMDA3Mjg1IDAwMDAwIG4gCjAwMDAwMDczODQgMDAwMDAgbiAKMDAwMDAwNzQwNSAwMDAwMCBuIAowMDAwMDA3NDI2IDAwMDAwIG4gCjAwMDAwMDAwNjUgMDAwMDAgbiAKMDAwMDAwMDM0NCAwMDAwMCBuIAowMDAwMDAwODk2IDAwMDAwIG4gCjAwMDAwMDAyMDggMDAwMDAgbiAKMDAwMDAwMDg3NiAwMDAwMCBuIAowMDAwMDA1OTkzIDAwMDAwIG4gCjAwMDAwMDU3ODYgMDAwMDAgbiAKMDAwMDAwNTM3MiAwMDAwMCBuIAowMDAwMDA3MDQ2IDAwMDAwIG4gCjAwMDAwMDA5MTYgMDAwMDAgbiAKMDAwMDAwMTI5NiAwMDAwMCBuIAowMDAwMDAxNjEzIDAwMDAwIG4gCjAwMDAwMDE5MTggMDAwMDAgbiAKMDAwMDAwMjM4NiAwMDAwMCBuIAowMDAwMDAyNTUyIDAwMDAwIG4gCjAwMDAwMDI3ODkgMDAwMDAgbiAKMDAwMDAwMzEyMCAwMDAwMCBuIAowMDAwMDAzMzU2IDAwMDAwIG4gCjAwMDAwMDM2NDcgMDAwMDAgbiAKMDAwMDAwMzgwMiAwMDAwMCBuIAowMDAwMDA0MDM1IDAwMDAwIG4gCjAwMDAwMDQ0MjggMDAwMDAgbiAKMDAwMDAwNDYzNCAwMDAwMCBuIAowMDAwMDA0OTU4IDAwMDAwIG4gCjAwMDAwMDUwODQgMDAwMDAgbiAKMDAwMDAwNzUwNyAwMDAwMCBuIAp0cmFpbGVyCjw8IC9TaXplIDM0IC9Sb290IDEgMCBSIC9JbmZvIDMzIDAgUiA+PgpzdGFydHhyZWYKNzY2NAolJUVPRgo=",
      "text/plain": [
       "<Figure size 1650x1050 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_importance(threshold=1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "acfe6a15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l1:  0.002021556789189128\n",
      "epochs:  0.002021556789189128\n",
      "batch_size:  0.002021556789189128\n",
      "act_fn:  0.002021556789189128\n",
      "optimizer:  0.002021556789189128\n",
      "dropout_prob:  0.0030709684077425002\n",
      "lr_mult:  0.002021556789189128\n",
      "patience:  0.002021556789189128\n",
      "batch_norm:  99.99999999999999\n",
      "initialization:  0.002021556789189128\n"
     ]
    },
    {
     "data": {
      "application/pdf": "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MTIzMyBdIC9Gb250TWF0cml4IFsgMC4wMDEgMCAwIDAuMDAxIDAgMCBdCi9DaGFyUHJvY3MgMTYgMCBSCi9FbmNvZGluZyA8PCAvVHlwZSAvRW5jb2RpbmcKL0RpZmZlcmVuY2VzIFsgMzIgL3NwYWNlIDQ2IC9wZXJpb2QgNDggL3plcm8gL29uZSAvdHdvIC90aHJlZSAvZm91ciAvZml2ZSAvc2l4IC9zZXZlbgovZWlnaHQgL25pbmUgL2NvbG9uIDk1IC91bmRlcnNjb3JlIDk3IC9hIC9iIC9jIC9kIDEwNCAvaCAxMDkgL20gL24gL28gL3AKMTE0IC9yIDExNiAvdCAvdSAxMjAgL3ggXQo+PgovV2lkdGhzIDEzIDAgUiA+PgplbmRvYmoKMTQgMCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Gb250TmFtZSAvQk1RUURWK0RlamFWdVNhbnMgL0ZsYWdzIDMyCi9Gb250QkJveCBbIC0xMDIxIC00NjMgMTc5NCAxMjMzIF0gL0FzY2VudCA5MjkgL0Rlc2NlbnQgLTIzNiAvQ2FwSGVpZ2h0IDAKL1hIZWlnaHQgMCAvSXRhbGljQW5nbGUgMCAvU3RlbVYgMCAvTWF4V2lkdGggMTM0MiA+PgplbmRvYmoKMTMgMCBvYmoKWyA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMAo2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDMxOCA0MDEgNDYwIDgzOCA2MzYKOTUwIDc4MCAyNzUgMzkwIDM5MCA1MDAgODM4IDMxOCAzNjEgMzE4IDMzNyA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2CjYzNiA2MzYgMzM3IDMzNyA4MzggODM4IDgzOCA1MzEgMTAwMCA2ODQgNjg2IDY5OCA3NzAgNjMyIDU3NSA3NzUgNzUyIDI5NQoyOTUgNjU2IDU1NyA4NjMgNzQ4IDc4NyA2MDMgNzg3IDY5NSA2MzUgNjExIDczMiA2ODQgOTg5IDY4NSA2MTEgNjg1IDM5MCAzMzcKMzkwIDgzOCA1MDAgNTAwIDYxMyA2MzUgNTUwIDYzNSA2MTUgMzUyIDYzNSA2MzQgMjc4IDI3OCA1NzkgMjc4IDk3NCA2MzQgNjEyCjYzNSA2MzUgNDExIDUyMSAzOTIgNjM0IDU5MiA4MTggNTkyIDU5MiA1MjUgNjM2IDMzNyA2MzYgODM4IDYwMCA2MzYgNjAwIDMxOAozNTIgNTE4IDEwMDAgNTAwIDUwMCA1MDAgMTM0MiA2MzUgNDAwIDEwNzAgNjAwIDY4NSA2MDAgNjAwIDMxOCAzMTggNTE4IDUxOAo1OTAgNTAwIDEwMDAgNTAwIDEwMDAgNTIxIDQwMCAxMDIzIDYwMCA1MjUgNjExIDMxOCA0MDEgNjM2IDYzNiA2MzYgNjM2IDMzNwo1MDAgNTAwIDEwMDAgNDcxIDYxMiA4MzggMzYxIDEwMDAgNTAwIDUwMCA4MzggNDAxIDQwMSA1MDAgNjM2IDYzNiAzMTggNTAwCjQwMSA0NzEgNjEyIDk2OSA5NjkgOTY5IDUzMSA2ODQgNjg0IDY4NCA2ODQgNjg0IDY4NCA5NzQgNjk4IDYzMiA2MzIgNjMyIDYzMgoyOTUgMjk1IDI5NSAyOTUgNzc1IDc0OCA3ODcgNzg3IDc4NyA3ODcgNzg3IDgzOCA3ODcgNzMyIDczMiA3MzIgNzMyIDYxMSA2MDUKNjMwIDYxMyA2MTMgNjEzIDYxMyA2MTMgNjEzIDk4MiA1NTAgNjE1IDYxNSA2MTUgNjE1IDI3OCAyNzggMjc4IDI3OCA2MTIgNjM0CjYxMiA2MTIgNjEyIDYxMiA2MTIgODM4IDYxMiA2MzQgNjM0IDYzNCA2MzQgNTkyIDYzNSA1OTIgXQplbmRvYmoKMTYgMCBvYmoKPDwgL2EgMTcgMCBSIC9iIDE4IDAgUiAvYyAxOSAwIFIgL2NvbG9uIDIwIDAgUiAvZCAyMSAwIFIgL2VpZ2h0IDIyIDAgUgovZml2ZSAyMyAwIFIgL2ZvdXIgMjQgMCBSIC9oIDI1IDAgUiAvbSAyNiAwIFIgL24gMjcgMCBSIC9uaW5lIDI4IDAgUgovbyAyOSAwIFIgL29uZSAzMCAwIFIgL3AgMzEgMCBSIC9wZXJpb2QgMzIgMCBSIC9yIDMzIDAgUiAvc2V2ZW4gMzQgMCBSCi9zaXggMzUgMCBSIC9zcGFjZSAzNiAwIFIgL3QgMzcgMCBSIC90aHJlZSAzOCAwIFIgL3R3byAzOSAwIFIgL3UgNDAgMCBSCi91bmRlcnNjb3JlIDQxIDAgUiAveCA0MiAwIFIgL3plcm8gNDMgMCBSID4+CmVuZG9iagozIDAgb2JqCjw8IC9GMSAxNSAwIFIgPj4KZW5kb2JqCjQgMCBvYmoKPDwgL0ExIDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDAgL2NhIDEgPj4KL0EyIDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDEgL2NhIDEgPj4KL0EzIDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDAuNSAvY2EgMC41ID4+Ci9BNCA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAxIC9jYSAwLjkgPj4gPj4KZW5kb2JqCjUgMCBvYmoKPDwgPj4KZW5kb2JqCjYgMCBvYmoKPDwgPj4KZW5kb2JqCjcgMCBvYmoKPDwgPj4KZW5kb2JqCjIgMCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9LaWRzIFsgMTEgMCBSIF0gL0NvdW50IDEgPj4KZW5kb2JqCjQ0IDAgb2JqCjw8IC9DcmVhdG9yIChNYXRwbG90bGliIHYzLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZykKL1Byb2R1Y2VyIChNYXRwbG90bGliIHBkZiBiYWNrZW5kIHYzLjkuMikKL0NyZWF0aW9uRGF0ZSAoRDoyMDI0MTExNzEwMTcyMiswMicwMCcpID4+CmVuZG9iagp4cmVmCjAgNDUKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDE2IDAwMDAwIG4gCjAwMDAwMzkwODUgMDAwMDAgbiAKMDAwMDAzODgwNyAwMDAwMCBuIAowMDAwMDM4ODM5IDAwMDAwIG4gCjAwMDAwMzkwMjIgMDAwMDAgbiAKMDAwMDAzOTA0MyAwMDAwMCBuIAowMDAwMDM5MDY0IDAwMDAwIG4gCjAwMDAwMDAwNjUgMDAwMDAgbiAKMDAwMDAwMDM0NyAwMDAwMCBuIAowMDAwMDI5NTk4IDAwMDAwIG4gCjAwMDAwMDAyMDggMDAwMDAgbiAKMDAwMDAyOTU3NiAwMDAwMCBuIAowMDAwMDM3NDEwIDAwMDAwIG4gCjAwMDAwMzcyMDMgMDAwMDAgbiAKMDAwMDAzNjcyOCAwMDAwMCBuIAowMDAwMDM4NDYzIDAwMDAwIG4gCjAwMDAwMjk2MTggMDAwMDAgbiAKMDAwMDAyOTk5OCAwMDAwMCBuIAowMDAwMDMwMzE1IDAwMDAwIG4gCjAwMDAwMzA2MjAgMDAwMDAgbiAKMDAwMDAzMDc2NSAwMDAwMCBuIAowMDAwMDMxMDY5IDAwMDAwIG4gCjAwMDAwMzE1MzcgMDAwMDAgbiAKMDAwMDAzMTg1OSAwMDAwMCBuIAowMDAwMDMyMDI1IDAwMDAwIG4gCjAwMDAwMzIyNjIgMDAwMDAgbiAKMDAwMDAzMjU5MyAwMDAwMCBuIAowMDAwMDMyODI5IDAwMDAwIG4gCjAwMDAwMzMyMjQgMDAwMDAgbiAKMDAwMDAzMzUxNSAwMDAwMCBuIAowMDAwMDMzNjcwIDAwMDAwIG4gCjAwMDAwMzM5ODIgMDAwMDAgbiAKMDAwMDAzNDEwNSAwMDAwMCBuIAowMDAwMDM0MzM4IDAwMDAwIG4gCjAwMDAwMzQ0ODAgMDAwMDAgbiAKMDAwMDAzNDg3MyAwMDAwMCBuIAowMDAwMDM0OTYzIDAwMDAwIG4gCjAwMDAwMzUxNjkgMDAwMDAgbiAKMDAwMDAzNTU4MiAwMDAwMCBuIAowMDAwMDM1OTA2IDAwMDAwIG4gCjAwMDAwMzYxNTMgMDAwMDAgbiAKMDAwMDAzNjI3OSAwMDAwMCBuIAowMDAwMDM2NDQwIDAwMDAwIG4gCjAwMDAwMzkxNDUgMDAwMDAgbiAKdHJhaWxlcgo8PCAvU2l6ZSA0NSAvUm9vdCAxIDAgUiAvSW5mbyA0NCAwIFIgPj4Kc3RhcnR4cmVmCjM5MzAyCiUlRU9GCg==",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_important_hyperparameter_contour(max_imp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c424bf08",
   "metadata": {},
   "source": [
    "### Get the Tuned Architecture {#sec-get-spot-results-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bef27163",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'act_fn': Swish(),\n",
      " 'batch_norm': False,\n",
      " 'batch_size': 32,\n",
      " 'dropout_prob': 7.235526135247649e-06,\n",
      " 'epochs': 128,\n",
      " 'initialization': 'xavier_normal',\n",
      " 'l1': 8,\n",
      " 'lr_mult': 2.126547240830241,\n",
      " 'optimizer': 'Adadelta',\n",
      " 'patience': 4}\n"
     ]
    }
   ],
   "source": [
    "import pprint\n",
    "from spotpython.hyperparameters.values import get_tuned_architecture\n",
    "config = get_tuned_architecture(spot_tuner, fun_control)\n",
    "pprint.pprint(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25f6a276",
   "metadata": {},
   "source": [
    "### Test on the full data set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "38352b95",
   "metadata": {},
   "outputs": [],
   "source": [
    "# set the value of the key \"TENSORBOARD_CLEAN\" to True in the fun_control dictionary and use the update() method to update the fun_control dictionary\n",
    "fun_control.update({\"TENSORBOARD_CLEAN\": True})\n",
    "fun_control.update({\"tensorboard_log\": True})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a242ce2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Restoring states from the checkpoint path at /Users/bartz/workspace/Hyperparameter-Tuning-Cookbook/runs/saved_models/8_128_32_Swish_Adadelta_0.0_2.1265_4_False_xavier_normal_TEST/last-v1.ckpt\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loaded model weights from the checkpoint at /Users/bartz/workspace/Hyperparameter-Tuning-Cookbook/runs/saved_models/8_128_32_Swish_Adadelta_0.0_2.1265_4_False_xavier_normal_TEST/last-v1.ckpt\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\">        Test metric        </span>┃<span style=\"font-weight: bold\">       DataLoader 0        </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">         hp_metric         </span>│<span style=\"color: #800080; text-decoration-color: #800080\">      6447.9814453125      </span>│\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">         val_loss          </span>│<span style=\"color: #800080; text-decoration-color: #800080\">      6447.9814453125      </span>│\n",
       "└───────────────────────────┴───────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1m       Test metric       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      DataLoader 0       \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36m        hp_metric        \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m     6447.9814453125     \u001b[0m\u001b[35m \u001b[0m│\n",
       "│\u001b[36m \u001b[0m\u001b[36m        val_loss         \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m     6447.9814453125     \u001b[0m\u001b[35m \u001b[0m│\n",
       "└───────────────────────────┴───────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_model result: {'val_loss': 6447.9814453125, 'hp_metric': 6447.9814453125}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['age',\n",
       " 'sex',\n",
       " 'bmi',\n",
       " 'bp',\n",
       " 's1_tc',\n",
       " 's2_ldl',\n",
       " 's3_hdl',\n",
       " 's4_tch',\n",
       " 's5_ltg',\n",
       " 's6_glu']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.light.testmodel import test_model\n",
    "from spotpython.utils.init import get_feature_names\n",
    "\n",
    "test_model(config, fun_control)\n",
    "get_feature_names(fun_control)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3114144",
   "metadata": {},
   "source": [
    "## Cross Validation With Lightning\n",
    "\n",
    "* The `KFold` class from `sklearn.model_selection` is used to generate the folds for cross-validation.\n",
    "* These mechanism is used to generate the folds for the final evaluation of the model.\n",
    "* The `CrossValidationDataModule` class [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/data/lightcrossvalidationdatamodule.py) is used to generate the folds for the hyperparameter tuning process.\n",
    "* It is called from the `cv_model` function [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/light/cvmodel.py).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b237465f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'l1': 8,\n",
       " 'epochs': 128,\n",
       " 'batch_size': 32,\n",
       " 'act_fn': Swish(),\n",
       " 'optimizer': 'Adadelta',\n",
       " 'dropout_prob': 7.235526135247649e-06,\n",
       " 'lr_mult': 2.126547240830241,\n",
       " 'patience': 4,\n",
       " 'batch_norm': False,\n",
       " 'initialization': 'xavier_normal'}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "12ba9ede",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k: 0\n",
      "Train Dataset Size: 221\n",
      "Val Dataset Size: 221\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3349.039306640625, 'hp_metric': 3349.039306640625}\n",
      "k: 1\n",
      "Train Dataset Size: 221\n",
      "Val Dataset Size: 221\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 5461.19140625, 'hp_metric': 5461.19140625}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "4405.1153564453125"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.light.cvmodel import cv_model\n",
    "fun_control.update({\"k_folds\": 2})\n",
    "fun_control.update({\"test_size\": 0.6})\n",
    "cv_model(config, fun_control)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "213c59a8",
   "metadata": {},
   "source": [
    "## Extending the Basic Setup\n",
    "\n",
    "This basic setup can be adapted to user-specific needs in many ways. For example, the user can specify a custom data set, a custom model, or a custom loss function.\n",
    "The following sections provide more details on how to customize the hyperparameter tuning process.\n",
    "Before we proceed, we will provide an overview of the basic settings of the hyperparameter tuning process and explain the parameters used so far.\n",
    "\n",
    "### General Experiment Setup {#sec-general-experiment-setup-601}\n",
    "\n",
    "To keep track of the different experiments, we use a `PREFIX` for the experiment name. The `PREFIX` is used to create a unique experiment name. The `PREFIX` is also used to create a unique TensorBoard folder, which is used to store the TensorBoard log files.\n",
    "\n",
    "`spotpython` allows the specification of two different types of stopping criteria: first, the number of function evaluations (`fun_evals`), and second, the maximum run time in seconds (`max_time`). Here, we will set the number of function evaluations to infinity and the maximum run time to one minute.\n",
    "\n",
    "`max_time` is set to one minute for demonstration purposes. For real experiments, this value should be increased.\n",
    "Note,  the total run time may exceed the specified `max_time`, because the initial design is always evaluated, even if this takes longer than `max_time`.\n",
    "\n",
    "\n",
    "### Data Setup {#sec-data-601}\n",
    "\n",
    "Here, we have provided the `Diabetes` data set class, which is a subclass of `torch.utils.data.Dataset`. \n",
    "Data preprocessing is handled by `Lightning` and `PyTorch`. It is described in the [LIGHTNINGDATAMODULE](https://lightning.ai/docs/pytorch/stable/data/datamodule.html) documentation. \n",
    "\n",
    "The data splitting, i.e., the generation of training, validation, and testing data, is handled by `Lightning`.\n",
    "\n",
    "\n",
    "### Objective Function `fun` {#sec-the-objective-function-601}\n",
    "\n",
    "The objective function `fun` from the class `HyperLight` [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/fun/hyperlight.py) is selected next. It implements an interface from `PyTorch`'s training, validation, and testing methods to `spotpython`.\n",
    "\n",
    "### Core-Model Setup\n",
    "\n",
    "By using `core_model_name = \"light.regression.NNLinearRegressor\"`, the `spotpython` model class `NetLightRegression` [[SOURCE]](https://sequential-parameter-optimization.github.io/spotpython/reference/spotpython/light/regression/netlightregression/) from the `light.regression` module is selected.\n",
    "\n",
    "### Hyperdict Setup\n",
    "\n",
    "For a given `core_model_name`, the corresponding hyperparameters are automatically loaded from the associated dictionary, which is stored as a JSON file. The JSON file contains hyperparameter type information, names, and bounds. For `spotpython` models, the hyperparameters are stored in the `LightHyperDict`, see [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/hyperdict/light_hyper_dict.json)\n",
    "Alternatively, you can load a local hyper_dict.\n",
    "The `hyperdict`  uses the default hyperparameter settings. These can be modified as described in @sec-modifying-hyperparameter-levels.\n",
    "\n",
    "### Other Settings {#sec-other-settings-601}\n",
    "\n",
    "There are several additional parameters that can be specified, e.g., since we did not specify a loss function, `mean_squared_error` is used, which is the default loss function. These will be explained in more detail in the following sections.\n",
    "\n",
    "\n",
    "## Tensorboard {#sec-tensorboard-601}\n",
    "\n",
    "The textual output shown in the console (or code cell) can be visualized with Tensorboard, if the argument `tensorboard_log` to `fun_control_init()` is set to `True`. The Tensorboard log files are stored in the `runs` folder. To start Tensorboard, run the following command in the terminal:\n",
    "\n",
    "\n",
    "\n",
    "```{raw}\n",
    "tensorboard --logdir=\"runs/\"\n",
    "```\n",
    "\n",
    "\n",
    "Further information can be found in the [PyTorch Lightning documentation](https://lightning.ai/docs/pytorch/stable/api/lightning.pytorch.loggers.tensorboard.html) for Tensorboard.\n",
    "\n",
    "## Loading the Saved Experiment and Getting the Hyperparameters of the Tuned Model\n",
    "\n",
    "To get the tuned hyperparameters as a dictionary, the `get_experiment_from_PREFIX` function can be used.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b8d2035e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded experiment from spot_601_experiment.pickle\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'l1': 8,\n",
       " 'epochs': 128,\n",
       " 'batch_size': 32,\n",
       " 'act_fn': Swish(),\n",
       " 'optimizer': 'Adadelta',\n",
       " 'dropout_prob': 7.235526135247649e-06,\n",
       " 'lr_mult': 2.126547240830241,\n",
       " 'patience': 4,\n",
       " 'batch_norm': False,\n",
       " 'initialization': 'xavier_normal'}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.utils.file import get_experiment_from_PREFIX\n",
    "config = get_experiment_from_PREFIX(\"601\")[\"config\"]\n",
    "config"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44aa7a7d",
   "metadata": {},
   "source": [
    "## Using the `spotgui`\n",
    "\n",
    "The `spotgui` [[github]](https://github.com/sequential-parameter-optimization/spotGUI) provides a convenient way to interact with the hyperparameter tuning process.\n",
    "To obtain the settings from @sec-basic-setup-601, the `spotgui` can be started as shown in @fig-spotgui.\n",
    "\n",
    "![spotgui](./figures_static/024_gui.png){width=100% #fig-spotgui}\n",
    "\n",
    "## Summary\n",
    "\n",
    "This section presented an introduction to the basic setup of hyperparameter tuning with `spotpython` and `PyTorch` Lightning.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
