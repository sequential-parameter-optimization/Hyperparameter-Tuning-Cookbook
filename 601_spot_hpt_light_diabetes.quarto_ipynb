{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8e7f6680",
   "metadata": {},
   "source": [
    "---\n",
    "execute:\n",
    "  cache: false\n",
    "  eval: true\n",
    "  echo: true\n",
    "  warning: false\n",
    "jupyter: python3\n",
    "---\n",
    "\n",
    "\n",
    "# Hyperparameter Tuning with `spotpython` and `PyTorch` Lightning for the Diabetes Data Set {#sec-hpt-pytorch}\n",
    "\n",
    "In this section, we will show how `spotpython` can be integrated into the `PyTorch` Lightning\n",
    "training workflow for a regression task.\n",
    "It demonstrates how easy it is to use `spotpython` to tune hyperparameters for a `PyTorch` Lightning model.\n",
    "\n",
    "## The Basic Setting {#sec-basic-setup-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "imports",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_imports\n",
    "import os\n",
    "from math import inf\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2048b3d",
   "metadata": {},
   "source": [
    "After importing the necessary libraries, the `fun_control` dictionary is set up via the `fun_control_init` function.\n",
    "The `fun_control` dictionary contains\n",
    "\n",
    "* `PREFIX`: a unique identifier for the experiment\n",
    "* `fun_evals`: the number of function evaluations\n",
    "* `max_time`: the maximum run time in minutes\n",
    "* `data_set`: the data set. Here we use the `Diabetes` data set that is provided by `spotpython`.\n",
    "* `core_model_name`: the class name of the neural network model. This neural network model is provided by `spotpython`.\n",
    "* `hyperdict`: the hyperparameter dictionary. This dictionary is used to define the hyperparameters of the neural network model. It is also provided by `spotpython`.\n",
    "* `_L_in`: the number of input features. Since the `Diabetes` data set has 10 features, `_L_in` is set to 10.\n",
    "* `_L_out`: the number of output features. Since we want to predict a single value, `_L_out` is set to 1.\n",
    "\n",
    "The `HyperLight` class is used to define the objective function `fun`.\n",
    "It connects the `PyTorch` and the `spotpython` methods and is provided by `spotpython`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "spotpython_setup",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module_name: light\n",
      "submodule_name: regression\n",
      "model_name: NNLinearRegressor\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_spotpython_setup\n",
    "\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "from spotpython.hyperdict.light_hyper_dict import LightHyperDict\n",
    "from spotpython.fun.hyperlight import HyperLight\n",
    "from spotpython.utils.init import (fun_control_init, surrogate_control_init, design_control_init)\n",
    "from spotpython.utils.eda import gen_design_table\n",
    "from spotpython.spot import spot\n",
    "from spotpython.utils.file import get_experiment_filename\n",
    "\n",
    "PREFIX=\"601\"\n",
    "\n",
    "data_set = Diabetes()\n",
    "\n",
    "fun_control = fun_control_init(\n",
    "    PREFIX=PREFIX,\n",
    "    save_experiment=True,\n",
    "    fun_evals=inf,\n",
    "    max_time=1,\n",
    "    data_set = data_set,\n",
    "    core_model_name=\"light.regression.NNLinearRegressor\",\n",
    "    hyperdict=LightHyperDict,\n",
    "    _L_in=10,\n",
    "    _L_out=1)\n",
    "\n",
    "fun = HyperLight().fun"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b33fbd8",
   "metadata": {},
   "source": [
    "The method `set_hyperparameter` allows the user to modify default hyperparameter settings.\n",
    "Here we modify some hyperparameters to keep the model small and to decrease the tuning time.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "25e4ebf7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | transform             |\n",
      "|----------------|--------|-----------|---------|---------|-----------------------|\n",
      "| l1             | int    | 3         |     3   |   4     | transform_power_2_int |\n",
      "| epochs         | int    | 4         |     3   |   7     | transform_power_2_int |\n",
      "| batch_size     | int    | 4         |     4   |  11     | transform_power_2_int |\n",
      "| act_fn         | factor | ReLU      |     0   |   5     | None                  |\n",
      "| optimizer      | factor | SGD       |     0   |   2     | None                  |\n",
      "| dropout_prob   | float  | 0.01      |     0   |   0.025 | None                  |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |  10     | None                  |\n",
      "| patience       | int    | 2         |     2   |   3     | transform_power_2_int |\n",
      "| batch_norm     | factor | 0         |     0   |   1     | None                  |\n",
      "| initialization | factor | Default   |     0   |   4     | None                  |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.hyperparameters.values import set_hyperparameter\n",
    "set_hyperparameter(fun_control, \"optimizer\", [ \"Adadelta\", \"Adam\", \"Adamax\"])\n",
    "set_hyperparameter(fun_control, \"l1\", [3,4])\n",
    "set_hyperparameter(fun_control, \"epochs\", [3,7])\n",
    "set_hyperparameter(fun_control, \"batch_size\", [4,11])\n",
    "set_hyperparameter(fun_control, \"dropout_prob\", [0.0, 0.025])\n",
    "set_hyperparameter(fun_control, \"patience\", [2,3])\n",
    "\n",
    "design_control = design_control_init(init_size=10)\n",
    "\n",
    "print(gen_design_table(fun_control))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d27aa1b0",
   "metadata": {},
   "source": [
    "Finally, a `Spot` object is created.\n",
    "Calling the method `run()` starts the hyperparameter tuning process.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "run",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23995.974609375, 'hp_metric': 23995.974609375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [256, 10] | [256, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23983.41015625, 'hp_metric': 23983.41015625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23741.576171875, 'hp_metric': 23741.576171875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24071.35546875, 'hp_metric': 24071.35546875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23948.751953125, 'hp_metric': 23948.751953125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24022.400390625, 'hp_metric': 24022.400390625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24036.333984375, 'hp_metric': 24036.333984375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23058.591796875, 'hp_metric': 23058.591796875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [1024, 10] | [1024, 1]\n",
      "-----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23857.533203125, 'hp_metric': 23857.533203125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23735.564453125, 'hp_metric': 23735.564453125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 8116.64501953125, 'hp_metric': 8116.64501953125}\n",
      "In update_writer().\n",
      "No spot_writer available.\n",
      "spotpython tuning: 8116.64501953125 [----------] 4.38% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 14575.7236328125, 'hp_metric': 14575.7236328125}\n",
      "In update_writer().\n",
      "No spot_writer available.\n",
      "spotpython tuning: 8116.64501953125 [#---------] 11.95% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 6237.4423828125, 'hp_metric': 6237.4423828125}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6237.4423828125 [##--------] 16.67% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24046.337890625, 'hp_metric': 24046.337890625}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6237.4423828125 [##--------] 18.64% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23919.431640625, 'hp_metric': 23919.431640625}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6237.4423828125 [##--------] 20.86% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [1024, 10] | [1024, 1]\n",
      "-----------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24035.2734375, 'hp_metric': 24035.2734375}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6237.4423828125 [##--------] 22.89% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23030.591796875, 'hp_metric': 23030.591796875}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6237.4423828125 [###-------] 27.35% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 595    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "595       Trainable params\n",
      "0         Non-trainable params\n",
      "595       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "33        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24160.833984375, 'hp_metric': 24160.833984375}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6237.4423828125 [###-------] 32.28% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 7075.71630859375, 'hp_metric': 7075.71630859375}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 6237.4423828125 [####------] 38.82% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3311.0400390625, 'hp_metric': 3311.0400390625}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3311.0400390625 [#####-----] 47.13% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 8469.00390625, 'hp_metric': 8469.00390625}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3311.0400390625 [######----] 55.97% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23335.388671875, 'hp_metric': 23335.388671875}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3311.0400390625 [#######---] 72.16% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22756.537109375, 'hp_metric': 22756.537109375}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3311.0400390625 [#########-] 89.19% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4858.8349609375, 'hp_metric': 4858.8349609375}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3311.0400390625 [##########] 97.11% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 17628.669921875, 'hp_metric': 17628.669921875}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3311.0400390625 [##########] 100.00% Done...\r\n",
      "\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Experiment saved to spot_601_experiment.pickle\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_run\n",
    "spot_tuner = spot.Spot(fun=fun,fun_control=fun_control, design_control=design_control)\n",
    "res = spot_tuner.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cfb140f",
   "metadata": {},
   "source": [
    "## Looking at the Results\n",
    "\n",
    "### Tuning Progress\n",
    "\n",
    "After the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized with `spotpython`'s method `plot_progress`. The black points represent the performace values (score or metric) of  hyperparameter configurations from the initial design, whereas the red points represents the  hyperparameter configurations found by the surrogate model based optimization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "plot_progress_1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 2700x1800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| label: 601_plot_progress_1\n",
    "spot_tuner.plot_progress()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7111ae73",
   "metadata": {},
   "source": [
    "### Tuned Hyperparameters and Their Importance\n",
    "\n",
    "Results can be printed in tabular form.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "80bf5783",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | tuned                 | transform             |   importance | stars   |\n",
      "|----------------|--------|-----------|---------|---------|-----------------------|-----------------------|--------------|---------|\n",
      "| l1             | int    | 3         |     3.0 |     4.0 | 3.0                   | transform_power_2_int |         0.00 |         |\n",
      "| epochs         | int    | 4         |     3.0 |     7.0 | 7.0                   | transform_power_2_int |         0.01 |         |\n",
      "| batch_size     | int    | 4         |     4.0 |    11.0 | 5.0                   | transform_power_2_int |         1.16 | *       |\n",
      "| act_fn         | factor | ReLU      |     0.0 |     5.0 | Swish                 | None                  |         0.02 |         |\n",
      "| optimizer      | factor | SGD       |     0.0 |     2.0 | Adadelta              | None                  |         0.00 |         |\n",
      "| dropout_prob   | float  | 0.01      |     0.0 |   0.025 | 0.0024073344376171596 | None                  |       100.00 | ***     |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |    10.0 | 2.494063219505441     | None                  |       100.00 | ***     |\n",
      "| patience       | int    | 2         |     2.0 |     3.0 | 2.0                   | transform_power_2_int |         0.04 |         |\n",
      "| batch_norm     | factor | 0         |     0.0 |     1.0 | 1                     | None                  |        23.74 | *       |\n",
      "| initialization | factor | Default   |     0.0 |     4.0 | xavier_normal         | None                  |         0.05 |         |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.utils.eda import gen_design_table\n",
    "print(gen_design_table(fun_control=fun_control, spot=spot_tuner))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d8a5491",
   "metadata": {},
   "source": [
    "A histogram can be used to visualize the most important hyperparameters.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b1a95f4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "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LTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvQXNjZW50IDkyOSAvRGVzY2VudCAtMjM2IC9DYXBIZWlnaHQgMAovWEhlaWdodCAwIC9JdGFsaWNBbmdsZSAwIC9TdGVtViAwIC9NYXhXaWR0aCAxMzQyID4+CmVuZG9iagoxMyAwIG9iagpbIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwCjYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgMzE4IDQwMSA0NjAgODM4IDYzNgo5NTAgNzgwIDI3NSAzOTAgMzkwIDUwMCA4MzggMzE4IDM2MSAzMTggMzM3IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYKNjM2IDYzNiAzMzcgMzM3IDgzOCA4MzggODM4IDUzMSAxMDAwIDY4NCA2ODYgNjk4IDc3MCA2MzIgNTc1IDc3NSA3NTIgMjk1CjI5NSA2NTYgNTU3IDg2MyA3NDggNzg3IDYwMyA3ODcgNjk1IDYzNSA2MTEgNzMyIDY4NCA5ODkgNjg1IDYxMSA2ODUgMzkwIDMzNwozOTAgODM4IDUwMCA1MDAgNjEzIDYzNSA1NTAgNjM1IDYxNSAzNTIgNjM1IDYzNCAyNzggMjc4IDU3OSAyNzggOTc0IDYzNCA2MTIKNjM1IDYzNSA0MTEgNTIxIDM5MiA2MzQgNTkyIDgxOCA1OTIgNTkyIDUyNSA2MzYgMzM3IDYzNiA4MzggNjAwIDYzNiA2MDAgMzE4CjM1MiA1MTggMTAwMCA1MDAgNTAwIDUwMCAxMzQyIDYzNSA0MDAgMTA3MCA2MDAgNjg1IDYwMCA2MDAgMzE4IDMxOCA1MTggNTE4CjU5MCA1MDAgMTAwMCA1MDAgMTAwMCA1MjEgNDAwIDEwMjMgNjAwIDUyNSA2MTEgMzE4IDQwMSA2MzYgNjM2IDYzNiA2MzYgMzM3CjUwMCA1MDAgMTAwMCA0NzEgNjEyIDgzOCAzNjEgMTAwMCA1MDAgNTAwIDgzOCA0MDEgNDAxIDUwMCA2MzYgNjM2IDMxOCA1MDAKNDAxIDQ3MSA2MTIgOTY5IDk2OSA5NjkgNTMxIDY4NCA2ODQgNjg0IDY4NCA2ODQgNjg0IDk3NCA2OTggNjMyIDYzMiA2MzIgNjMyCjI5NSAyOTUgMjk1IDI5NSA3NzUgNzQ4IDc4NyA3ODcgNzg3IDc4NyA3ODcgODM4IDc4NyA3MzIgNzMyIDczMiA3MzIgNjExIDYwNQo2MzAgNjEzIDYxMyA2MTMgNjEzIDYxMyA2MTMgOTgyIDU1MCA2MTUgNjE1IDYxNSA2MTUgMjc4IDI3OCAyNzggMjc4IDYxMiA2MzQKNjEyIDYxMiA2MTIgNjEyIDYxMiA4MzggNjEyIDYzNCA2MzQgNjM0IDYzNCA1OTIgNjM1IDU5MiBdCmVuZG9iagoxNiAwIG9iago8PCAvYSAxNyAwIFIgL2IgMTggMCBSIC9jIDE5IDAgUiAvZCAyMCAwIFIgL2UgMjEgMCBSIC9laWdodCAyMiAwIFIKL2ZvdXIgMjMgMCBSIC9oIDI0IDAgUiAvaSAyNSAwIFIgL2wgMjYgMCBSIC9tIDI3IDAgUiAvbiAyOCAwIFIgL28gMjkgMCBSCi9vbmUgMzAgMCBSIC9wIDMxIDAgUiAvciAzMiAwIFIgL3MgMzMgMCBSIC9zaXggMzQgMCBSIC90IDM1IDAgUiAvdHdvIDM2IDAgUgovdSAzNyAwIFIgL3VuZGVyc2NvcmUgMzggMCBSIC96IDM5IDAgUiAvemVybyA0MCAwIFIgPj4KZW5kb2JqCjMgMCBvYmoKPDwgL0YxIDE1IDAgUiA+PgplbmRvYmoKNCAwIG9iago8PCAvQTEgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMCAvY2EgMSA+PgovQTIgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMSAvY2EgMSA+PiA+PgplbmRvYmoKNSAwIG9iago8PCA+PgplbmRvYmoKNiAwIG9iago8PCA+PgplbmRvYmoKNyAwIG9iago8PCA+PgplbmRvYmoKMiAwIG9iago8PCAvVHlwZSAvUGFnZXMgL0tpZHMgWyAxMSAwIFIgXSAvQ291bnQgMSA+PgplbmRvYmoKNDEgMCBvYmoKPDwgL0NyZWF0b3IgKE1hdHBsb3RsaWIgdjMuOS4yLCBodHRwczovL21hdHBsb3RsaWIub3JnKQovUHJvZHVjZXIgKE1hdHBsb3RsaWIgcGRmIGJhY2tlbmQgdjMuOS4yKQovQ3JlYXRpb25EYXRlIChEOjIwMjQxMTIyMDAzOTI3KzAyJzAwJykgPj4KZW5kb2JqCnhyZWYKMCA0MgowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDAwMTYgMDAwMDAgbiAKMDAwMDAwOTc1NiAwMDAwMCBuIAowMDAwMDA5NTYyIDAwMDAwIG4gCjAwMDAwMDk1OTQgMDAwMDAgbiAKMDAwMDAwOTY5MyAwMDAwMCBuIAowMDAwMDA5NzE0IDAwMDAwIG4gCjAwMDAwMDk3MzUgMDAwMDAgbiAKMDAwMDAwMDA2NSAwMDAwMCBuIAowMDAwMDAwMzQ0IDAwMDAwIG4gCjAwMDAwMDEwOTggMDAwMDAgbiAKMDAwMDAwMDIwOCAwMDAwMCBuIAowMDAwMDAxMDc4IDAwMDAwIG4gCjAwMDAwMDgyMjIgMDAwMDAgbiAKMDAwMDAwODAxNSAwMDAwMCBuIAowMDAwMDA3NTc3IDAwMDAwIG4gCjAwMDAwMDkyNzUgMDAwMDAgbiAKMDAwMDAwMTExOCAwMDAwMCBuIAowMDAwMDAxNDk4IDAwMDAwIG4gCjAwMDAwMDE4MTUgMDAwMDAgbiAKMDAwMDAwMjEyMCAwMDAwMCBuIAowMDAwMDAyNDI0IDAwMDAwIG4gCjAwMDAwMDI3NDYgMDAwMDAgbiAKMDAwMDAwMzIxNCAwMDAwMCBuIAowMDAwMDAzMzgwIDAwMDAwIG4gCjAwMDAwMDM2MTcgMDAwMDAgbiAKMDAwMDAwMzc2MSAwMDAwMCBuIAowMDAwMDAzODgwIDAwMDAwIG4gCjAwMDAwMDQyMTEgMDAwMDAgbiAKMDAwMDAwNDQ0NyAwMDAwMCBuIAowMDAwMDA0NzM4IDAwMDAwIG4gCjAwMDAwMDQ4OTMgMDAwMDAgbiAKMDAwMDAwNTIwNSAwMDAwMCBuIAowMDAwMDA1NDM4IDAwMDAwIG4gCjAwMDAwMDU4NDUgMDAwMDAgbiAKMDAwMDAwNjIzOCAwMDAwMCBuIAowMDAwMDA2NDQ0IDAwMDAwIG4gCjAwMDAwMDY3NjggMDAwMDAgbiAKMDAwMDAwNzAxNSAwMDAwMCBuIAowMDAwMDA3MTQxIDAwMDAwIG4gCjAwMDAwMDcyODkgMDAwMDAgbiAKMDAwMDAwOTgxNiAwMDAwMCBuIAp0cmFpbGVyCjw8IC9TaXplIDQyIC9Sb290IDEgMCBSIC9JbmZvIDQxIDAgUiA+PgpzdGFydHhyZWYKOTk3MwolJUVPRgo=",
      "text/plain": [
       "<Figure size 1650x1050 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_importance(threshold=1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "047a9ab6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l1:  0.001\n",
      "epochs:  0.006218909714119319\n",
      "batch_size:  1.162191163576763\n",
      "act_fn:  0.01905256014403632\n",
      "optimizer:  0.001\n",
      "dropout_prob:  100.0\n",
      "lr_mult:  100.0\n",
      "patience:  0.03832956607292533\n",
      "batch_norm:  23.73624131572493\n",
      "initialization:  0.04515687475346018\n"
     ]
    },
    {
     "data": {
      "application/pdf": "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NQovRm9udERlc2NyaXB0b3IgMTQgMCBSIC9TdWJ0eXBlIC9UeXBlMyAvTmFtZSAvQk1RUURWK0RlamFWdVNhbnMKL0ZvbnRCQm94IFsgLTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvRm9udE1hdHJpeCBbIDAuMDAxIDAgMCAwLjAwMSAwIDAgXQovQ2hhclByb2NzIDE2IDAgUgovRW5jb2RpbmcgPDwgL1R5cGUgL0VuY29kaW5nCi9EaWZmZXJlbmNlcyBbIDMyIC9zcGFjZSA0NiAvcGVyaW9kIDQ4IC96ZXJvIC9vbmUgL3R3byAvdGhyZWUgL2ZvdXIgL2ZpdmUgL3NpeCAvc2V2ZW4KL2VpZ2h0IC9uaW5lIC9jb2xvbiA5NSAvdW5kZXJzY29yZSA5OCAvYiAxMDAgL2QgMTA4IC9sIC9tIDExMSAvbyAvcCAxMTQgL3IKMTE2IC90IC91IDEyMCAveCBdCj4+Ci9XaWR0aHMgMTMgMCBSID4+CmVuZG9iagoxNCAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0ZvbnROYW1lIC9CTVFRRFYrRGVqYVZ1U2FucyAvRmxhZ3MgMzIKL0ZvbnRCQm94IFsgLTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvQXNjZW50IDkyOSAvRGVzY2VudCAtMjM2IC9DYXBIZWlnaHQgMAovWEhlaWdodCAwIC9JdGFsaWNBbmdsZSAwIC9TdGVtViAwIC9NYXhXaWR0aCAxMzQyID4+CmVuZG9iagoxMyAwIG9iagpbIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwCjYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgMzE4IDQwMSA0NjAgODM4IDYzNgo5NTAgNzgwIDI3NSAzOTAgMzkwIDUwMCA4MzggMzE4IDM2MSAzMTggMzM3IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYKNjM2IDYzNiAzMzcgMzM3IDgzOCA4MzggODM4IDUzMSAxMDAwIDY4NCA2ODYgNjk4IDc3MCA2MzIgNTc1IDc3NSA3NTIgMjk1CjI5NSA2NTYgNTU3IDg2MyA3NDggNzg3IDYwMyA3ODcgNjk1IDYzNSA2MTEgNzMyIDY4NCA5ODkgNjg1IDYxMSA2ODUgMzkwIDMzNwozOTAgODM4IDUwMCA1MDAgNjEzIDYzNSA1NTAgNjM1IDYxNSAzNTIgNjM1IDYzNCAyNzggMjc4IDU3OSAyNzggOTc0IDYzNCA2MTIKNjM1IDYzNSA0MTEgNTIxIDM5MiA2MzQgNTkyIDgxOCA1OTIgNTkyIDUyNSA2MzYgMzM3IDYzNiA4MzggNjAwIDYzNiA2MDAgMzE4CjM1MiA1MTggMTAwMCA1MDAgNTAwIDUwMCAxMzQyIDYzNSA0MDAgMTA3MCA2MDAgNjg1IDYwMCA2MDAgMzE4IDMxOCA1MTggNTE4CjU5MCA1MDAgMTAwMCA1MDAgMTAwMCA1MjEgNDAwIDEwMjMgNjAwIDUyNSA2MTEgMzE4IDQwMSA2MzYgNjM2IDYzNiA2MzYgMzM3CjUwMCA1MDAgMTAwMCA0NzEgNjEyIDgzOCAzNjEgMTAwMCA1MDAgNTAwIDgzOCA0MDEgNDAxIDUwMCA2MzYgNjM2IDMxOCA1MDAKNDAxIDQ3MSA2MTIgOTY5IDk2OSA5NjkgNTMxIDY4NCA2ODQgNjg0IDY4NCA2ODQgNjg0IDk3NCA2OTggNjMyIDYzMiA2MzIgNjMyCjI5NSAyOTUgMjk1IDI5NSA3NzUgNzQ4IDc4NyA3ODcgNzg3IDc4NyA3ODcgODM4IDc4NyA3MzIgNzMyIDczMiA3MzIgNjExIDYwNQo2MzAgNjEzIDYxMyA2MTMgNjEzIDYxMyA2MTMgOTgyIDU1MCA2MTUgNjE1IDYxNSA2MTUgMjc4IDI3OCAyNzggMjc4IDYxMiA2MzQKNjEyIDYxMiA2MTIgNjEyIDYxMiA4MzggNjEyIDYzNCA2MzQgNjM0IDYzNCA1OTIgNjM1IDU5MiBdCmVuZG9iagoxNiAwIG9iago8PCAvYiAxNyAwIFIgL2NvbG9uIDE4IDAgUiAvZCAxOSAwIFIgL2VpZ2h0IDIwIDAgUiAvZml2ZSAyMSAwIFIKL2ZvdXIgMjIgMCBSIC9sIDIzIDAgUiAvbSAyNCAwIFIgL25pbmUgMjUgMCBSIC9vIDI2IDAgUiAvb25lIDI3IDAgUgovcCAyOCAwIFIgL3BlcmlvZCAyOSAwIFIgL3IgMzAgMCBSIC9zZXZlbiAzMSAwIFIgL3NpeCAzMiAwIFIgL3NwYWNlIDMzIDAgUgovdCAzNCAwIFIgL3RocmVlIDM1IDAgUiAvdHdvIDM2IDAgUiAvdSAzNyAwIFIgL3VuZGVyc2NvcmUgMzggMCBSIC94IDM5IDAgUgovemVybyA0MCAwIFIgPj4KZW5kb2JqCjMgMCBvYmoKPDwgL0YxIDE1IDAgUiA+PgplbmRvYmoKNCAwIG9iago8PCAvQTEgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMCAvY2EgMSA+PgovQTIgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMSAvY2EgMSA+PgovQTMgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMC41IC9jYSAwLjUgPj4KL0E0IDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDEgL2NhIDAuOSA+PiA+PgplbmRvYmoKNSAwIG9iago8PCA+PgplbmRvYmoKNiAwIG9iago8PCA+PgplbmRvYmoKNyAwIG9iago8PCA+PgplbmRvYmoKMiAwIG9iago8PCAvVHlwZSAvUGFnZXMgL0tpZHMgWyAxMSAwIFIgXSAvQ291bnQgMSA+PgplbmRvYmoKNDEgMCBvYmoKPDwgL0NyZWF0b3IgKE1hdHBsb3RsaWIgdjMuOS4yLCBodHRwczovL21hdHBsb3RsaWIub3JnKQovUHJvZHVjZXIgKE1hdHBsb3RsaWIgcGRmIGJhY2tlbmQgdjMuOS4yKQovQ3JlYXRpb25EYXRlIChEOjIwMjQxMTIyMDAzOTI4KzAyJzAwJykgPj4KZW5kb2JqCnhyZWYKMCA0MgowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDAwMTYgMDAwMDAgbiAKMDAwMDA0NzI0NCAwMDAwMCBuIAowMDAwMDQ2OTY2IDAwMDAwIG4gCjAwMDAwNDY5OTggMDAwMDAgbiAKMDAwMDA0NzE4MSAwMDAwMCBuIAowMDAwMDQ3MjAyIDAwMDAwIG4gCjAwMDAwNDcyMjMgMDAwMDAgbiAKMDAwMDAwMDA2NSAwMDAwMCBuIAowMDAwMDAwMzQ4IDAwMDAwIG4gCjAwMDAwMzg4MzEgMDAwMDAgbiAKMDAwMDAwMDIwOCAwMDAwMCBuIAowMDAwMDM4ODA5IDAwMDAwIG4gCjAwMDAwNDU1OTkgMDAwMDAgbiAKMDAwMDA0NTM5MiAwMDAwMCBuIAowMDAwMDQ0OTIyIDAwMDAwIG4gCjAwMDAwNDY2NTIgMDAwMDAgbiAKMDAwMDAzODg1MSAwMDAwMCBuIAowMDAwMDM5MTY4IDAwMDAwIG4gCjAwMDAwMzkzMTMgMDAwMDAgbiAKMDAwMDAzOTYxNyAwMDAwMCBuIAowMDAwMDQwMDg1IDAwMDAwIG4gCjAwMDAwNDA0MDcgMDAwMDAgbiAKMDAwMDA0MDU3MyAwMDAwMCBuIAowMDAwMDQwNjkyIDAwMDAwIG4gCjAwMDAwNDEwMjMgMDAwMDAgbiAKMDAwMDA0MTQxOCAwMDAwMCBuIAowMDAwMDQxNzA5IDAwMDAwIG4gCjAwMDAwNDE4NjQgMDAwMDAgbiAKMDAwMDA0MjE3NiAwMDAwMCBuIAowMDAwMDQyMjk5IDAwMDAwIG4gCjAwMDAwNDI1MzIgMDAwMDAgbiAKMDAwMDA0MjY3NCAwMDAwMCBuIAowMDAwMDQzMDY3IDAwMDAwIG4gCjAwMDAwNDMxNTcgMDAwMDAgbiAKMDAwMDA0MzM2MyAwMDAwMCBuIAowMDAwMDQzNzc2IDAwMDAwIG4gCjAwMDAwNDQxMDAgMDAwMDAgbiAKMDAwMDA0NDM0NyAwMDAwMCBuIAowMDAwMDQ0NDczIDAwMDAwIG4gCjAwMDAwNDQ2MzQgMDAwMDAgbiAKMDAwMDA0NzMwNCAwMDAwMCBuIAp0cmFpbGVyCjw8IC9TaXplIDQyIC9Sb290IDEgMCBSIC9JbmZvIDQxIDAgUiA+PgpzdGFydHhyZWYKNDc0NjEKJSVFT0YK",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_important_hyperparameter_contour(max_imp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "429db02f",
   "metadata": {},
   "source": [
    "### Get the Tuned Architecture {#sec-get-spot-results-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "75d178bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'act_fn': Swish(),\n",
      " 'batch_norm': True,\n",
      " 'batch_size': 32,\n",
      " 'dropout_prob': 0.0024073344376171596,\n",
      " 'epochs': 128,\n",
      " 'initialization': 'xavier_normal',\n",
      " 'l1': 8,\n",
      " 'lr_mult': 2.494063219505441,\n",
      " 'optimizer': 'Adadelta',\n",
      " 'patience': 4}\n"
     ]
    }
   ],
   "source": [
    "import pprint\n",
    "from spotpython.hyperparameters.values import get_tuned_architecture\n",
    "config = get_tuned_architecture(spot_tuner, fun_control)\n",
    "pprint.pprint(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24167e90",
   "metadata": {},
   "source": [
    "### Test on the full data set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6ee88faa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# set the value of the key \"TENSORBOARD_CLEAN\" to True in the fun_control dictionary and use the update() method to update the fun_control dictionary\n",
    "fun_control.update({\"TENSORBOARD_CLEAN\": True})\n",
    "fun_control.update({\"tensorboard_log\": True})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d8d0445d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Restoring states from the checkpoint path at /Users/bartz/workspace/Hyperparameter-Tuning-Cookbook/runs/saved_models/8_128_32_Swish_Adadelta_0.0024_2.4941_4_True_xavier_normal_TEST/last-v1.ckpt\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loaded model weights from the checkpoint at /Users/bartz/workspace/Hyperparameter-Tuning-Cookbook/runs/saved_models/8_128_32_Swish_Adadelta_0.0024_2.4941_4_True_xavier_normal_TEST/last-v1.ckpt\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\">        Test metric        </span>┃<span style=\"font-weight: bold\">       DataLoader 0        </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">         hp_metric         </span>│<span style=\"color: #800080; text-decoration-color: #800080\">     3920.49462890625      </span>│\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">         val_loss          </span>│<span style=\"color: #800080; text-decoration-color: #800080\">     3920.49462890625      </span>│\n",
       "└───────────────────────────┴───────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1m       Test metric       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      DataLoader 0       \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36m        hp_metric        \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m    3920.49462890625     \u001b[0m\u001b[35m \u001b[0m│\n",
       "│\u001b[36m \u001b[0m\u001b[36m        val_loss         \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m    3920.49462890625     \u001b[0m\u001b[35m \u001b[0m│\n",
       "└───────────────────────────┴───────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_model result: {'val_loss': 3920.49462890625, 'hp_metric': 3920.49462890625}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['age',\n",
       " 'sex',\n",
       " 'bmi',\n",
       " 'bp',\n",
       " 's1_tc',\n",
       " 's2_ldl',\n",
       " 's3_hdl',\n",
       " 's4_tch',\n",
       " 's5_ltg',\n",
       " 's6_glu']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.light.testmodel import test_model\n",
    "from spotpython.utils.init import get_feature_names\n",
    "\n",
    "test_model(config, fun_control)\n",
    "get_feature_names(fun_control)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91a495b9",
   "metadata": {},
   "source": [
    "## Cross Validation With Lightning\n",
    "\n",
    "* The `KFold` class from `sklearn.model_selection` is used to generate the folds for cross-validation.\n",
    "* These mechanism is used to generate the folds for the final evaluation of the model.\n",
    "* The `CrossValidationDataModule` class [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/data/lightcrossvalidationdatamodule.py) is used to generate the folds for the hyperparameter tuning process.\n",
    "* It is called from the `cv_model` function [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/light/cvmodel.py).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "73238337",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'l1': 8,\n",
       " 'epochs': 128,\n",
       " 'batch_size': 32,\n",
       " 'act_fn': Swish(),\n",
       " 'optimizer': 'Adadelta',\n",
       " 'dropout_prob': 0.0024073344376171596,\n",
       " 'lr_mult': 2.494063219505441,\n",
       " 'patience': 4,\n",
       " 'batch_norm': True,\n",
       " 'initialization': 'xavier_normal'}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "73850c52",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k: 0\n",
      "Train Dataset Size: 221\n",
      "Val Dataset Size: 221\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 213    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "213       Trainable params\n",
      "0         Non-trainable params\n",
      "213       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "21        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 5033.576171875, 'hp_metric': 5033.576171875}\n",
      "k: 1\n",
      "Train Dataset Size: 221\n",
      "Val Dataset Size: 221\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24546.689453125, 'hp_metric': 24546.689453125}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "14790.1328125"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.light.cvmodel import cv_model\n",
    "fun_control.update({\"k_folds\": 2})\n",
    "fun_control.update({\"test_size\": 0.6})\n",
    "cv_model(config, fun_control)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47618573",
   "metadata": {},
   "source": [
    "## Extending the Basic Setup\n",
    "\n",
    "This basic setup can be adapted to user-specific needs in many ways. For example, the user can specify a custom data set, a custom model, or a custom loss function.\n",
    "The following sections provide more details on how to customize the hyperparameter tuning process.\n",
    "Before we proceed, we will provide an overview of the basic settings of the hyperparameter tuning process and explain the parameters used so far.\n",
    "\n",
    "### General Experiment Setup {#sec-general-experiment-setup-601}\n",
    "\n",
    "To keep track of the different experiments, we use a `PREFIX` for the experiment name. The `PREFIX` is used to create a unique experiment name. The `PREFIX` is also used to create a unique TensorBoard folder, which is used to store the TensorBoard log files.\n",
    "\n",
    "`spotpython` allows the specification of two different types of stopping criteria: first, the number of function evaluations (`fun_evals`), and second, the maximum run time in seconds (`max_time`). Here, we will set the number of function evaluations to infinity and the maximum run time to one minute.\n",
    "\n",
    "`max_time` is set to one minute for demonstration purposes. For real experiments, this value should be increased.\n",
    "Note,  the total run time may exceed the specified `max_time`, because the initial design is always evaluated, even if this takes longer than `max_time`.\n",
    "\n",
    "\n",
    "### Data Setup {#sec-data-601}\n",
    "\n",
    "Here, we have provided the `Diabetes` data set class, which is a subclass of `torch.utils.data.Dataset`. \n",
    "Data preprocessing is handled by `Lightning` and `PyTorch`. It is described in the [LIGHTNINGDATAMODULE](https://lightning.ai/docs/pytorch/stable/data/datamodule.html) documentation. \n",
    "\n",
    "The data splitting, i.e., the generation of training, validation, and testing data, is handled by `Lightning`.\n",
    "\n",
    "\n",
    "### Objective Function `fun` {#sec-the-objective-function-601}\n",
    "\n",
    "The objective function `fun` from the class `HyperLight` [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/fun/hyperlight.py) is selected next. It implements an interface from `PyTorch`'s training, validation, and testing methods to `spotpython`.\n",
    "\n",
    "### Core-Model Setup\n",
    "\n",
    "By using `core_model_name = \"light.regression.NNLinearRegressor\"`, the `spotpython` model class `NetLightRegression` [[SOURCE]](https://sequential-parameter-optimization.github.io/spotpython/reference/spotpython/light/regression/netlightregression/) from the `light.regression` module is selected.\n",
    "\n",
    "### Hyperdict Setup\n",
    "\n",
    "For a given `core_model_name`, the corresponding hyperparameters are automatically loaded from the associated dictionary, which is stored as a JSON file. The JSON file contains hyperparameter type information, names, and bounds. For `spotpython` models, the hyperparameters are stored in the `LightHyperDict`, see [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/hyperdict/light_hyper_dict.json)\n",
    "Alternatively, you can load a local hyper_dict.\n",
    "The `hyperdict`  uses the default hyperparameter settings. These can be modified as described in @sec-modifying-hyperparameter-levels.\n",
    "\n",
    "### Other Settings {#sec-other-settings-601}\n",
    "\n",
    "There are several additional parameters that can be specified, e.g., since we did not specify a loss function, `mean_squared_error` is used, which is the default loss function. These will be explained in more detail in the following sections.\n",
    "\n",
    "\n",
    "## Tensorboard {#sec-tensorboard-601}\n",
    "\n",
    "The textual output shown in the console (or code cell) can be visualized with Tensorboard, if the argument `tensorboard_log` to `fun_control_init()` is set to `True`. The Tensorboard log files are stored in the `runs` folder. To start Tensorboard, run the following command in the terminal:\n",
    "\n",
    "\n",
    "\n",
    "```{raw}\n",
    "tensorboard --logdir=\"runs/\"\n",
    "```\n",
    "\n",
    "\n",
    "Further information can be found in the [PyTorch Lightning documentation](https://lightning.ai/docs/pytorch/stable/api/lightning.pytorch.loggers.tensorboard.html) for Tensorboard.\n",
    "\n",
    "## Loading the Saved Experiment and Getting the Hyperparameters of the Tuned Model\n",
    "\n",
    "To get the tuned hyperparameters as a dictionary, the `get_experiment_from_PREFIX` function can be used.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "92674de0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded experiment from spot_601_experiment.pickle\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'l1': 8,\n",
       " 'epochs': 128,\n",
       " 'batch_size': 32,\n",
       " 'act_fn': Swish(),\n",
       " 'optimizer': 'Adadelta',\n",
       " 'dropout_prob': 0.0024073344376171596,\n",
       " 'lr_mult': 2.494063219505441,\n",
       " 'patience': 4,\n",
       " 'batch_norm': True,\n",
       " 'initialization': 'xavier_normal'}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.utils.file import get_experiment_from_PREFIX\n",
    "config = get_experiment_from_PREFIX(\"601\")[\"config\"]\n",
    "config"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcbad66f",
   "metadata": {},
   "source": [
    "## Using the `spotgui`\n",
    "\n",
    "The `spotgui` [[github]](https://github.com/sequential-parameter-optimization/spotGUI) provides a convenient way to interact with the hyperparameter tuning process.\n",
    "To obtain the settings from @sec-basic-setup-601, the `spotgui` can be started as shown in @fig-spotgui.\n",
    "\n",
    "![spotgui](./figures_static/024_gui.png){width=100% #fig-spotgui}\n",
    "\n",
    "## Summary\n",
    "\n",
    "This section presented an introduction to the basic setup of hyperparameter tuning with `spotpython` and `PyTorch` Lightning.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/bartz/miniforge3/envs/spot312/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
