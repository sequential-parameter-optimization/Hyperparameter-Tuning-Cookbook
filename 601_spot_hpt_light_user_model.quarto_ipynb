{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "666cae18",
   "metadata": {},
   "source": [
    "---\n",
    "execute:\n",
    "  cache: false\n",
    "  eval: true\n",
    "  echo: true\n",
    "  warning: false\n",
    "jupyter: python3\n",
    "---\n",
    "\n",
    "\n",
    "# Hyperparameter Tuning with PyTorch Lightning and User Models {#sec-light-user-model-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "user_model_first_imports",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| echo: false\n",
    "#| label: 601_user_model_first_imports\n",
    "import numpy as np\n",
    "import os\n",
    "from math import inf\n",
    "import numpy as np\n",
    "import warnings\n",
    "if not os.path.exists('./figures'):\n",
    "    os.makedirs('./figures')\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73dc1a2d",
   "metadata": {},
   "source": [
    "In this section, we will show how a user defined model can be used for the `PyTorch` Lightning hyperparameter tuning workflow with `spotpython`.\n",
    "\n",
    "## Using a User Specified Model\n",
    "\n",
    "As templates, we provide the following three files that allow the user to specify a model in the `/userModel` directory:\n",
    "\n",
    "* `my_regressor.py`, see @sec-my-regressor\n",
    "* `my_hyperdict.json`, see @sec-my-hyper-dict-json\n",
    "* `my_hyperdict.py`, see @sec-my-hyper-dict.\n",
    "\n",
    "The `my_regressor.py` file contains the model class, which is a subclass of `nn.Module`.\n",
    "The `my_hyperdict.json` file contains the hyperparameter settings as a dictionary, which are loaded via the `my_hyperdict.py` file.\n",
    "\n",
    "Note, that we have to add the path to the `userModel` directory to the `sys.path` list as shown below.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "user_model_imports_sys",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_model_imports_sys\n",
    "import sys\n",
    "sys.path.insert(0, './userModel')\n",
    "import my_regressor\n",
    "import my_hyper_dict\n",
    "from spotpython.hyperparameters.values import add_core_model_to_fun_control\n",
    "\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "from spotpython.hyperdict.light_hyper_dict import LightHyperDict\n",
    "from spotpython.fun.hyperlight import HyperLight\n",
    "from spotpython.utils.init import (fun_control_init, design_control_init)\n",
    "from spotpython.utils.eda import gen_design_table\n",
    "from spotpython.hyperparameters.values import set_hyperparameter\n",
    "from spotpython.spot import spot\n",
    "\n",
    "fun_control = fun_control_init(\n",
    "    PREFIX=\"601-user-model\",\n",
    "    fun_evals=inf,\n",
    "    max_time=1,\n",
    "    data_set = Diabetes(),\n",
    "    _L_in=10,\n",
    "    _L_out=1)\n",
    "\n",
    "add_core_model_to_fun_control(fun_control=fun_control,\n",
    "                              core_model=my_regressor.MyRegressor,\n",
    "                              hyper_dict=my_hyper_dict.MyHyperDict)\n",
    "\n",
    "design_control = design_control_init(init_size=7)\n",
    "\n",
    "fun = HyperLight().fun\n",
    "\n",
    "spot_tuner = spot.Spot(fun=fun,fun_control=fun_control, design_control=design_control)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "user_model_run",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [4, 10]  | [4, 1]   \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 19.8 K | train | [8, 10]  | [8, 1]   \n",
      "---------------------------------------------------------------------\n",
      "19.8 K    Trainable params\n",
      "0         Non-trainable params\n",
      "19.8 K    Total params\n",
      "0.079     Total estimated model params size (MB)\n",
      "47        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [4, 10]  | [4, 1]   \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': nan, 'hp_metric': nan}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 5.4 K  | train | [8, 10]  | [8, 1]   \n",
      "---------------------------------------------------------------------\n",
      "5.4 K     Trainable params\n",
      "0         Non-trainable params\n",
      "5.4 K     Total params\n",
      "0.022     Total estimated model params size (MB)\n",
      "39        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4795.224609375, 'hp_metric': 4795.224609375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=256` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.6 K  | train | [8, 10]  | [8, 1]   \n",
      "---------------------------------------------------------------------\n",
      "1.6 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.6 K     Total params\n",
      "0.006     Total estimated model params size (MB)\n",
      "31        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 19881.609375, 'hp_metric': 19881.609375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 75.9 K | train | [2, 10]  | [2, 1]   \n",
      "---------------------------------------------------------------------\n",
      "75.9 K    Trainable params\n",
      "0         Non-trainable params\n",
      "75.9 K    Total params\n",
      "0.303     Total estimated model params size (MB)\n",
      "55        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': nan, 'hp_metric': nan}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.6 K  | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "1.6 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.6 K     Total params\n",
      "0.006     Total estimated model params size (MB)\n",
      "31        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22673.50390625, 'hp_metric': 22673.50390625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23567.240234375, 'hp_metric': 23567.240234375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [4, 10]  | [4, 1]   \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4636.91552734375, 'hp_metric': 4636.91552734375}\n",
      "spotpython tuning: 4636.91552734375 [#---------] 10.61% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [2, 10]  | [2, 1]   \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=512` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 20895.22265625, 'hp_metric': 20895.22265625}\n",
      "spotpython tuning: 4636.91552734375 [##########] 100.00% Done...\r\n",
      "\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | tuned               | transform             |   importance | stars   |\n",
      "|----------------|--------|-----------|---------|---------|---------------------|-----------------------|--------------|---------|\n",
      "| l1             | int    | 3         |     3.0 |     8.0 | 4.0                 | transform_power_2_int |       100.00 | ***     |\n",
      "| epochs         | int    | 4         |     4.0 |     9.0 | 7.0                 | transform_power_2_int |       100.00 | ***     |\n",
      "| batch_size     | int    | 4         |     1.0 |     4.0 | 2.0                 | transform_power_2_int |       100.00 | ***     |\n",
      "| act_fn         | factor | ReLU      |     0.0 |     5.0 | Swish               | None                  |       100.00 | ***     |\n",
      "| optimizer      | factor | SGD       |     0.0 |    11.0 | Adagrad             | None                  |       100.00 | ***     |\n",
      "| dropout_prob   | float  | 0.01      |     0.0 |    0.25 | 0.08633126164944027 | None                  |       100.00 | ***     |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |    10.0 | 5.496437531342211   | None                  |       100.00 | ***     |\n",
      "| patience       | int    | 2         |     2.0 |     6.0 | 3.0                 | transform_power_2_int |       100.00 | ***     |\n",
      "| initialization | factor | Default   |     0.0 |     4.0 | kaiming_normal      | None                  |       100.00 | ***     |\n",
      "l1:  100.0\n",
      "epochs:  100.0\n",
      "batch_size:  100.0\n",
      "act_fn:  100.0\n",
      "optimizer:  100.0\n",
      "dropout_prob:  100.0\n",
      "lr_mult:  100.0\n",
      "patience:  100.0\n",
      "initialization:  100.0\n",
      "impo: [['l1', 100.0], ['epochs', 100.0], ['batch_size', 100.0], ['act_fn', 100.0], ['optimizer', 100.0], ['dropout_prob', 100.0], ['lr_mult', 100.0], ['patience', 100.0], ['initialization', 100.0]]\n",
      "indices: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n",
      "indices after max_imp selection: [0, 1, 2]\n"
     ]
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "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5MRvsfSzBlf6/gGfR1SWCmVuZHN0cmVhbQplbmRvYmoKMTUgMCBvYmoKPDwgL1R5cGUgL0ZvbnQgL0Jhc2VGb250IC9CTVFRRFYrRGVqYVZ1U2FucyAvRmlyc3RDaGFyIDAgL0xhc3RDaGFyIDI1NQovRm9udERlc2NyaXB0b3IgMTQgMCBSIC9TdWJ0eXBlIC9UeXBlMyAvTmFtZSAvQk1RUURWK0RlamFWdVNhbnMKL0ZvbnRCQm94IFsgLTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvRm9udE1hdHJpeCBbIDAuMDAxIDAgMCAwLjAwMSAwIDAgXQovQ2hhclByb2NzIDE2IDAgUgovRW5jb2RpbmcgPDwgL1R5cGUgL0VuY29kaW5nCi9EaWZmZXJlbmNlcyBbIDMyIC9zcGFjZSA0NiAvcGVyaW9kIDQ4IC96ZXJvIC9vbmUgL3R3byAvdGhyZWUgL2ZvdXIgL2ZpdmUgL3NpeCAvc2V2ZW4KL2VpZ2h0IDU4IC9jb2xvbiA5NSAvdW5kZXJzY29yZSA5NyAvYSAvYiAvYyAxMDEgL2UgMTA0IC9oIC9pIDEwOCAvbCAxMTUgL3MKL3QgMTIwIC94IDEyMiAveiBdCj4+Ci9XaWR0aHMgMTMgMCBSID4+CmVuZG9iagoxNCAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0ZvbnROYW1lIC9CTVFRRFYrRGVqYVZ1U2FucyAvRmxhZ3MgMzIKL0ZvbnRCQm94IFsgLTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvQXNjZW50IDkyOSAvRGVzY2VudCAtMjM2IC9DYXBIZWlnaHQgMAovWEhlaWdodCAwIC9JdGFsaWNBbmdsZSAwIC9TdGVtViAwIC9NYXhXaWR0aCAxMzQyID4+CmVuZG9iagoxMyAwIG9iagpbIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwCjYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgMzE4IDQwMSA0NjAgODM4IDYzNgo5NTAgNzgwIDI3NSAzOTAgMzkwIDUwMCA4MzggMzE4IDM2MSAzMTggMzM3IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYKNjM2IDYzNiAzMzcgMzM3IDgzOCA4MzggODM4IDUzMSAxMDAwIDY4NCA2ODYgNjk4IDc3MCA2MzIgNTc1IDc3NSA3NTIgMjk1CjI5NSA2NTYgNTU3IDg2MyA3NDggNzg3IDYwMyA3ODcgNjk1IDYzNSA2MTEgNzMyIDY4NCA5ODkgNjg1IDYxMSA2ODUgMzkwIDMzNwozOTAgODM4IDUwMCA1MDAgNjEzIDYzNSA1NTAgNjM1IDYxNSAzNTIgNjM1IDYzNCAyNzggMjc4IDU3OSAyNzggOTc0IDYzNCA2MTIKNjM1IDYzNSA0MTEgNTIxIDM5MiA2MzQgNTkyIDgxOCA1OTIgNTkyIDUyNSA2MzYgMzM3IDYzNiA4MzggNjAwIDYzNiA2MDAgMzE4CjM1MiA1MTggMTAwMCA1MDAgNTAwIDUwMCAxMzQyIDYzNSA0MDAgMTA3MCA2MDAgNjg1IDYwMCA2MDAgMzE4IDMxOCA1MTggNTE4CjU5MCA1MDAgMTAwMCA1MDAgMTAwMCA1MjEgNDAwIDEwMjMgNjAwIDUyNSA2MTEgMzE4IDQwMSA2MzYgNjM2IDYzNiA2MzYgMzM3CjUwMCA1MDAgMTAwMCA0NzEgNjEyIDgzOCAzNjEgMTAwMCA1MDAgNTAwIDgzOCA0MDEgNDAxIDUwMCA2MzYgNjM2IDMxOCA1MDAKNDAxIDQ3MSA2MTIgOTY5IDk2OSA5NjkgNTMxIDY4NCA2ODQgNjg0IDY4NCA2ODQgNjg0IDk3NCA2OTggNjMyIDYzMiA2MzIgNjMyCjI5NSAyOTUgMjk1IDI5NSA3NzUgNzQ4IDc4NyA3ODcgNzg3IDc4NyA3ODcgODM4IDc4NyA3MzIgNzMyIDczMiA3MzIgNjExIDYwNQo2MzAgNjEzIDYxMyA2MTMgNjEzIDYxMyA2MTMgOTgyIDU1MCA2MTUgNjE1IDYxNSA2MTUgMjc4IDI3OCAyNzggMjc4IDYxMiA2MzQKNjEyIDYxMiA2MTIgNjEyIDYxMiA4MzggNjEyIDYzNCA2MzQgNjM0IDYzNCA1OTIgNjM1IDU5MiBdCmVuZG9iagoxNiAwIG9iago8PCAvYSAxNyAwIFIgL2IgMTggMCBSIC9jIDE5IDAgUiAvY29sb24gMjAgMCBSIC9lIDIxIDAgUiAvZWlnaHQgMjIgMCBSCi9maXZlIDIzIDAgUiAvZm91ciAyNCAwIFIgL2ggMjUgMCBSIC9pIDI2IDAgUiAvbCAyNyAwIFIgL29uZSAyOSAwIFIKL3BlcmlvZCAzMCAwIFIgL3MgMzEgMCBSIC9zZXZlbiAzMiAwIFIgL3NpeCAzMyAwIFIgL3NwYWNlIDM0IDAgUiAvdCAzNSAwIFIKL3RocmVlIDM2IDAgUiAvdHdvIDM3IDAgUiAvdW5kZXJzY29yZSAzOCAwIFIgL3ggMzkgMCBSIC96IDQwIDAgUgovemVybyA0MSAwIFIgPj4KZW5kb2JqCjMgMCBvYmoKPDwgL0YxIDE1IDAgUiA+PgplbmRvYmoKNCAwIG9iago8PCAvQTEgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMCAvY2EgMSA+PgovQTIgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMSAvY2EgMSA+PgovQTMgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMC41IC9jYSAwLjUgPj4KL0E0IDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDEgL2NhIDAuOSA+PiA+PgplbmRvYmoKNSAwIG9iago8PCA+PgplbmRvYmoKNiAwIG9iago8PCA+PgplbmRvYmoKNyAwIG9iago8PCAvRjEtRGVqYVZ1U2Fucy1taW51cyAyOCAwIFIgPj4KZW5kb2JqCjIgMCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9LaWRzIFsgMTEgMCBSIF0gL0NvdW50IDEgPj4KZW5kb2JqCjQyIDAgb2JqCjw8IC9DcmVhdG9yIChNYXRwbG90bGliIHYzLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZykKL1Byb2R1Y2VyIChNYXRwbG90bGliIHBkZiBiYWNrZW5kIHYzLjkuMikKL0NyZWF0aW9uRGF0ZSAoRDoyMDI0MTAyMTEwMTYyOCswMicwMCcpID4+CmVuZG9iagp4cmVmCjAgNDMKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDE2IDAwMDAwIG4gCjAwMDAwMzkyODAgMDAwMDAgbiAKMDAwMDAzODk3NCAwMDAwMCBuIAowMDAwMDM5MDA2IDAwMDAwIG4gCjAwMDAwMzkxODkgMDAwMDAgbiAKMDAwMDAzOTIxMCAwMDAwMCBuIAowMDAwMDM5MjMxIDAwMDAwIG4gCjAwMDAwMDAwNjUgMDAwMDAgbiAKMDAwMDAwMDM0OCAwMDAwMCBuIAowMDAwMDMwODQwIDAwMDAwIG4gCjAwMDAwMDAyMDggMDAwMDAgbiAKMDAwMDAzMDgxOCAwMDAwMCBuIAowMDAwMDM3NjEwIDAwMDAwIG4gCjAwMDAwMzc0MDMgMDAwMDAgbiAKMDAwMDAzNjkzMyAwMDAwMCBuIAowMDAwMDM4NjYzIDAwMDAwIG4gCjAwMDAwMzA4NjAgMDAwMDAgbiAKMDAwMDAzMTI0MCAwMDAwMCBuIAowMDAwMDMxNTU3IDAwMDAwIG4gCjAwMDAwMzE4NjIgMDAwMDAgbiAKMDAwMDAzMjAwNyAwMDAwMCBuIAowMDAwMDMyMzI5IDAwMDAwIG4gCjAwMDAwMzI3OTcgMDAwMDAgbiAKMDAwMDAzMzExOSAwMDAwMCBuIAowMDAwMDMzMjg1IDAwMDAwIG4gCjAwMDAwMzM1MjIgMDAwMDAgbiAKMDAwMDAzMzY2NiAwMDAwMCBuIAowMDAwMDMzNzg1IDAwMDAwIG4gCjAwMDAwMzM5NTcgMDAwMDAgbiAKMDAwMDAzNDExMiAwMDAwMCBuIAowMDAwMDM0MjM1IDAwMDAwIG4gCjAwMDAwMzQ2NDIgMDAwMDAgbiAKMDAwMDAzNDc4NCAwMDAwMCBuIAowMDAwMDM1MTc3IDAwMDAwIG4gCjAwMDAwMzUyNjcgMDAwMDAgbiAKMDAwMDAzNTQ3MyAwMDAwMCBuIAowMDAwMDM1ODg2IDAwMDAwIG4gCjAwMDAwMzYyMTAgMDAwMDAgbiAKMDAwMDAzNjMzNiAwMDAwMCBuIAowMDAwMDM2NDk3IDAwMDAwIG4gCjAwMDAwMzY2NDUgMDAwMDAgbiAKMDAwMDAzOTM0MCAwMDAwMCBuIAp0cmFpbGVyCjw8IC9TaXplIDQzIC9Sb290IDEgMCBSIC9JbmZvIDQyIDAgUiA+PgpzdGFydHhyZWYKMzk0OTcKJSVFT0YK",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| label: 601_user_model_run\n",
    "res = spot_tuner.run()\n",
    "print(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n",
    "spot_tuner.plot_important_hyperparameter_contour(max_imp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3598eadc",
   "metadata": {},
   "source": [
    "## Details\n",
    "\n",
    "### Model Setup\n",
    "\n",
    "By using `core_model_name = \"my_regressor.MyRegressor\"`, the user specified model class `MyRegressor` [[SOURCE]](https://github.com/sequential-parameter-optimization/Hyperparameter-Tuning-Cookbook/blob/main/userModel/my_regressor.py) is selected.\n",
    "For this given `core_model_name`, the local hyper_dict is loaded using the `my_hyper_dict.py` file as shown below.\n",
    "\n",
    "### The `my_hyper_dict.py` File {#sec-my-hyper-dict}\n",
    "\n",
    "The `my_hyper_dict.py` file  must be placed in the `/userModel` directory.  It provides a convenience function to load the hyperparameters from user specified the `my_hyper_dict.json` file, see @sec-my-hyper-dict.\n",
    "The user does not need to modify this file, if the JSON file is stored as `my_hyper_dict.json`. \n",
    "Alternative filenames can be specified via the `filename` argument (which is default set to `\"my_hyper_dict.json\"`).\n",
    "\n",
    "### The `my_hyper_dict.json` File {#sec-my-hyper-dict-json}\n",
    "\n",
    "The `my_hyper_dict.json` file contains the hyperparameter settings as a dictionary, which are loaded via the `my_hyper_dict.py` file.\n",
    "The example below shows the content of the `my_hyper_dict.json` file.\n",
    "```json\n",
    "{\n",
    "    \"MyRegressor\": {\n",
    "        \"l1\": {\n",
    "            \"type\": \"int\",\n",
    "            \"default\": 3,\n",
    "            \"transform\": \"transform_power_2_int\",\n",
    "            \"lower\": 3,\n",
    "            \"upper\": 8\n",
    "        },\n",
    "        \"epochs\": {\n",
    "            \"type\": \"int\",\n",
    "            \"default\": 4,\n",
    "            \"transform\": \"transform_power_2_int\",\n",
    "            \"lower\": 4,\n",
    "            \"upper\": 9\n",
    "        },\n",
    "        \"batch_size\": {\n",
    "            \"type\": \"int\",\n",
    "            \"default\": 4,\n",
    "            \"transform\": \"transform_power_2_int\",\n",
    "            \"lower\": 1,\n",
    "            \"upper\": 4\n",
    "        },\n",
    "        \"act_fn\": {\n",
    "            \"levels\": [\n",
    "                \"Sigmoid\",\n",
    "                \"Tanh\",\n",
    "                \"ReLU\",\n",
    "                \"LeakyReLU\",\n",
    "                \"ELU\",\n",
    "                \"Swish\"\n",
    "            ],\n",
    "            \"type\": \"factor\",\n",
    "            \"default\": \"ReLU\",\n",
    "            \"transform\": \"None\",\n",
    "            \"class_name\": \"spotpython.torch.activation\",\n",
    "            \"core_model_parameter_type\": \"instance()\",\n",
    "            \"lower\": 0,\n",
    "            \"upper\": 5\n",
    "        },\n",
    "        \"optimizer\": {\n",
    "            \"levels\": [\n",
    "                \"Adadelta\",\n",
    "                \"Adagrad\",\n",
    "                \"Adam\",\n",
    "                \"AdamW\",\n",
    "                \"SparseAdam\",\n",
    "                \"Adamax\",\n",
    "                \"ASGD\",\n",
    "                \"NAdam\",\n",
    "                \"RAdam\",\n",
    "                \"RMSprop\",\n",
    "                \"Rprop\",\n",
    "                \"SGD\"\n",
    "            ],\n",
    "            \"type\": \"factor\",\n",
    "            \"default\": \"SGD\",\n",
    "            \"transform\": \"None\",\n",
    "            \"class_name\": \"torch.optim\",\n",
    "            \"core_model_parameter_type\": \"str\",\n",
    "            \"lower\": 0,\n",
    "            \"upper\": 11\n",
    "        },\n",
    "        \"dropout_prob\": {\n",
    "            \"type\": \"float\",\n",
    "            \"default\": 0.01,\n",
    "            \"transform\": \"None\",\n",
    "            \"lower\": 0.0,\n",
    "            \"upper\": 0.25\n",
    "        },\n",
    "        \"lr_mult\": {\n",
    "            \"type\": \"float\",\n",
    "            \"default\": 1.0,\n",
    "            \"transform\": \"None\",\n",
    "            \"lower\": 0.1,\n",
    "            \"upper\": 10.0\n",
    "        },\n",
    "        \"patience\": {\n",
    "            \"type\": \"int\",\n",
    "            \"default\": 2,\n",
    "            \"transform\": \"transform_power_2_int\",\n",
    "            \"lower\": 2,\n",
    "            \"upper\": 6\n",
    "        },\n",
    "        \"initialization\": {\n",
    "            \"levels\": [\n",
    "                \"Default\",\n",
    "                \"Kaiming\",\n",
    "                \"Xavier\"\n",
    "            ],\n",
    "            \"type\": \"factor\",\n",
    "            \"default\": \"Default\",\n",
    "            \"transform\": \"None\",\n",
    "            \"core_model_parameter_type\": \"str\",\n",
    "            \"lower\": 0,\n",
    "            \"upper\": 2\n",
    "        }\n",
    "    }\n",
    "}\n",
    "```\n",
    "\n",
    "### The `my_regressor.py` File {#sec-my-regressor}\n",
    "\n",
    "The `my_regressor.py` file contains [[SOURCE]](https://github.com/sequential-parameter-optimization/Hyperparameter-Tuning-Cookbook/blob/main/userModel/my_regressor.py) the model class, which is a subclass of `nn.Module`. It must implement the following methods:\n",
    "\n",
    "* `__init__(self, **kwargs)`: The constructor of the model class. The hyperparameters are passed as keyword arguments.\n",
    "* `forward(self, x: torch.Tensor) -> torch.Tensor`: The forward pass of the model. The input `x` is passed through the model and the output is returned.\n",
    "* `training_step(self, batch, batch_idx) -> torch.Tensor`: The training step of the model. It takes a batch of data and the batch index as input and returns the loss.\n",
    "* `validation_step(self, batch, batch_idx) -> torch.Tensor`: The validation step of the model. It takes a batch of data and the batch index as input and returns the loss.\n",
    "* `test_step(self, batch, batch_idx) -> torch.Tensor`: The test step of the model. It takes a batch of data and the batch index as input and returns the loss.\n",
    "* `predict(self, x: torch.Tensor) -> torch.Tensor`: The prediction method of the model. It takes an input `x` and returns the prediction.\n",
    "* `configure_optimizers(self) -> torch.optim.Optimizer`: The method to configure the optimizer of the model. It returns the optimizer.\n",
    "\n",
    "The file `my_regressor.py` must be placed in the `/userModel` directory. The user can modify the model class to implement a custom model architecture.\n",
    "\n",
    "We will take a closer look at the methods defined in the `my_regressor.py` file in the next subsections.\n",
    "\n",
    "#### The `__init__` Method\n",
    "\n",
    "`__init__()` initializes the `MyRegressor` object. It takes the following arguments:\n",
    "\n",
    "* `l1` (int): The number of neurons in the first hidden layer.\n",
    "* `epochs` (int): The number of epochs to train the model for.\n",
    "* `batch_size` (int): The batch size to use during training.\n",
    "* `initialization` (str): The initialization method to use for the weights.\n",
    "* `act_fn` (nn.Module): The activation function to use in the hidden layers.\n",
    "* `optimizer` (str): The optimizer to use during training.\n",
    "* `dropout_prob` (float): The probability of dropping out a neuron during training.\n",
    "* `lr_mult` (float): The learning rate multiplier for the optimizer.\n",
    "* `patience` (int): The number of epochs to wait before early stopping.\n",
    "* `_L_in` (int): The number of input features. Not a hyperparameter, but needed to create the network.\n",
    "* `_L_out` (int): The number of output classes. Not a hyperparameter, but needed to create the network.\n",
    "* `_torchmetric` (str): The metric to use for the loss function. If `None`, then \"mean_squared_error\" is used.\n",
    "\n",
    "It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "user_model_init",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_init\n",
    "#| eval: false\n",
    "class MyRegressor(L.LightningModule):\n",
    "        def __init__(\n",
    "        self,\n",
    "        l1: int,\n",
    "        epochs: int,\n",
    "        batch_size: int,\n",
    "        initialization: str,\n",
    "        act_fn: nn.Module,\n",
    "        optimizer: str,\n",
    "        dropout_prob: float,\n",
    "        lr_mult: float,\n",
    "        patience: int,\n",
    "        _L_in: int,\n",
    "        _L_out: int,\n",
    "        _torchmetric: str,\n",
    "    ):\n",
    "        super().__init__()\n",
    "        self._L_in = _L_in\n",
    "        self._L_out = _L_out\n",
    "        if _torchmetric is None:\n",
    "            _torchmetric = \"mean_squared_error\"\n",
    "        self._torchmetric = _torchmetric\n",
    "        self.metric = getattr(torchmetrics.functional.regression, _torchmetric)\n",
    "        # _L_in and _L_out are not hyperparameters, but are needed to create the network\n",
    "        # _torchmetric is not a hyperparameter, but is needed to calculate the loss\n",
    "        self.save_hyperparameters(ignore=[\"_L_in\", \"_L_out\", \"_torchmetric\"])\n",
    "        # set dummy input array for Tensorboard Graphs\n",
    "        # set log_graph=True in Trainer to see the graph (in traintest.py)\n",
    "        self.example_input_array = torch.zeros((batch_size, self._L_in))\n",
    "        if self.hparams.l1 < 4:\n",
    "            raise ValueError(\"l1 must be at least 4\")\n",
    "        hidden_sizes = self._get_hidden_sizes()\n",
    "        # Create the network based on the specified hidden sizes\n",
    "        layers = []\n",
    "        layer_sizes = [self._L_in] + hidden_sizes\n",
    "        layer_size_last = layer_sizes[0]\n",
    "        for layer_size in layer_sizes[1:]:\n",
    "            layers += [\n",
    "                nn.Linear(layer_size_last, layer_size),\n",
    "                self.hparams.act_fn,\n",
    "                nn.Dropout(self.hparams.dropout_prob),\n",
    "            ]\n",
    "            layer_size_last = layer_size\n",
    "        layers += [nn.Linear(layer_sizes[-1], self._L_out)]\n",
    "        # nn.Sequential summarizes a list of modules into a single module,\n",
    "        # applying them in sequence\n",
    "        self.layers = nn.Sequential(*layers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "525ef7c5",
   "metadata": {},
   "source": [
    "#### The `_get_hidden_sizes` Method\n",
    "\n",
    "`__init__()` uses the helper method `_get_hidden_sizes()` to calculate the hidden layer sizes based on the number of neurons in the first hidden layer `l1`. The hidden layer sizes are calculated as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "user_model_get_hidden_sizes",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_get_hidden_sizes\n",
    "#| eval: false\n",
    "def _get_hidden_sizes(self):\n",
    "    # Calculate the hidden layer sizes based on the number of neurons in the first hidden layer\n",
    "    hidden_sizes = [self.hparams.l1]\n",
    "    while hidden_sizes[-1] > 2:\n",
    "        hidden_sizes.append(hidden_sizes[-1] // 2)\n",
    "    return hidden_sizes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a304285",
   "metadata": {},
   "source": [
    "#### The `forward` Method\n",
    "\n",
    "The `forward()` method defines the forward pass of the model. It takes an input tensor `x` and passes it through the network layers to produce an output tensor. It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "user_model_forward",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_forward\n",
    "#| eval: false\n",
    "def forward(self, x: torch.Tensor) -> torch.Tensor:\n",
    "    return self.layers(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60d9139e",
   "metadata": {},
   "source": [
    "#### The `_calculate_loss` Method\n",
    "\n",
    "The `_calculate_loss()` method calculates the loss based on the predicted output and the target values. It uses the specified metric to calculate the loss. \n",
    "It takes the following arguments:\n",
    "\n",
    "* `batch (tuple)`: A tuple containing a batch of input data and labels.\n",
    "\n",
    "It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "user_model_calculate_loss",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_calculate_loss\n",
    "#| eval: false\n",
    "def _calculate_loss(self, batch):\n",
    "    x, y = batch\n",
    "    y = y.view(len(y), 1)\n",
    "    y_hat = self(x)\n",
    "    loss = self.metric(y_hat, y)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8d1eccb",
   "metadata": {},
   "source": [
    "#### The `training_step` Method\n",
    "\n",
    "The `training_step()` method defines the training step of the model. It takes a batch of data and returns the loss. It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "user_model_training_step",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_training_step\n",
    "#| eval: false\n",
    "def training_step(self, batch: tuple) -> torch.Tensor:\n",
    "    val_loss = self._calculate_loss(batch)\n",
    "    return val_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6de6c7fa",
   "metadata": {},
   "source": [
    "#### The `validation_step` Method\n",
    "\n",
    "The `validation_step()` method defines the validation step of the model. It takes a batch of data and returns the loss. It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "user_model_validation_step",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_validation_step\n",
    "#| eval: false\n",
    "def validation_step(self, batch: tuple) -> torch.Tensor:\n",
    "    val_loss = self._calculate_loss(batch)\n",
    "    return val_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "405a8fb3",
   "metadata": {},
   "source": [
    "#### The `test_step` Method\n",
    "\n",
    "The `test_step()` method defines the test step of the model. It takes a batch of data and returns the loss. It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "user_model_test_step",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_test_step\n",
    "#| eval: false\n",
    "def test_step(self, batch: tuple) -> torch.Tensor:\n",
    "    val_loss = self._calculate_loss(batch)\n",
    "    return val_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "171ddf70",
   "metadata": {},
   "source": [
    "#### The `predict` Method\n",
    "\n",
    "The `predict()` method defines the prediction method of the model. It takes an input tensor `x` and returns \n",
    "a tuple with the input tensor `x`, the target tensor `y`, and the predicted tensor `y_hat`.\n",
    "\n",
    " It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "user_model_predict",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_predict\n",
    "#| eval: false\n",
    "def predict(self, x: torch.Tensor) -> torch.Tensor:\n",
    "    x, y = batch\n",
    "    yhat = self(x)\n",
    "    y = y.view(len(y), 1)\n",
    "    yhat = yhat.view(len(yhat), 1)\n",
    "    return (x, y, yhat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85466d5c",
   "metadata": {},
   "source": [
    "#### The `configure_optimizers` Method\n",
    "\n",
    "The `configure_optimizers()` method defines the optimizer to use during training.\n",
    "It uses the `optimizer_handler` from `spotpython.hyperparameter.optimizer` to create the optimizer based on the specified optimizer name, parameters, and learning rate multiplier.\n",
    "It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "user_model_configure_optimizers",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_configure_optimizers\n",
    "#| eval: false\n",
    "def configure_optimizers(self) -> torch.optim.Optimizer:\n",
    "    optimizer = optimizer_handler(\n",
    "        optimizer_name=self.hparams.optimizer, params=self.parameters(), lr_mult=self.hparams.lr_mult\n",
    "    )\n",
    "    return optimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a59de133",
   "metadata": {},
   "source": [
    "Note, the default Lightning way is to define an optimizer as\n",
    "`optimizer = torch.optim.Adam(self.parameters(), lr=self.learning_rate)`.\n",
    "`spotpython` uses an optimizer handler to create the optimizer, which adapts the learning rate according to the `lr_mult` hyperparameter as\n",
    "well as other hyperparameters. See `spotpython.hyperparameters.optimizer.py` [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotpython/hyperparameters/optimizer.py) for details.\n",
    "\n",
    "## Connection with the LightDataModule\n",
    "\n",
    "The steps described in @sec-my-regressor are connected to the `LightDataModule` class [[DOC]](https://sequential-parameter-optimization.github.io/spotPython/reference/spotpython/data/lightdatamodule/).\n",
    "This class is used to create the data loaders for the training, validation, and test sets.\n",
    "The `LightDataModule` class is part of the `spotpython` package and class provides the following methods [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotpython/data/lightdatamodule.py):\n",
    "\n",
    "* `prepare_data()`: This method is used to prepare the data set.\n",
    "* `setup()`: This method is used to create the data loaders for the training, validation, and test sets.\n",
    "* `train_dataloader()`: This method is used to return the data loader for the training set.\n",
    "* `val_dataloader()`: This method is used to return the data loader for the validation set.\n",
    "* `test_dataloader()`: This method is used to return the data loader for the test set.\n",
    "* `predict_dataloader()`: This method is used to return the data loader for the prediction set.\n",
    "\n",
    "### The `prepare_data()` Method\n",
    "\n",
    "The `prepare_data()` method is used to prepare the data set.\n",
    "This method is called only once and on a single process.\n",
    "It can be used to download the data set. In our case, the data set is already available, so this method uses a simple `pass` statement.\n",
    "\n",
    "### The `setup()` Method\n",
    "\n",
    "The `stage` is used to define the data set to be returned. It \n",
    "can be `None`, `fit`, `test`, or `predict`.\n",
    "If `stage` is `None`, the method returns the training (`fit`),\n",
    "testing (`test`), and prediction (`predict`) data sets.\n",
    "\n",
    "The `setup` methods splits the data based on the `stage` setting for use in training, validation, and testing.\n",
    "It uses `torch.utils.data.random_split()` to split the data.\n",
    "\n",
    "Splitting is based on the `test_size` and `test_seed`. \n",
    "The `test_size` can be a float or an int.\n",
    "\n",
    "First, the data set sizes are determined as described in @sec-determine-sizes-601.\n",
    "Then, the data sets are split based on the `stage` setting.\n",
    "`spotpython`'s `LightDataModule` class uses the following sizes:\n",
    "\n",
    "* `full_train_size`: The size of the full training data set. This data set is splitted into the final training data set and a validation data set.\n",
    "* `val_size`: The size of the validation data set. The validation data set is used to validate the model during training.\n",
    "* `train_size`: The size of the training data set. The training data set is used to train the model.\n",
    "* `test_size`: The size of the test data set. The test data set is used to evaluate the model after training. It is not used during training (\"hyperparameter tuning\"). Only after everything is finished, the model is evaluated on the test data set.\n",
    "\n",
    "#### Determine the Sizes of the Data Sets {#sec-determine-sizes-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "user_data_module_setup",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LightDataModule setup(): full_train_size: 0.6\n",
      "LightDataModule setup(): val_size: 0.24\n",
      "LightDataModule setup(): train_size: 0.36\n",
      "LightDataModule setup(): test_size: 0.4\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_data_module_setup\n",
    "import torch\n",
    "from torch.utils.data import random_split\n",
    "data_full = Diabetes()\n",
    "test_size = fun_control[\"test_size\"]\n",
    "test_seed=fun_control[\"test_seed\"]\n",
    "# if test_size is float, then train_size is 1 - test_size\n",
    "if isinstance(test_size, float):\n",
    "    full_train_size = round(1.0 - test_size, 2)\n",
    "    val_size = round(full_train_size * test_size, 2)\n",
    "    train_size = round(full_train_size - val_size, 2)\n",
    "else:\n",
    "    # if test_size is int, then train_size is len(data_full) - test_size\n",
    "    full_train_size = len(data_full) - test_size\n",
    "    val_size = int(full_train_size * test_size / len(data_full))\n",
    "    train_size = full_train_size - val_size\n",
    "\n",
    "print(f\"LightDataModule setup(): full_train_size: {full_train_size}\")\n",
    "print(f\"LightDataModule setup(): val_size: {val_size}\")\n",
    "print(f\"LightDataModule setup(): train_size: {train_size}\")\n",
    "print(f\"LightDataModule setup(): test_size: {test_size}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "795bcf35",
   "metadata": {},
   "source": [
    "#### The \"setup\" Method: Stage \"fit\" {#sec-stage-fit-601}\n",
    "\n",
    "Here, `train_size` and `val_size` are used to split the data into training and validation sets.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "user_data_module_setup_fit",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_size: 0.36, val_size: 0.24 used for train & val data.\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_data_module_setup_fit\n",
    "stage = \"fit\"\n",
    "scaler = None\n",
    "# Assign train/val datasets for use in dataloaders\n",
    "if stage == \"fit\" or stage is None:\n",
    "    print(f\"train_size: {train_size}, val_size: {val_size} used for train & val data.\")\n",
    "    generator_fit = torch.Generator().manual_seed(test_seed)\n",
    "    data_train, data_val, _ = random_split(\n",
    "        data_full, [train_size, val_size, test_size], generator=generator_fit\n",
    "    )\n",
    "    if scaler is not None:\n",
    "        # Fit the scaler on training data and transform both train and val data\n",
    "        scaler_train_data = torch.stack([data_train[i][0] for i in range(len(data_train))]).squeeze(1)\n",
    "        # train_val_data = data_train[:,0]\n",
    "        print(scaler_train_data.shape)\n",
    "        scaler.fit(scaler_train_data)\n",
    "        data_train = [(scaler.transform(data), target) for data, target in data_train]\n",
    "        data_tensors_train = [data.clone().detach() for data, target in data_train]\n",
    "        target_tensors_train = [target.clone().detach() for data, target in data_train]\n",
    "        data_train = TensorDataset(\n",
    "            torch.stack(data_tensors_train).squeeze(1), torch.stack(target_tensors_train)\n",
    "        )\n",
    "        # print(data_train)\n",
    "        data_val = [(scaler.transform(data), target) for data, target in data_val]\n",
    "        data_tensors_val = [data.clone().detach() for data, target in data_val]\n",
    "        target_tensors_val = [target.clone().detach() for data, target in data_val]\n",
    "        data_val = TensorDataset(torch.stack(data_tensors_val).squeeze(1), torch.stack(target_tensors_val))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e017d392",
   "metadata": {},
   "source": [
    "The `data_train` and `data_val` data sets are further used to create the training and validation data loaders as \n",
    "described in @sec-train-dataloader-601 and @sec-val-dataloader-601, respectively.\n",
    "\n",
    "#### The \"setup\" Method: Stage \"test\" {#sec-stage-test-601}\n",
    "\n",
    "Here, the test data set, which is based on the `test_size`, is created.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "user_data_module_setup_test",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_size: 0.4 used for test dataset.\n",
      "LightDataModule setup(): Test set size: 177\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0490, -0.0446, -0.0418,  0.1045,  0.0356, -0.0257,  0.1775, -0.0764,\n",
      "         -0.0129,  0.0155],\n",
      "        [-0.0273,  0.0507, -0.0159, -0.0298,  0.0039, -0.0007,  0.0413, -0.0395,\n",
      "         -0.0236,  0.0113],\n",
      "        [ 0.0708,  0.0507, -0.0170,  0.0219,  0.0438,  0.0563,  0.0376, -0.0026,\n",
      "         -0.0702, -0.0176],\n",
      "        [-0.0382,  0.0507,  0.0714, -0.0573,  0.1539,  0.1559,  0.0008,  0.0719,\n",
      "          0.0503,  0.0693],\n",
      "        [ 0.0453, -0.0446,  0.0391,  0.0460,  0.0067, -0.0242,  0.0081, -0.0126,\n",
      "          0.0643,  0.0569]])\n",
      "Targets: tensor([103.,  53.,  80., 220., 246.])\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_data_module_setup_test\n",
    "stage = \"test\"\n",
    "# Assign test dataset for use in dataloader(s)\n",
    "if stage == \"test\" or stage is None:\n",
    "    print(f\"test_size: {test_size} used for test dataset.\")\n",
    "    # get test data set as test_abs percent of the full dataset\n",
    "    generator_test = torch.Generator().manual_seed(test_seed)\n",
    "    data_test, _ = random_split(data_full, [test_size, full_train_size], generator=generator_test)\n",
    "    if scaler is not None:\n",
    "        data_test = [(scaler.transform(data), target) for data, target in data_test]\n",
    "        data_tensors_test = [data.clone().detach() for data, target in data_test]\n",
    "        target_tensors_test = [target.clone().detach() for data, target in data_test]\n",
    "        data_test = TensorDataset(\n",
    "            torch.stack(data_tensors_test).squeeze(1), torch.stack(target_tensors_test)\n",
    "        )\n",
    "print(f\"LightDataModule setup(): Test set size: {len(data_test)}\")\n",
    "# Set batch size for DataLoader\n",
    "batch_size = 5\n",
    "# Create DataLoader\n",
    "from torch.utils.data import DataLoader\n",
    "dataloader = DataLoader(data_test, batch_size=batch_size, shuffle=False)\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dataloader:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb2e0d76",
   "metadata": {},
   "source": [
    "#### The \"setup\" Method: Stage \"predict\" {#sec-stage-predict-601}\n",
    "\n",
    "Prediction and testing use the same data set.\n",
    "The prediction data set is created based on the `test_size`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "user_data_module_setup_predict",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_size: 0.4 used for predict dataset.\n",
      "LightDataModule setup(): Predict set size: 177\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0490, -0.0446, -0.0418,  0.1045,  0.0356, -0.0257,  0.1775, -0.0764,\n",
      "         -0.0129,  0.0155],\n",
      "        [-0.0273,  0.0507, -0.0159, -0.0298,  0.0039, -0.0007,  0.0413, -0.0395,\n",
      "         -0.0236,  0.0113],\n",
      "        [ 0.0708,  0.0507, -0.0170,  0.0219,  0.0438,  0.0563,  0.0376, -0.0026,\n",
      "         -0.0702, -0.0176],\n",
      "        [-0.0382,  0.0507,  0.0714, -0.0573,  0.1539,  0.1559,  0.0008,  0.0719,\n",
      "          0.0503,  0.0693],\n",
      "        [ 0.0453, -0.0446,  0.0391,  0.0460,  0.0067, -0.0242,  0.0081, -0.0126,\n",
      "          0.0643,  0.0569]])\n",
      "Targets: tensor([103.,  53.,  80., 220., 246.])\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_data_module_setup_predict\n",
    "stage = \"predict\"\n",
    "if stage == \"predict\" or stage is None:\n",
    "    print(f\"test_size: {test_size} used for predict dataset.\")\n",
    "    # get test data set as test_abs percent of the full dataset\n",
    "    generator_predict = torch.Generator().manual_seed(test_seed)\n",
    "    data_predict, _ = random_split(\n",
    "        data_full, [test_size, full_train_size], generator=generator_predict\n",
    "    )\n",
    "    if scaler is not None:\n",
    "        data_predict = [(scaler.transform(data), target) for data, target in data_predict]\n",
    "        data_tensors_predict = [data.clone().detach() for data, target in data_predict]\n",
    "        target_tensors_predict = [target.clone().detach() for data, target in data_predict]\n",
    "        data_predict = TensorDataset(\n",
    "            torch.stack(data_tensors_predict).squeeze(1), torch.stack(target_tensors_predict)\n",
    "        )\n",
    "print(f\"LightDataModule setup(): Predict set size: {len(data_predict)}\")\n",
    "# Set batch size for DataLoader\n",
    "batch_size = 5\n",
    "# Create DataLoader\n",
    "from torch.utils.data import DataLoader\n",
    "dataloader = DataLoader(data_predict, batch_size=batch_size, shuffle=False)\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dataloader:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3614b147",
   "metadata": {},
   "source": [
    "### The `train_dataloader()` Method {#sec-train-dataloader-601}\n",
    "\n",
    "The method ``train_dataloader` returns the training dataloader, i.e., a Pytorch DataLoader instance using the training dataset.\n",
    "It simply returns a DataLoader with the `data_train` set that was created in the `setup()` method as described in @sec-stage-fit-601.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "865fb66c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "def train_dataloader(self) -> DataLoader:\n",
    "    return DataLoader(data_train, batch_size=batch_size, num_workers=num_workers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc35bf4d",
   "metadata": {},
   "source": [
    "::: {.callout-note}\n",
    "#### Using the `train_dataloader()` Method\n",
    "\n",
    "The `train_dataloader()` method can be used as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "da26bdb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: 160\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0562, -0.0446, -0.0579, -0.0080,  0.0521,  0.0491,  0.0560, -0.0214,\n",
      "         -0.0283,  0.0445],\n",
      "        [ 0.0018, -0.0446, -0.0709, -0.0229, -0.0016, -0.0010,  0.0266, -0.0395,\n",
      "         -0.0225,  0.0072],\n",
      "        [-0.0527, -0.0446,  0.0542, -0.0263, -0.0552, -0.0339, -0.0139, -0.0395,\n",
      "         -0.0741, -0.0591],\n",
      "        [ 0.0054, -0.0446, -0.0482, -0.0126,  0.0012, -0.0066,  0.0634, -0.0395,\n",
      "         -0.0514, -0.0591],\n",
      "        [-0.0527, -0.0446, -0.0094, -0.0057,  0.0397,  0.0447,  0.0266, -0.0026,\n",
      "         -0.0181, -0.0135]])\n",
      "Targets: tensor([158.,  49., 142.,  96.,  59.])\n"
     ]
    }
   ],
   "source": [
    "from spotpython.data.lightdatamodule import LightDataModule\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "dataset = Diabetes(target_type=torch.float)\n",
    "data_module = LightDataModule(dataset=dataset, batch_size=5, test_size=0.4)\n",
    "data_module.setup()\n",
    "print(f\"Training set size: {len(data_module.data_train)}\")\n",
    "dl = data_module.train_dataloader()\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dl:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ad5b863",
   "metadata": {},
   "source": [
    ":::\n",
    "\n",
    "### The `val_dataloader()` Method {#sec-val-dataloader-601}\n",
    "\n",
    "Returns the validation dataloader, i.e., a Pytorch DataLoader instance using the validation dataset.\n",
    "It simply returns a DataLoader with the `data_val` set that was created in the `setup()` method as desccribed in @sec-stage-fit-601.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "645842bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "def val_dataloader(self) -> DataLoader:\n",
    "    return DataLoader(data_val, batch_size=batch_size, num_workers=num_workers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da351e31",
   "metadata": {},
   "source": [
    "::: {.callout-note}\n",
    "#### Using the `val_dataloader()` Method\n",
    "\n",
    "The `val_dataloader()` method can be used as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "802f86b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation set size: 106\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0163, -0.0446,  0.0736, -0.0412, -0.0043, -0.0135, -0.0139, -0.0011,\n",
      "          0.0429,  0.0445],\n",
      "        [ 0.0453, -0.0446,  0.0714,  0.0012, -0.0098, -0.0010,  0.0155, -0.0395,\n",
      "         -0.0412, -0.0715],\n",
      "        [ 0.0308,  0.0507,  0.0326,  0.0494, -0.0401, -0.0436, -0.0692,  0.0343,\n",
      "          0.0630,  0.0031],\n",
      "        [ 0.0235,  0.0507, -0.0396, -0.0057, -0.0484, -0.0333,  0.0118, -0.0395,\n",
      "         -0.1016, -0.0674],\n",
      "        [-0.0091,  0.0507,  0.0013, -0.0022,  0.0796,  0.0701,  0.0339, -0.0026,\n",
      "          0.0267,  0.0818]])\n",
      "Targets: tensor([275., 141., 208.,  78., 142.])\n"
     ]
    }
   ],
   "source": [
    "from spotpython.data.lightdatamodule import LightDataModule\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "dataset = Diabetes(target_type=torch.float)\n",
    "data_module = LightDataModule(dataset=dataset, batch_size=5, test_size=0.4)\n",
    "data_module.setup()\n",
    "print(f\"Validation set size: {len(data_module.data_val)}\")\n",
    "dl = data_module.val_dataloader()\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dl:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfb6699b",
   "metadata": {},
   "source": [
    "::: \n",
    "\n",
    "\n",
    "### The `test_dataloader()` Method\n",
    "\n",
    "Returns the test dataloader, i.e., a Pytorch DataLoader instance using the test dataset.\n",
    "It simply returns a DataLoader with the `data_test` set that was created in the `setup()` method as described in @sec-stage-test-30.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bc449601",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "def test_dataloader(self) -> DataLoader:\n",
    "    return DataLoader(data_test, batch_size=batch_size, num_workers=num_workers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fcda7bc",
   "metadata": {},
   "source": [
    "::: {.callout-note}\n",
    "#### Using the `test_dataloader()` Method\n",
    "\n",
    "The `test_dataloader()` method can be used as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "97d8fcc9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set size: 177\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0562, -0.0446, -0.0579, -0.0080,  0.0521,  0.0491,  0.0560, -0.0214,\n",
      "         -0.0283,  0.0445],\n",
      "        [ 0.0018, -0.0446, -0.0709, -0.0229, -0.0016, -0.0010,  0.0266, -0.0395,\n",
      "         -0.0225,  0.0072],\n",
      "        [-0.0527, -0.0446,  0.0542, -0.0263, -0.0552, -0.0339, -0.0139, -0.0395,\n",
      "         -0.0741, -0.0591],\n",
      "        [ 0.0054, -0.0446, -0.0482, -0.0126,  0.0012, -0.0066,  0.0634, -0.0395,\n",
      "         -0.0514, -0.0591],\n",
      "        [-0.0527, -0.0446, -0.0094, -0.0057,  0.0397,  0.0447,  0.0266, -0.0026,\n",
      "         -0.0181, -0.0135]])\n",
      "Targets: tensor([158.,  49., 142.,  96.,  59.])\n"
     ]
    }
   ],
   "source": [
    "from spotpython.data.lightdatamodule import LightDataModule\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "dataset = Diabetes(target_type=torch.float)\n",
    "data_module = LightDataModule(dataset=dataset, batch_size=5, test_size=0.4)\n",
    "data_module.setup()\n",
    "print(f\"Test set size: {len(data_module.data_test)}\")\n",
    "dl = data_module.test_dataloader()\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dl:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "989b314d",
   "metadata": {},
   "source": [
    "::: \n",
    "\n",
    "### The `predict_dataloader()` Method\n",
    "\n",
    "Returns the prediction dataloader, i.e., a Pytorch DataLoader instance using the prediction dataset.\n",
    "It simply returns a DataLoader with the `data_predict` set that was created in the `setup()` method as described in @sec-stage-predict-30.\n",
    "\n",
    "::: {.callout-warning}\n",
    "The `batch_size` is set to the length of the `data_predict` set.\n",
    ":::"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6cade10d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "def predict_dataloader(self) -> DataLoader:\n",
    "    return DataLoader(data_predict, batch_size=len(data_predict), num_workers=num_workers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "201eba66",
   "metadata": {},
   "source": [
    "::: {.callout-note}\n",
    "#### Using the `predict_dataloader()` Method\n",
    "\n",
    "The `predict_dataloader()` method can be used as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "738ba98e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set size: 177\n",
      "Batch Size: 177\n",
      "Inputs Shape: torch.Size([177, 10])\n",
      "Targets Shape: torch.Size([177])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0562, -0.0446, -0.0579,  ..., -0.0214, -0.0283,  0.0445],\n",
      "        [ 0.0018, -0.0446, -0.0709,  ..., -0.0395, -0.0225,  0.0072],\n",
      "        [-0.0527, -0.0446,  0.0542,  ..., -0.0395, -0.0741, -0.0591],\n",
      "        ...,\n",
      "        [ 0.0090, -0.0446, -0.0321,  ..., -0.0764, -0.0119, -0.0384],\n",
      "        [-0.0273, -0.0446, -0.0666,  ..., -0.0395, -0.0358, -0.0094],\n",
      "        [ 0.0817,  0.0507,  0.0067,  ...,  0.0919,  0.0547,  0.0072]])\n",
      "Targets: tensor([158.,  49., 142.,  96.,  59.,  74., 137., 136.,  39.,  66., 310., 198.,\n",
      "        235., 116.,  55., 177.,  59., 246.,  53., 135.,  88., 198., 186., 217.,\n",
      "         51., 118., 153., 180.,  51., 229.,  84.,  72., 237., 142., 185.,  91.,\n",
      "         88., 148., 179., 144.,  25.,  89.,  42.,  60., 124., 170., 215., 263.,\n",
      "        178., 245., 202.,  97., 321.,  71., 123., 220., 132., 243.,  61., 102.,\n",
      "        187.,  70., 242., 134.,  63.,  72.,  88., 219., 127., 146., 122., 143.,\n",
      "        220., 293.,  59., 317.,  60., 140.,  65., 277.,  90.,  96., 109., 190.,\n",
      "         90.,  52., 160., 233., 230., 175.,  68., 272., 144.,  70.,  68., 163.,\n",
      "         71.,  93., 263., 118., 220.,  90., 232., 120., 163.,  88.,  85.,  52.,\n",
      "        181., 232., 212., 332.,  81., 214., 145., 268., 115.,  93.,  64., 156.,\n",
      "        128., 200., 281., 103., 220.,  66.,  48., 246.,  42., 150., 125., 109.,\n",
      "        129.,  97., 265.,  97., 173., 216., 237., 121.,  42., 151.,  31.,  68.,\n",
      "        137., 221., 283., 124., 243., 150.,  69., 306., 182., 252., 132., 258.,\n",
      "        121., 110., 292., 101., 275., 141., 208.,  78., 142., 185., 167., 258.,\n",
      "        144.,  89., 225., 140., 303., 236.,  87.,  77., 131.])\n"
     ]
    }
   ],
   "source": [
    "from spotpython.data.lightdatamodule import LightDataModule\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "dataset = Diabetes(target_type=torch.float)\n",
    "data_module = LightDataModule(dataset=dataset, batch_size=5, test_size=0.4)\n",
    "data_module.setup()\n",
    "print(f\"Test set size: {len(data_module.data_predict)}\")\n",
    "dl = data_module.predict_dataloader()\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dl:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c47841c8",
   "metadata": {},
   "source": [
    ":::\n",
    "\n",
    "## Using the `LightDataModule` in the `train_model()` Method\n",
    "\n",
    "The methods discussed so far are used in `spotpython`'s  `train_model()` method [[DOC]](https://sequential-parameter-optimization.github.io/spotPython/reference/spotpython/light/trainmodel/) to train the model.\n",
    "It is implemented as follows [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotpython/light/trainmodel.py).\n",
    "\n",
    "First, a `LightDataModule` object is created and the `setup()` method is called."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9d5c80ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "dm = LightDataModule(\n",
    "    dataset=fun_control[\"data_set\"],\n",
    "    batch_size=config[\"batch_size\"],\n",
    "    num_workers=fun_control[\"num_workers\"],\n",
    "    test_size=fun_control[\"test_size\"],\n",
    "    test_seed=fun_control[\"test_seed\"],\n",
    ")\n",
    "dm.setup()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fbfbbe3",
   "metadata": {},
   "source": [
    "Then, the `Trainer` is initialized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2b0bea65",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "# Init trainer\n",
    "trainer = L.Trainer(\n",
    "    default_root_dir=os.path.join(fun_control[\"CHECKPOINT_PATH\"], config_id),\n",
    "    max_epochs=model.hparams.epochs,\n",
    "    accelerator=fun_control[\"accelerator\"],\n",
    "    devices=fun_control[\"devices\"],\n",
    "    logger=TensorBoardLogger(\n",
    "        save_dir=fun_control[\"TENSORBOARD_PATH\"],\n",
    "        version=config_id,\n",
    "        default_hp_metric=True,\n",
    "        log_graph=fun_control[\"log_graph\"],\n",
    "    ),\n",
    "    callbacks=[\n",
    "        EarlyStopping(monitor=\"val_loss\", patience=config[\"patience\"], mode=\"min\", strict=False, verbose=False)\n",
    "    ],\n",
    "    enable_progress_bar=enable_progress_bar,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "990d6259",
   "metadata": {},
   "source": [
    "Next, the `fit()` method is called to train the model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "2d89ed59",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "# Pass the datamodule as arg to trainer.fit to override model hooks :)\n",
    "trainer.fit(model=model, datamodule=dm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb0bcdfe",
   "metadata": {},
   "source": [
    "Finally, the `validate()` method is called to validate the model.\n",
    "The `validate()` method returns the validation loss.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "b9d21d05",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "# Test best model on validation and test set\n",
    "result = trainer.validate(model=model, datamodule=dm)\n",
    "# unlist the result (from a list of one dict)\n",
    "result = result[0]\n",
    "return result[\"val_loss\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab8e7d73",
   "metadata": {},
   "source": [
    "## The Last Connection: The `HyperLight` Class\n",
    "\n",
    "The method `train_model()` is part of the `HyperLight` class [[DOC]](https://sequential-parameter-optimization.github.io/spotPython/reference/spotpython/light/trainmodel/). It is called from `spotpython` as an objective function to train the model and return the validation loss.\n",
    "\n",
    "The `HyperLight` class is implemented as follows [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotpython/fun/hyperlight.py).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "user_hyperlight",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "#| label: 601_user_hyperlight\n",
    "\n",
    "class HyperLight:\n",
    "    def fun(self, X: np.ndarray, fun_control: dict = None) -> np.ndarray:\n",
    "        z_res = np.array([], dtype=float)\n",
    "        self.check_X_shape(X=X, fun_control=fun_control)\n",
    "        var_dict = assign_values(X, get_var_name(fun_control))\n",
    "        for config in generate_one_config_from_var_dict(var_dict, fun_control):\n",
    "            df_eval = train_model(config, fun_control)\n",
    "            z_val = fun_control[\"weights\"] * df_eval\n",
    "            z_res = np.append(z_res, z_val)\n",
    "        return z_res"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6711f4a7",
   "metadata": {},
   "source": [
    "## Further Information \n",
    "\n",
    "### Preprocessing {#sec-preprocessing-601}\n",
    "\n",
    "Preprocessing is handled by `Lightning` and `PyTorch`. It is described in the [LIGHTNINGDATAMODULE](https://lightning.ai/docs/pytorch/stable/data/datamodule.html) documentation. Here you can find information about the `transforms` methods."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/bartz/miniforge3/envs/spot312/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
