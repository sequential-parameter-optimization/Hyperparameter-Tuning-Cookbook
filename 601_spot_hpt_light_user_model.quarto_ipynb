{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dcf0056b",
   "metadata": {},
   "source": [
    "---\n",
    "execute:\n",
    "  cache: false\n",
    "  eval: true\n",
    "  echo: true\n",
    "  warning: false\n",
    "jupyter: python3\n",
    "---\n",
    "\n",
    "\n",
    "# Hyperparameter Tuning with PyTorch Lightning and User Models {#sec-light-user-model-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "user_model_first_imports",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| echo: false\n",
    "#| label: 601_user_model_first_imports\n",
    "import numpy as np\n",
    "import os\n",
    "from math import inf\n",
    "import numpy as np\n",
    "import warnings\n",
    "if not os.path.exists('./figures'):\n",
    "    os.makedirs('./figures')\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "999d9fe7",
   "metadata": {},
   "source": [
    "In this section, we will show how a user defined model can be used for the `PyTorch` Lightning hyperparameter tuning workflow with `spotpython`.\n",
    "\n",
    "## Using a User Specified Model\n",
    "\n",
    "As templates, we provide the following three files that allow the user to specify a model in the `/userModel` directory:\n",
    "\n",
    "* `my_regressor.py`, see @sec-my-regressor\n",
    "* `my_hyperdict.json`, see @sec-my-hyper-dict-json\n",
    "* `my_hyperdict.py`, see @sec-my-hyper-dict.\n",
    "\n",
    "The `my_regressor.py` file contains the model class, which is a subclass of `nn.Module`.\n",
    "The `my_hyperdict.json` file contains the hyperparameter settings as a dictionary, which are loaded via the `my_hyperdict.py` file.\n",
    "\n",
    "Note, that we have to add the path to the `userModel` directory to the `sys.path` list as shown below.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "user_model_imports_sys",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_model_imports_sys\n",
    "import sys\n",
    "sys.path.insert(0, './userModel')\n",
    "import my_regressor\n",
    "import my_hyper_dict\n",
    "from spotpython.hyperparameters.values import add_core_model_to_fun_control\n",
    "\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "from spotpython.hyperdict.light_hyper_dict import LightHyperDict\n",
    "from spotpython.fun.hyperlight import HyperLight\n",
    "from spotpython.utils.init import (fun_control_init, design_control_init)\n",
    "from spotpython.utils.eda import gen_design_table\n",
    "from spotpython.hyperparameters.values import set_hyperparameter\n",
    "from spotpython.spot import spot\n",
    "\n",
    "fun_control = fun_control_init(\n",
    "    PREFIX=\"601-user-model\",\n",
    "    fun_evals=inf,\n",
    "    max_time=1,\n",
    "    data_set = Diabetes(),\n",
    "    _L_in=10,\n",
    "    _L_out=1)\n",
    "\n",
    "add_core_model_to_fun_control(fun_control=fun_control,\n",
    "                              core_model=my_regressor.MyRegressor,\n",
    "                              hyper_dict=my_hyper_dict.MyHyperDict)\n",
    "\n",
    "design_control = design_control_init(init_size=7)\n",
    "\n",
    "fun = HyperLight().fun\n",
    "\n",
    "spot_tuner = spot.Spot(fun=fun,fun_control=fun_control, design_control=design_control)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "user_model_run",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [4, 10]  | [4, 1]   \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 19.8 K | train | [8, 10]  | [8, 1]   \n",
      "---------------------------------------------------------------------\n",
      "19.8 K    Trainable params\n",
      "0         Non-trainable params\n",
      "19.8 K    Total params\n",
      "0.079     Total estimated model params size (MB)\n",
      "47        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [4, 10]  | [4, 1]   \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': nan, 'hp_metric': nan}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 5.4 K  | train | [8, 10]  | [8, 1]   \n",
      "---------------------------------------------------------------------\n",
      "5.4 K     Trainable params\n",
      "0         Non-trainable params\n",
      "5.4 K     Total params\n",
      "0.022     Total estimated model params size (MB)\n",
      "39        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4795.224609375, 'hp_metric': 4795.224609375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=256` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.6 K  | train | [8, 10]  | [8, 1]   \n",
      "---------------------------------------------------------------------\n",
      "1.6 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.6 K     Total params\n",
      "0.006     Total estimated model params size (MB)\n",
      "31        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 19881.609375, 'hp_metric': 19881.609375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 75.9 K | train | [2, 10]  | [2, 1]   \n",
      "---------------------------------------------------------------------\n",
      "75.9 K    Trainable params\n",
      "0         Non-trainable params\n",
      "75.9 K    Total params\n",
      "0.303     Total estimated model params size (MB)\n",
      "55        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': nan, 'hp_metric': nan}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.6 K  | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "1.6 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.6 K     Total params\n",
      "0.006     Total estimated model params size (MB)\n",
      "31        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22673.50390625, 'hp_metric': 22673.50390625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23567.240234375, 'hp_metric': 23567.240234375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [4, 10]  | [4, 1]   \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4667.7060546875, 'hp_metric': 4667.7060546875}\n",
      "spotpython tuning: 4667.7060546875 [#---------] 10.75% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 491    | train | [4, 10]  | [4, 1]   \n",
      "---------------------------------------------------------------------\n",
      "491       Trainable params\n",
      "0         Non-trainable params\n",
      "491       Total params\n",
      "0.002     Total estimated model params size (MB)\n",
      "23        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 8564.896484375, 'hp_metric': 8564.896484375}\n",
      "spotpython tuning: 4667.7060546875 [#######---] 71.48% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 169    | train | [4, 10]  | [4, 1]   \n",
      "---------------------------------------------------------------------\n",
      "169       Trainable params\n",
      "0         Non-trainable params\n",
      "169       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "15        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4786.97119140625, 'hp_metric': 4786.97119140625}\n",
      "spotpython tuning: 4667.7060546875 [########--] 81.81% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 75.9 K | train | [4, 10]  | [4, 1]   \n",
      "---------------------------------------------------------------------\n",
      "75.9 K    Trainable params\n",
      "0         Non-trainable params\n",
      "75.9 K    Total params\n",
      "0.303     Total estimated model params size (MB)\n",
      "55        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4959.9033203125, 'hp_metric': 4959.9033203125}\n",
      "spotpython tuning: 4667.7060546875 [##########] 100.00% Done...\r\n",
      "\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | tuned              | transform             |   importance | stars   |\n",
      "|----------------|--------|-----------|---------|---------|--------------------|-----------------------|--------------|---------|\n",
      "| l1             | int    | 3         |     3.0 |     8.0 | 4.0                | transform_power_2_int |         0.77 | .       |\n",
      "| epochs         | int    | 4         |     4.0 |     9.0 | 7.0                | transform_power_2_int |         0.77 | .       |\n",
      "| batch_size     | int    | 4         |     1.0 |     4.0 | 2.0                | transform_power_2_int |        92.25 | **      |\n",
      "| act_fn         | factor | ReLU      |     0.0 |     5.0 | Swish              | None                  |        24.94 | *       |\n",
      "| optimizer      | factor | SGD       |     0.0 |    11.0 | Adagrad            | None                  |         0.77 | .       |\n",
      "| dropout_prob   | float  | 0.01      |     0.0 |    0.25 | 0.0859555065832669 | None                  |         0.77 | .       |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |    10.0 | 5.442942114443714  | None                  |       100.00 | ***     |\n",
      "| patience       | int    | 2         |     2.0 |     6.0 | 3.0                | transform_power_2_int |         0.77 | .       |\n",
      "| initialization | factor | Default   |     0.0 |     2.0 | Kaiming            | None                  |         0.77 | .       |\n",
      "l1:  0.7704984104186962\n",
      "epochs:  0.7704984104186962\n",
      "batch_size:  92.24549821912215\n",
      "act_fn:  24.93612753081475\n",
      "optimizer:  0.7704984104186962\n",
      "dropout_prob:  0.7704984104186962\n",
      "lr_mult:  100.0\n",
      "patience:  0.7704984104186962\n",
      "initialization:  0.7704984104186962\n",
      "impo: [['l1', 0.7704984104186962], ['epochs', 0.7704984104186962], ['batch_size', 92.24549821912215], ['act_fn', 24.93612753081475], ['optimizer', 0.7704984104186962], ['dropout_prob', 0.7704984104186962], ['lr_mult', 100.0], ['patience', 0.7704984104186962], ['initialization', 0.7704984104186962]]\n",
      "indices: [6, 2, 3, 0, 1, 4, 5, 7, 8]\n",
      "indices after max_imp selection: [6, 2, 3]\n"
     ]
    },
    {
     "data": {
      "application/pdf": "JVBERi0xLjQKJazcIKu6CjEgMCBvYmoKPDwgL1R5cGUgL0NhdGFsb2cgL1BhZ2VzIDIgMCBSID4+CmVuZG9iago4IDAgb2JqCjw8IC9Gb250IDMgMCBSIC9YT2JqZWN0IDcgMCBSIC9FeHRHU3RhdGUgNCAwIFIgL1BhdHRlcm4gNSAwIFIKL1NoYWRpbmcgNiAwIFIgL1Byb2NTZXQgWyAvUERGIC9UZXh0IC9JbWFnZUIgL0ltYWdlQyAvSW1hZ2VJIF0gPj4KZW5kb2JqCjExIDAgb2JqCjw8IC9UeXBlIC9QYWdlIC9QYXJlbnQgMiAwIFIgL1Jlc291cmNlcyA4IDAgUgovTWVkaWFCb3ggWyAwIDAgNjY4LjI4MDI4ODY5NzEgMjAwLjAyMTg3NSBdIC9Db250ZW50cyA5IDAgUiAvQW5ub3RzIDEwIDAgUgo+PgplbmRvYmoKOSAwIG9iago8PCAvTGVuZ3RoIDEyIDAgUiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJy0vUvPbEtyHTavX/EN7YG+3vnO1Iy07AY4k0RAA8EQbLrNJnFLAElZNPzrHSsic2dknYg6t8gjtlp97zp1qvYjM2LFikf+4d/96b//3d/86T/88S+//pf/+PjD/re/+adH+Pp7+u/ffl1ff0///eev8PVH+u/fPi76t+ej1v4d+xX7oH/9Tf9rvK7vK4beCuHX+a9/fjz+78cf/oK+5p/or/3x8cjXd2/8h6l991jom2PP36nG1vPCftNY6IO+D+D+uxvjH/iHrx++Nub0ncc1//MVSviOX//4p6//9PVfv/7wF1Guh/7zXb7+8W/pNnHLf/y6Hgt6PHr5LiPXQb920T/SP7RMVzvoz2vqo2n4t8egf07pGuOEAz2McsV0xVe8fOcWypVf8HB953y1q77i9Hn69qu/4PH6Tm2EEF7x8p1yTyG94Ik+H1oJ5RUv9DprCy+3FejBxlLG6+Vn+ngsIb7i5foOI6f4elulfIeaSny9rUqfT7HF19siPIb7KbdwtSB4oNsqveMx9+82ao5j4j3WmOnzgf6xx5DTxNuIrdLjCfl71NZLW9+Tciz0PaF/XyWVFubvFnpn+P4Y6NIGPZSX64yR/jHk+HJbB7yfgobVQzvg+xFrVL2QA97vT8PqdR/wXh0aVovpgPfa07Baqge8V7aC1T7Q6N40ClU7TKPYyrXwjatXQHCNJQ/c4fU9Bn0Eb7KV71pqHOEFpk/3dvV+whVrqfVeX+Dru+VeYWw0TG+3tZF7fIHpAsMV2zhhers900JtL/A2Wg6sF6CG1XrVsFreJ0yGt/NuUFeiYXXdB7zvUsPqmRzwfoIaVs/7gPfb0bB6lwccv3MaNbVzc9MyyTH29mIL2PKLDR+ZVhfdGF3VP/7tl4Fpaz76N+3MFMNhzDeq17BG1YI/4Xt7HPDeTCd8b70D3hv1hO9tfcDbCJzwbTIO+LYvJ3obowPepuuEb0N3wNssnnCgR1IHmfIx6FHeRjTRS6UPw2lErAAG6ZuvMJI4MHoZNbNFpxVFLzqk9IqX7ytfKZUXnNbUdY2S2itO26j1ll/hQSuEln18wQd9PNACe/083Qgt+pTriccrf/dSSu6vOH2e3FF5uS3auPQMEl3nKz6+W030nF/wSJ9PkazDK06fv0J5vZyUv2u7Wo2v+KB/GbSjDJw2Yjm3VqQlQ+9k9JedCDxcdDH1tEP4mhEHew5ttvTPhibv8+UqNbzv6UD3E9CwemAHvJ+vhtXrOOD99hSsX/YB77WhYbWUDvheeAe6l6mG1ao+4L0JNKz2zAHT3QyyIj+QmkRvJ7DnPDgN7UGyFuz1MozB3Lr0TDvuMTayMjfxUgRo0K+XfqVXBnTgigJpXHOgA98kSMOaBR24okEa1zzowBUR0rhmQgeuqJDGNRc6cEWGFK7ZkIYVHVKw5kMahicu9NK/+LZvt7idKMGZtsIIp8s94O2gNazc+QFv569hRRUOeBMLDSsacsCbtPjwfZeaPqn1qOG1djWm1rlHwGy65pA7hwo6xNGhmQ4pdSisQ3g9emxyaZt32xzdIfQe/XeCBSe0cAIRJ2xxghwnJLLjJyfYckIzJ5Bzwj43SvSiSj8K9aJWO8r1omInivaibi9K96J6RwTwNANPY/A0CU/D8DQPTyPxNBVHg3EkG0fgMeUgNzjxQhk78HHCJCeockIwJ2BzwjsnGHRCRy/Q3LC+Sw2rZ6LhRf81FogU0lp4cR0aVhd9wPsWNaweyAHvx6dh9bAPeL8aDasXecCJKNUo5Kp14LMiVdoVpfYayZt/hRmpvmJHpBq/e0pgvkekeqNHpKpQHake8I5UNawi1QPekaqGVaR6wDtS1bCKVA94R6oa3pHqge5IVcMqUj3gHalqWEWqB4zVzN50pO+0DfNNsEf9vmq48snGD/Sm7hrdPP9AV0xwgHf8oNEdbBzoHZkoVIUxB3rHPBrdAdKB3tGURnfodaArTNPgDukO9I7/XtCeYy18uXl5yZgDfSQPrCy1eQBTtFrZqi+zEXOk5XbF8kPgGr9LuWp/jVsJjuR3x0vcSngctJxf41b8ZqZVFE5HDjyQJ08vjh9xcWwp9KDoqA5+aXcMWvS0+s7o98B3+HvCO/49cBUAn/iOgA9chcAnvmNgjesg+MR3FHzgKgw+8TsOPuEdCB+4ioRPfIfCB65i4RPPFESU/GMgS2uIbEkcZ5wBA1HJLCTENuk7by62uRW9OHJ9+QfGeOKbWx244lYnfnOrA1bc6sQ3tzpwxa1OfHOrA1fc6sQ3tzpwxa1OfHMrjStudcCbW2lYcasDVhFu/U4947LOCFfDKsJVsI5wNawiXAXrCFfDKsJVsI5wNaxCWQdWK8yLh+3o2Ym1ncjcieOdqN/RCBxFwdEfPLXC1jYcJcTRTTyZxZVlPBnHk308mciTlTwZypOtHJXLE8U8Ec0T3TyRzhX1TAXQUQs9cdHWIh3l0tE5HVXUkVBtvdVRZ20t11F+PZ3YUZUdDdpRrG1529HCPeXcEdo9Yd4T8h3d300TOGkFJwvhJS28JIeXFPGSKE7SxUvSuEkdLwnk5YycFJOXkvJSWF7Ky86PObk0O/Pm5OmcrJ6TA7QThk520clFOplLJ8/pZEWdHKqTcbXzs3Yy1078WkliL6h3FABHL3DUBUeLcJQLR+dwVBFHQ/EUlxvWN6lQFakplO52kJPpx+9pdF/cgd53otF92wd6PyON7gd6oPfT1+h+VQdKNi0m3KcO/W+tptEzYGkmba3mBdNaTW/0TOgiT61mo3ohalSt2hO+1/gB7x1xwvf+OeC920743psHvHfyCd/7/oBvI3Git0U54G1/Tvi2Vge8bdsJ32aT7DZFCAjbDyt7wrdRPuBtw094WfwTvf3DAW93csK399GwclYnfPu2A96u8IRvz3nA29Ge8HLLB7qd+AnfPv+AM6+GCLGL3vShmFypxXPXcLVlphVfXiQdYpW0EyA2HZIOXck1QhWzV0YSLT1m+lDrqY4XvOTvQo+qhVecPh9qa+kFJ66aexnTximcbrCUME3ixht9nm6hv8KD4pdUpr3duKpNdfFbqdKgploa18xM4QeT07hmfhrHTs2X4OriT/y+1wNWj+bE96M8cPXoT3y/qgNXr/bE91J4xQOsTn9V4BKtoyiq1KHA0QNvFO9UrcBleju9cRSpwh5W6+g5xJcQVbPfFHB7Ob0Kdge+2e8Jb/Z74Ir9nvhmvweu2O+Jb/arcc1+T3yz3wNX7PfEb/Z7wpv9Hrhivye+2e+BK/Z74gn8AQvz1N8CPWRyNCIClS3RK12O9s+VwJtfdLkDV7qcxrUud+Bbl9Ow1uUOXOlyGte63IErXU7jWpc7cKXLaVzrcgeudDmFa11Ow0qXU7DW5TRMb+rqhfcJ4si5NxUjpo1XU73yCyM+4M2INawY8QFvRqxhxYgPeDNiDStGfMCbETuwvstT3CtGhe7vUAgdPdFRHx2t0lE2HR3UUU0djdVRZB391lF7PXHYFZM98dkTqz1x2xPDPfHcE9sdbd6T8j3p30sVeKkFNxXhpS68VIeTGvFSKV7qxUvVeJkdJxHkJY6cRJOXmHITWV7iy0uUeYk1Jw/npe28NJ+ZE3QTiF7C0UtQ+glNJ/9pp0vN3Kqdh3Wytk6K10wHm5ljO8lsJ6Tt5LWd6DaT4nYC3Um224l5O4dvpvvt0gC7jMAuOfDqE+xqBqf2wamUcOoq7CIMp2LDqe9wqkGc2hGn0sSpS3GqWOyaF7tAxi6msQpvPJnIlpRs+cmWqmxZy5bAbLnMltZsGc6R7Daq7k2hqHPsg6Nb9b0KVdeg0X29ClX3ptH9HBSqnplG9/NVqHoXGiUrRi85nPqFyHu07nPJgYwjiq5wWYm8L9lNFvre/ekh+cVvWrS0jQ/Fb4GH4LdBrfdpdMt9ClVqn0a32KdQpfVpdEt9ClVKn0a30KfQrfNpcMt8ClUqn0a3yKdQpfFpdEt8tCDpn1ib1hLfAW+JT8NK4jvgW+I70C3xaVhJfAe8JT4Fa4nvgLfEp2El8R3wlvg0rCS+A74lPo0qie+At8SnYXq17aIXRnD+DpsUpO/SexHVOGwOcSs1vRNr6GO8CDsHvHWgE75lowPeKtMJ36LUAd8S1onegtcBb33MgQ95U8Fa3lSw5j4K1kzJ0wc9PdGRHz210lM3PTXUU089tdVVZx0x15F+HaHYlpUdEdqRrG192xHDHencEdodWd4W8R3J30sQOOkEJ/dgJyqctIaTBHFSJk6CxUnHOMkbJ9Vj54WcJJKTcnISVE46y0l+OakyJ7Fmp+HsnJ2d37NygR4NsSmLTW9sKmTTJpti2XTMpm42zXMooUbjj/Vs2n0olJ5TYfeif02j+8oO9L4Lje47PtD76Wh0P8kDvZ+6RvcbOlCydWTYKabXHvPPThrj6ac9vDSJl1bx0jBe2sbJ8nhJIS+JpHEtSyj8kDE0fmseGqT3ckWpONAXc+L3tR+wutUT34/mwNWjPPH96A9cvaoT36/2Fb/Ig3DR3pFdouCxhDQLN3d2KaOpK1cWGZWqd2Sd6ndKPfUXLnfiKut0wCrrpHGddTpwlXXSuM46HbjKOin8yDoduMo6aVxnnQ58Z50OWGWdNK6zTgeusk4a11mnA6efzWn0FzkfWiuZq8CXqdR/uE7IcdB46UU3a0AMEaKrBjI/p099wbdWfOBKWz7xW4o+YKVcn/hWug9cKeMnvpX0A1fK+4lvpf7AlbJ/4jsToHGVODjgnWbQsEpKHHAgx0AvF3CZ86N0LqoSFgXWuSgNq1yUgnUuSsMqF6VgnYvSsMpFKVjnojSsclEOvG5RY2oletksO/flZMqcvJqThXNydk6Gz8kHOtlDL9doZyadPKaT9fSSpG5S1UvCeklbL8nrJYW9JLKXdHZy1F5K20uBeylzL8XupuSdDL6T8PcKBLyCAq8AwatXcMobvHIIp3zCK7dwyzO8cg6v/MMrF3GqS7xiFK94xSt28WpjzDoar+jGLtKZImupxJtavigOgoyaL7qmXCLZA1ZZ3/2xlllbw3uJFLlqnXWjentrVO3uE7439wHvvX3C99Y+4L2zT/je2Ae89/UJ39v6gO9dfaL3pj7gvadP+N7SB7x39AnfO7SR06Gl+8qlTvjenwe8t+cJr915ovfmPOC9N0/43poaVjvzhO+NecB7X57wvS0PeO/KE16b8kD3njzhe0seMLw1bbHIr30YRZGtSwQh+/QOSw54RzEnfAc9B7xjpBO+Q6oDvgOwE73DtQPe0Z0DQwF5DQQPvVnBWm92hFtH5rU1YUdAduRmR5x2pGxH+PZkckdUtyV4R7B35H07F+AkDpw0g5OUcFIYdsLDSY94yRQn9eLkaeykjpMCchJGTnrJzkXZeSs7x2Xnw8zUmZ1lszNydvbOzvTZWUE7g2hnG83MpJnENNOdRmLUE8xscc0W4mzRzhb4bDHQFg5tkdEWJB3xcqPq3hQafphbTDdO7/PKZ2mgRtVlaXTfgkLV7Wp0PxqFqseo0f3IFapej0Zp0QyyPuVwW392BLKnL6h5Apwn2HkCnycIOvqhJzd68qTGNUNW+EGoNR6/M+2P/vq7J35f5gGruzrx/RQOXD21E99P+cDVWznx/RZf8UBGML3Klqg0y/T19QwC4dFKa/QzZ8Cu4xP6CK2e8urTTnyHPye8o6UDV9HVie9o7MBV9HbiO9rTuI4OT3xHkweuos8Tv4PVE96x7YGrWPjEd+x84CrWPvFEj6dVFl0O2TKQf6gXCz1LWDq0zAZ7N+tMtZZ54ErL1LjWMg98a5ka1lrmgSstU+NayzxwpWVqXGuZB660TI1rLfPAlZapcK1lalhpmQrWWqaG0/fotAgBd1pZ22GOHFqqPMh+GOPESqSbJh9xlqGd8NbjNKzUuwPeWp+GlTJ4wFtH1LBSHQ94a5QerO5SK5rqmXhSqS2sOjKsI9o6Eq8jCDvysSM2O9K0qWLbgrcjjztiuqe9u1q9p+17uQAvd+DlGrzchJfLcFIfXqbEy6x4mRgvc+NmerzMkJdJcjJPXqbKy2x5mTAvcebk2by8nJPH8/J+bp7Qyyt6eUgvb+mkOb2sqJdF9bKubpbWzupOSXPQLxd8+WDN8qoX7fqCpcyS5rs/fmiKVWnjd3o9+eTJGz4I3AnffO+ANz084ZtNHvDNPU/0ZqoHvImtB3eyfz9W0LUAzvFDBV3DgvqxkODQwhxRyZGgbL3KEbccKcwRzhyZzRHlPAnPFvwcedARE23l0ZEpHVHTkUAdwdSWVx0x1pNuHaHXUYVtCdkRnB152hGzHenbEcodWd0R4W3F3pH3nWSAkzpwEg1OWsJJYjgpDztBYmdT7MyLlaXxlAJbVbAVCFutsJUNWwWxFRNbXbGVGEe1uVF9bwqlhV0odD6/V6P7Gg70vl6N7ns70Ps5aHQ/swO9n69G97t4QSn2CGMcNlq94/hN5Ci+cNAD3WtHoXqhHfBelhpWi/iA95LXsNogB7y3k4bV5jvgvVU1vPf1gW4joGFlMg54GxgNK3P0Ao9aei2H91Q2rcIF0kW9ZNBP+LaXB7yt6wkvU3yit90+4G3lT/j2CRpWHuSEb39zwNs7nfDtyw54e74TXm7yQLdPPeHbAx8w6k86iNvBbP7saGRPX1PzNDhPs/M0Pk8TdCRET3H0FEqNa46scS3xabzTzk79B4X1xPdlaljf1YGrp6Bx/dQOXD1ljeu3cuDqLR54IlPYan1p+MdyIMPMPbg6EDwUzcL29HWgn4aVnqlRJWcqWKuZGlZipoK1lqlhJWVu+FAyNayETAVrHVPDW8bUqFIxFaxFTA0rDVPBWsLUMBwVrYt8KJX0PmKpOEBBS0Mwo2T8RxqnkqRj/RLp1efBp1RqbeDEt5Zw4Ep7OPFbqjhgpWyc+FZCDlwpJye+lZYDV8rMiW8l58CV8nPiWynSuBKWDnjLUBpWotUBp296wBmXTsvhboTgfvgLS7d0egc/tNcG2vX0nANnE7WwqWElbCpYC5saVsKmgrWwqWElbCpYC5saVgqmA6u71LB6Jp46amupjvLq6LSOqutowI5i7OjLjhrtadeO0m3r4o6K7mjunkTvSvpeCsBLGXgpBi8l4aUwvJSHkyHxEipeAsZL2HgJHjsb5KWOnFSTl5ryUlle6svLlDmJNS8R5yTuvESfmxj0Eole4tFLVDp5TS8N6qVNvTSrm5a107isa0KrpB8hhlNp731dciLyD9ihYO7TmzfN2qc3b0qmsJu+bWxTPYXdtHBjN4NU0E02rUOjLQzPz8jig/YZSXzaGJfBhLHVDCJcEm3YH0XNAin6R1GTHkV+vTqiMsW4ugp7+OPV/R7d1hZ5HUXY0Y8dtdnRph0l29K93TDLC8qcEM6O95zg0AklncDTCVPtoNYJgb2A2QmvnVjcDtydMN8RBRwJwRMcbHnCETMc6cMRSmxVxZFgHMHGkXccMciRjhyhyZGlbBHLVrxsdcxW0hzVzVTobDXPVv5sldBWFG310VYqbVXTUUA12n8coafX3Ea1OTjQRLHeOI8p0+i+3gO9702j+zkc6P3MNLqf74He70Kj+70daIYVxwEM2p7v9YDDFQKtgpPqHui9zjSqFuUJ30v4gPeCP+F7exzw3kwnfG+9A94b9YTvbX3Atw040dtgHPA2Lyd8G6MD3qbrhBGS9AonpDwtZIVMC5Dg2ykrU4loLWPy+2FXD/Q2whrdFvtAl3U/wNsTaHS7jQO9fYxClUM60Nt7aXS7ugO9/aJGtxM90OVwNbid84HenlyjYK69JTwbzY7ABmhD0mY4uBQm1130gPrJvNCmNFImE3HwNGT1K1HkeLI6wC1GeqEHB0Q4E1O/FK38syMPPn050ZMfPbnSkzc9OdRRTz2x1RNnNa4DBoUf6qbG6Yn8+KsavS9Rgep+NLrvXqHqWWl0P1mFqveg0f3WNJq+yVKFoOJZLLSM6V7pFB50pAVH0q+YXxvuDnwHcie8474DV3Hiie+48sBVHHriO27VuI5zT3zHxQeu4ugTv8PuE95R+oGrqP7Etwpw4Eo1OHFabqlkvq1DsaX9D2P+ohtydRZ88jgltUPhJRoRRsuv1V8nrhRejWuF98C3wqthrfAeuFJ4Na4V3gNXCq/GtcJ74Erh1bhWeA9cKbwK1wqvhpXCq2Ct8Go4f+OrIcZjbOXNZMnd1jywAPklr3IA2oaRXjl9SW3T8yoFkdYPrf4rvowuPuCtTmpYaZkHvJVPDSud9IC3qqphpcEe8FZsHfi+RY2pp6Fh9ew8PdlWnx2t2lG2HR3cUc0djd1R5B393lP77dSAnUdwsg5OjsJLabgpEC9l4qVYvJSMl8LxUj5eisjJKHkJKC9h5SW4vISYm0DzEm5mds7O5Dl5PydL6OQUnQSkna10cpt2JtTJm3pZVicn62RwnXyvnRx2MslO3tlLUztp7Vv5pXsSobdt5fcFe+h3eSu/6kXe/Fm9xY3tV6iw9f4UdL+8je03p7D7tW2Vd78zhd0vbGP7bSnsflUb2+9JYeslbWi/IYXdr2djRqTxJihxQhgn4DHDIyeYskMvO06zYzoz/LMjRTuqtCNQO1o1I1s7CnYiZju6tgNxM2a343tbC7B1A1NhcMQIW7pwhA5HFnFEFFtxceQZR8xxpB9HKHJkJUeEciQrW+Cy1TBbObNVNkeRM9U7W+mzVUFbQbTVRluZtFVMW/F01NGNqntTqFpzG71Xp4I6ov3Q4nEBGt0Xe6D3jWl0P4QDvR+YRvfDPdD7RWh0v7QDpS3WySKMw9bRa8+JTMc4DONeInQ/raWX4EeD98JToFqkB3qvaI3u5X+g917R6N5YB3rvQo3uLXug9/7W6G0LDvC2GxrdRuZAb4uk0W2+XtBIcX49c6eAG8U648y0Au6xX+3wfnwiCvkB+j3tK/mrwzU0AfmzKQU9PdnIlphsOcqWrmyZy1TEbPHMFto0Wn7MZZ/SlcLB1jNts/7ygyd+X90Bq1s58X3jB64e04nvh3rg6hWc+H5hrzh9Ca2MMwgB6bkqEYB2BoyHgtdon17l+kHB07hS8A5YKXga1wregSsFT+NawTtwpeAp/FDwDlwpeBrXCt6BbwXvgJWCp3Gt4B24UvA0rhW8A8djG7nEV0WODC2ZEZxmpKUN/As5A3TnHEoIGwbMCw9KNdFxKq3SSpv+dXLdAe8oWMMqaD7gO8TWqArID3jH7xpW4f4Bb3VAw0pMOOCtPWhYSRUHvJUNBSsdRKNbNFGoUlhONLVK18di1k0UsKpoX+I1tqQYUxYCAG2u7rQtPl0av4E2do4X3z1k6lyPVotJ6In2ZBvlpejvgPctalg/kBPfz+/A1eM+8f12Dly9zBPf7/7A1VI58b2yDnyvwxPeq/bA1SI/8b0nDlxtoVd8YHw/vqfsliaWevJV+TGMOcnm+JIb1L+4QXV5N6jvZYP7vm9MP6MNqgd6g/rpb1C9qhvU73WDahHcoF4xG1TLa4F6Kd6YWrUL0wv8xrZGemNKTt3YVl5vTIm0G9t67o0p6XdjWyW+MSUob2xrzyZWrPa3Y1trWXxYhR6HydBwssKWwxx5krst0DtyviP+O6kCJ7HgpCGcpIWT4jCzIU7ixEmz2EkZJ4XjJHy8/JCbT/LyT16+ystvefkwL3/m5duc9JyXzfOyf1620MsuutlIL3vpZTud7KiXTfWyr1621kvuOrlgL3fs5Jq93LSby/Zy316u3MutO6l4L3PvZfq9ygCjimDOg2gQG8ZV6A4uUc8N7KGs0i2eb4t0h67bGt3QtkQbuq3QDW0LtKHb+tzQtjwbum3GDW17saHbVmwNftsJhd02YmPbPijstg0b23ZBYbdN2Ni2Bwq7bcHGbjugoNsGbGzvf4Xde39je98f2Kv48EansEUNRwFx9BJDXLGFGFu0sQUeUwuyZSNbYrLlKFu6smUuWxKz5TNTajNVOVO/M5U+RxS0BURTbLSFSVvEtAVPWxy1hVRbdLUFWkfM3Wi1ihD0c1DoZfWu6cWr0GQN8NK7YqOOeLe1oKevHXlak6dNeVqWp305UpmnrHlK3AtuDY08pCyNd7Pj5CB/B57NnpPNKzWoKfWBJ7Pt5CDsBz7MWT9HOHDgxZz2syMN/YQVeL+Njak3p8D9mjeo1oQC9wLaoFptCtxLc4OKSyhwE48NbpKisE1oNqjYjwI3Vdqg4lUK3CRsB6+KsSlw07sNKi6owJs3KmxzzA0qQqrAzV6VkrCprgIdzcEWKBxBwxNAPMHEE1gcPcaTbzy5x5OHPDnJk588ucqTtxw5zFHPHK3NUeY8Hc9R/XyN0FIUHf3RFCttYdMWQR3F1NNXHTXW0W4dpdfRhR0V2dGcbYHaUbMd7dtRyh1d3dbgPcHeE/i9hICTQPASDl6CwktoePkPJ13ipVecdIyXvnHTPV56yEsneeknJ1vlJbe8ZJiXPHOSbRzo/vuvf/j6w1/Er7/9JwpoUSH29xTn9q9/pn/7I5AfudxTQxmlCfRdj798hK9/fvwDys6+/s1F35MiPXt8JtIaSrRbvv7m+fjLv3784X/DYbVff00xNn30r/+vx3/++p/C9/U/f/3vX3/9V4//9a8f//7BF8C6WSE/nfYPK8j/YRic6yq1B/rP7/v18uOv0+b7vlIpQVfFKcz//UCrgp59ogVG//k9FxCt24fDrGQ91e0r6M3PE+up9IavXIg7/b6fN+4/XomMzQi77O55YG8ugEx0zPWKZHuIj/2OC0jW/UOaaf0aZ0P6xvwLoA1GnyfOeQ3idL/vAqwn8EPL+fPA3lwAuUL68VoGruD3XEA+n4B+mrHSZiuBX2j5IvJaRmrvvuv/jf/26//8P/7b3/z5v/zT3/1/f/rxvlSxEH11TuTm6c7oFtMrat8b+W26F/IMV67pwjaL7xbXuwsY9KMwxPW4gI2+u4ABXkGkI/Aue/No310ABsGOlLFM9BUo+N0l4BitkBp5SF5o/jXUt9dAHpScF+3W8xo2/PYasN17JD+B/f7mGvrba5iU/LiAm6Ybvx6+Q+E1Dd4eY/+JhX1Z3fiKf4MvEweKOYxEHn+6sOu//frtH//L8//57b/pr4tff0UfWW7rD//uT//97/7mT//hj3/59Tf/9N55qRv8jz/b7cdnjW+15lMcn9xP2PvWP/xFEC/8V/R0/pb+V3ww/fPjEXEs+4sxTFf7Dlljv2lMhY37L2/wdv73n8oinl9Fq0tkmvj1j3/6+k9f/3WThAsHvEk1+d9PlnA9BPoXXWghopBfrtPC9nOVRYHZQxQgxDaIq0Ke/xF7GN/5NH9bYbUTi3r5bQu7/65cD7F+4hz0XjH2aF7PK/YwvvNp/rbCKDijTXb+toXdf3deD9oE+OfTvp4X7GF859P8bYWN/k2M8/xtC7v/LqdTiPsWJGAQ5OFCKIwhknbJm3v3pw/jd57m9ejFH9JSxNTit8D7b//rzzU0fuppX5QGY/8ur0vdBu+//gvmlf/4W0/7qjRI7Ku+7gIbvP/6RyOIfvzWp/37GiQ32V63gg3ef/2T7hjjW5/272uQYpDxuh9s8P7rnyQdjW992r//+x2CeaW/J0D80bzTtQR6vy8m3wgRyf2HRZQ5prp+xiTydRmxwo8W9LiEbRl/dgk1f8f6k0voP7uEbaT2JWwz87NLGBSsXz/jU/Fn16B29b4ItS1/dhWgti3/7DLqTy9jbxl1GXvN//QyiN2O/pPLwMP4yWVseqsu4w2/fb2M30Ny4+vafEdMHaKUiBm6ROk9y1N/+ffvdJWe+wkDzR1dauSUVaFDTem7H9hvGlO1ZfsvvzDQP/xF4p/8Js8P4/LP8o9/nAj9Lu2HAIfbIC3Wi8/VKDjKI7XecDpxpU9S5AAFrJCJTxntV2TDcMTHSJFzlwPn9SU5GWVQzAbNWl48/c4X+0v5Tfyk/e10uwj3yqhXQvBZW4BiR3dModgVOuZsEYDTAkN6cy3ym7HIr8Z5r/HNzTZ6YjjFJCAfm2odTX7WvBrv0dDPTiuuLDheSqCvQCzyx9fQiVZJJAqGcVIgHvXKgx89l88g5oZeTnd5yc9StBojUUtOBEAx5qCmQPy4IihSLd90sRAxcE+ByBRkOtpGHUOlEkuSpcXvq/DhnawZ08+WNL+Jbr6PnNCYB9GTT6Gkb6JH1utVIaFfkRhnC6xz05OBal/wHHB4eZsHGOCbGnZKqKjOoHuMtCTwnGvoWMN05RCwYqgx8GMO3/QWrzhF2Jihu0pwh7dFjKzLufbEX6HBU4Q5aEE0ei58+EKhd5v43nAMVApJyjxCHIlVW1zQRddaR+UaMwoaEn0scCERGcpAJouPz02ZBXfcWvxGhIPmMmyTTLc8v4huIdCDq1KsRu/pCryEwqB/KYMWJj0WCgJ6lda1SFcd0FlG7wN9+mU9ojjoT2IOUrQYiONmftoJh9qW2vC0yzc0Nk4a1UCPvlyDHnHHqTwtcZ6AXxtqXoIkjiBK58ybieg+LXHyMCKY0lLovD3wvEvEWVkD4+tijvMh8XofSDyJi4w1hWUKYq+40tC+W81o/PuNXw45fbpYbCakrnLbX0SLh43BRc+FnO2I/E20TOgvDBn1XvuV2EjkgQNlsUK/Bt5gpZtd34Qe7byOwaRfo++d30QsYiSZ/TqClErQa6PniBzIhRM1wshjfQ/eP5mQxguJGCjuWr6n0FUEXsK54TanNWsp8tKme6FwJOalYrDL+eNHhoRX8qALTnRftDXaiP2KvI6JtFAAUXiIHpmKMZ/gxb8yzTXZLeU4c+94fbS78iwmulqj/xcyLe43TOIHv2n4TNiSGmmzsi0ZnfYb31aM38hLSedqLj2En15mCeiTpOdCRoB2F/rryXXSWkUK7HeKme5lZnC9nOgxk8EYKPgSnwWrELnoifZgaa2On18n+VUYGNqPhVxEguaJvnIyqe/k7N91mXjVZBJoxZIVpOeahyySyJaZXhdMeiip//ytFyT3Oy1PilLIUEYeEzjI4NIT/r3S7D/ALRbaZ2WM2Oh7cUJXruSrU/h6+Rf1OdruZAzJ5cK31AfFEFhrF5H0+u5N+iK597xMf/tuU8HeX6gGwy6gy0P6kD4PWYR4M718PPZaxOz95PlCHm2oerkyMmr0kyOTQ+O94N/k9f0jH7VWAtmT0pBB/qqY4lKHWFbcJtkkiP3Iro+WfseVkn8ZLYdaKrk/2H7iXWQYYZR/dwbKfQVX4Po6IhnCH0ZrcNzEfPtFPILsFKgUCg9+eqFEGYg3gAW0IfVvKOdDnB3fXWn5fY+0BuIDtWKYCq0C2hSNLSotYLKOtFb56KJB/3v93AbQNRKTIdecAywwXlEsZO8w+OPNlbbf+UzjBaN5kb+mZYCVyS+/RoywIMeYv7gOo7by8wuFISaLUQJ59MHvYlxw5WO8swLhek1+gZfSvhm0SeoXV9JG2u+0FmEV1L8dnwMFoV0fWm5E0R4RzpYcbcq5vPv1d0mF328FnBiAfTteOco8ySXjcps8XlDnDL4ET00crPff8XzJYJBN7bRuyhfFUWQFQ8CJ5e8sXbGiUufOIjF4lNDhlQxM9udLrd/EwgcIMNElckOxx99xrY2cB1mPkArUUq6swJqNby1WeA3l313tSIVrdSKqY2nTl/UirjjmieVEt3Kvv+NqyWVnCoNK5llVtCcKiBdR4LeLJ/z+h1tg6xNPGELxaMHOkstt2F2ZcSiPv8PdYiHgzsiQjCaHdGJJloL44wOdBNLeHZpLInfG8ZL5ecn/ZIkeUQ1FjKQ3cglTOH38/RQKfvgziaYrXj0CMfTSkJkQ4k5hIj1xkF7CrxDQIvUb8yRi9yXIgDFyS/D5EmESmULKBXhEUZl8fny31kORGWi0DsL9+URPvMi0M5T7JPk8eaiEES78uzy6h6OqTFuStlOW6yFzcnE99Z9Vvim2fqGUW+ebNEZ3Sy8Uux2xBXKkMTaOd2mB1VJwaCRK1UADZSBIgjRPdiAzHul1cuBUEvmPxl1HqFWiIHwIjKajgHQihW4XGZArM5yQjh2IpbDRKHYNCyc6wgcPUygZ4N36/JoC3yM4lnrN81dpSVe8KkTlFAtJVI76JFgDGAAKvJsoDREvhCIjfAu9y0FBSpz4hccCnEIn4qv6OaIPhzhG5uq7lZd6wR7mTz79C3RvyHsAyDtfFckR8tSd04WAIVFQDBBZ2xj0muTTKOdonMSLeEkVdS3yLRAni+CooGSJF79KCx6Sc0CiPGBJzqsk75A5XESU2wdHVLirhLKzyCFsDEXicCwOZGxQ/0XEATE04/d4rx/2ob3/rH1DzxKslIhZlz673uM6XYZIVh8pSyMc+RipBSxoHIgppVm3HukOZdINAu062w1R1V1kMiHZFRhfaftrdIM5zK8n/x3ndg30JGp7s433zVYi/znThlI3e2K4WdoWFHCV1WxY8gy+6JWENKQ3MaJmY2plg/52lzo9skWJQ3KYCGgwXQrsMj2k0Kdpgoe85JGRfxhlWhpaHixa8ZOkjZDeWizPwnkW0bKgojCC9+Jm5fNBNmBGZjqnKpMbc2oosD4sWW14TQENSrclOzDsQNTENxzuM/hJBi6SIRcDplM7w6Gz1fmN7V4m00TbccClBXZjMAWdojGQS5ZAJQ0zNzd4PMFkxOK93mugfRY4XQL3tqySaQsd0+mZWssy/8b3w/2dAd9e2eczTN6A2CMtjYFsRcr/Al9gXfiTzUAnY0k2ZODtkNHI05qkC6VegJGtrWHapMaqEV1HwSpbJomY2oWJgLhJelFRTEmDqeKlQrYXbahNHi1WvdQhcOBzVXF69D0ddbkiSsWeYxjzVxNRFNQUE04r/pLX7BpUzwOZDutDX2D+6PPNRXo35T0Eet4ULDQmvuRGapporw3PFQJli7Q1ZDei9Stw90rAX2zX1ebnY8lcE014RjRZ5yuhuLJnwTt2TH7rVRwnZLqsP/+rqytsr/R848U8r+fdD7u0C4+X65/LWhpkNSOsAOEDskPsE6YAp1c5sbIE1JGulU22bnTGaaVBUZTHNTBVEbPYaQfRb+c4L7NU9p2sCdHlr4XayuCni0p9yLCLEo1CdDpz3DBKG+Xe8R+4H8txiPbXyUkGcTTXYL1anF5EBiFz2Nhg/NhH8hK7uLMfTXw1yL0WvB+KISUXEegL0/K1CXZT6tZbriH3ty7bc/EOJXAdmef4TD+5n2W8Il0iTPR+lif2cC7+yXyDwtE+i/HJ3EZxEwUcFGIA47SEmjhzzhbBOHEPA8VaEr8WXBn985C5zBkC45jfQ+ujz4QPmZ0qzxIOIdQsPzs6BZlv6M+nvtbwk5JtiRQ20nsdOF2pQKIVh4i7awxnClrKop1kwCDXD/joOs/Fxm5Bsog/TV8d47InrHhxvS2KR3t+424c3+R4MtdhW+7dJgN//qjMz7rsJ9sMNP+Q6QFXydyQLSamEEMOwlVCanIkTgaHIlrGz69QTC5MADWcmRxS5Jsk7jjzrPQSWoKthGsbqa5EaKSbwPph53ORpRUqRJ+/iOdheSJaIv9Up9eAVsoaCb1M+prx3mF7Dt4mBPeegw9MoaH35N5zL9iDr4ZeKpYZKi8wUFPSfmjurVfkPh1kiHg5yc3irV+JcfIxZFQWM6W9ywYgfV/pSis3XSlmq1LYQa5QKug59CbuyLUhFVE7LZ+3PNzj7TbLt2ICeSN0jfESq4lpLPc6SJ2Mb+SroX0e2yYtZDhpvyHJGvgZ0sItUms3q7Xe/PHD9krPN07Mc3qek8RqwholvKHQpYR5R9iQOFEQiepOe249AYrfkc/EfEKyaa2vRUn2JV8ynZqeI8R8+VnIqVEmXzdyfznPy6TdVHh8ItkYeg9pUQJkOZGoxJDjevt4fKksYr4TOItfRGYsEvJ8Q8Ic0uaRPDw+srDAIexeZMjT2giBLSH3DhB9CG2uSOIZPcs53ukiYjyW9Rh1zHO820VeZ8zfjRUrhF9sgH0ub1+4Q6JsznXzbtqxsxB48+4X7OHYoKdvsxwT51pE5NXxhpjR0gPIUieB8ywjmYDBFSy5RllkWKGpgUowT63ENera9DmhpY22Ey2Pth4xDmKjLxKc7HcuP+PvJt83owPt31EbQzazFOXfNfawXfNTrAEKPwJKTgrF8hIewxrQNqZdTzBxItnEsAV0m2TTBso2iBeslUF2FjLnQEsO2ex1N/SRzPmFTJ7xNgSWi3Mcouc+PYpg8gmTfeyzSel76AEQiVaFwSf2cOzL8409cuyXZ++wVNKYs1eRBQzLu4020iXDhBotDol0PO/mOUPHeZrOVt4GH54551VQeDBWINULUVxYU8QN/UXUGTVx9cOlFuKBPewFIMU4GI+UGSaLNMYSkjpqjxsWIpJXV5o7kcgO3jsqpSg4EWUvY7HSt8hyocue7hRBbIbPvzC6npZXn769U5jLQXrBaIB2LRk+1ZjwFMmIkEmdl0LrKKK/nOFCtqIv5+7RLZuemWzuQ5pkLYAnX3rEeZtyMAgqYCbRqDD20lYcET6FuvRBpHCGTCBBpj21FW711OfXEwGKomzRWydfGfh76Kcu2t5vw0UnunSDUY9teezMZnOfnT5hX/yTY9rAVXh8s4N2i+xheiIFBQVysjoUCuHjqBQeZMoTh3N0r5e8cPpQh3/i4I9IYFlBXsUhChIU0vIsM/L2gkUvuPSCUS/y9iJ1O7JXu7tP50zm/d7dB4YwMrBUyYueFtRoc2FyESaRwcg4rZohdwuJly4Nd0v4hbUlEmqFy2vQ7jFYge5PFiYnVxOWy4AiEFpfyurAyLsE00/MWUrtXPHXVoodWdkQoX+TSjDaL7QOaRcHLrZkGDNG2E1AEY5Ij58PsWDxFsye2Q/xwB62nxVfQ1sb5U2DjDKx17SiQ7KWCSX+Ac58BUYo0Sto3Ufp8ZirCySYjPzgWotGeyGtquVcrxG5poA4T1pBjmllHZvsWHDH4ZvswKYSvybusfjr0+e7Lj/2+DROwslMPRECII2/XBVd2TraHXUBZUWctPU4BcNZlGvcNi0gIS9D4xG8TKWLj91JVcbGl47ZCm8ZhRNx2QHabTLpuZCtQrf3Npkv2MMxUk9WtOgKZD4IxbYdmxI/ihOfUuChp1WmdE08QFSqUTLh9JVii1DMFwZP2aicWJkWFt+JKtEgCfKGYg62XeSWUN0e+GfJxM642xHYPuR+5hN+vnkj3hv03jhLaAXRPioDkJBs00tS5F+5hnegcj3N6MRz2p6T90iBSyJtzmlS1Lk3E+2JQS9qyOajq6iZnnsVxfHtHz+cgOj5JoDyAi4vQCN6Rza28CwDiteX3AbFKjY+jJUeZOGCfnnwqKdkcaCiUeha7IQ8eozy8Yz1tswk6tHntwzWed4ZCi9QtwP7T+m1YbOFGNJ9Z7oydCuQOZ5ctIH1l8JNX6mTE1qqOure8SVk1ehO56eJr9aE+iyIwSh2SJP8xdEp8menR5b8lvgDCIXUXmUIhWl+CxmCC30aF5O20dePRgw8GEzHQTnj4q4eTTdZvRkD3LpDxbiEApF36w4v2MPh9M83MYATMniX3lDujJlGFNCnCyMs5hPIeE6Z824RSYu8WHRFUQVLSolYRV4GooOgzjxYWp4FLLoXzBbiKQmhTxnZ2x2O2mGLI58SQovIPYWDgagFxpHVkCQjSnroMkTnB8uY9UV03zmj1gZNQbQg7yIlJFdBI+iRkpGPK+dLsQkkPXCOiziJKBJOesJJZtipD59TmgzU5Ksf8kGDyslaRKkpiBUsaur1jokoZkncvhIDisiW8SIXQlaq8/C0lUOoKFeGejfQTX5VIb20shqZHxgA+m00nK+w0LQLjhVxbI7DKm0KavLVD9mKxTLoAVa0x8Uwy/BonxQpgkETB1HWeaQpub+ZXq4oQ+VeGIJTF8WxIn69rjoPI4XrEgpTUMpB9884Lfo2v5reGS09RsnwNwl8HcKzA9lBWzYSj1Td6y/YwyEGT7YfBYXJMsYUVDCmaaGvNdAcC6vNKgViCTmRDbuHh8V01191uuRZOIUq+zxDUOQ8stCyNNabdgNiL4D2Am5fXTDVCEe90JaL1jAR+qAcqYYetsGR8j9U2BBXo/1Ma2oG8wlT6ogQdcCoOq6roKZhBliTHRBauOsraK8FXupce3VX1GCWA6K+AviuOrBEV1uhdeRcx/A5ZtI0qpPoEWtDgT5vJkx1wIQtWhP0nJjovfvjh8OJnj6F8hiXQ9A6Dy0M0sSWyWfnxTiu0pFv4TNNyVOHhffRFsHGarsbScfApgdPvzCGexXNXdgtghODSdMq+pGcHfnZkeKnRM+wxVJTiY5ZsmRDolxZRVB3uOKMA+t2JeFcmCBTMSkNi6tGOZ8X+7OTJ7i4D7VcUwiB0IRkb+cMfKYNKd9cvlHTFiUdHMClyvz4FTtng9EzljDrWn6Rdv7FzAqfgAF+xxYdcmlT0blGVWr+Qva0tQzB4muOs3j3xw/Haj1ZgMtoHRUr12j3ie6BWowLbTR8rjGcyJgxKbprsIpQGplSvkPhKM3L+HjNQ74FcSvi9Sih7dWr8CEvQnYCai8Af6Mq2iqkpVl+SqIt9vt8Q/SdwMBdGtwzibpJlGhzOWubSwwVYRjpG7A16FWuZV2Ru5Ugs5IZX3sADxKHpiAB22sKy+ugoBMMFc3LtGWupYHbbNxj7ybZv107WibQ5D5UKdIL9nBszPONTfJsmG3ycK/0nPKYEkGcdb8wGx2CJntYbgLtbxmCwyg8BuJKGZ70YUsln/JpgwvLs6SHzh3k9GjoEYSbTdAGJAfbyeW3nmXQQwFfJqLfAWf6sryeWKwtSHsUfVtaVi8wO4AoR8s0vzG+jqW27brPyE3+brJ9nUkmasAlxDqTrLGHTWqeUmlROnYdBwHXqtXkArYi3Wr0NDBS+DdJaWe6uQE4k2uU50QwhTcgxSOyzeyrJoHiRkTydDtEelNdirMlcdt6uKOee/TK5mImcfs0GvkhjHhyGAGqxFQW9W1tlqjWwQOXr1k5hFwtv2Cc/lBROyqFRuR2JDpt2F2pzrpKtKRyXQs+DzJ4zSJB7AV+shW9KhR5zB6JVmbc5YQ108Fm1POXznPtkZ7cMzzYwb7744ejQzzf6BaOzOHYYeyUgWr5wBX05A6XiaP4G2lXlN2SAx53N0gr/J2YkE1raOYWhXhUmD5wbXI/cZmDntkfJ9Ttk0NZFsvRDG2J0VQkP6SAhgGR6lTufs5AA0agr+rR3kJAhQU7+iBUGrlE4gIYegqZOwURI5EyRPMtN42iaEJCY6zNwD4embPU5yaC/l565jIdzPEm+C5wHXRrmVPg5DzyzDVygSvXHVw4vL6vxh+fS5rU0+Kpv4YDWuTtybSLrq8kKUPGfrpW/A6u22d5cm0SSVWUerdc86xOTm2yNz4fnMdn4JdCl8dYyzePvRU4r3DW1h08kcITNRwe6dFOk6V+SABN4vZ8EwM4IYO3Kip2PcsCaL4gJ3VzXXrcXHgRUPM3ZmcKiDr9H7hugEbXe12rEc4FIQZnE8g4rrw9WguulX0YMo33DY+0aadNUz/kLBbdePKXdxwZVDCfh1bzFRbVpTAEVZsd9Aybcz7g1ohX8adpxcwLRExMBIvRlmgLr8dCjx1/s/PAqjipomMwHPPiGCOb+pgsySJUn1IWg21I6pe8EJq2QLVKSneNFtqjL75mSJL9nuw1Bsw9boXsUVitcfATiS8bM/RnyVXB7FGKUXHZ5KfbuBvsLBnWEW0didfjPRZJsinVh5zFpBsyqgVzT3hsFGrDWhHf3BIf9zBPVcDcIHnvPH+pc78UCn8otBBtAQOSsEU6K3wdPJIvno/kKW3I5yMO0pLPo1cm8TEe6JCILUu1skN/fg1tsfjG048T3bjSMR+wkBW5VhTMxkrbdG0sjFkJUl9LNmA2NWHIQ8oYWsYF26XNVBR8JQbQZCnwrqDi82exsLjwG8d1jHKtkM3jPzZfMunVr/G6VlT5FD+PuWtSmUQBYFxPZh1zWbmlasLoveOKTDgI1ImWabcq/k8Y8DUzyWg+omjrEp5Lm3v1PznqjSf2eNqQp4B7irmtsH/KCw0TLcUZrfdLLFUvcxogu3rU2EpQGHJLqzSDjAaMHM42Ibsr5WYVfe4BYT2Zk44q48k6aGXi7Cyk0GIIK5FC/uOK0h+L9vI2v4Kuo7POwxNapqOkX0SrPlImqBEjF3craTa7dMioSV1v6kIhBpGsxAvkHpJ9Yg8eY0dYqOK0yUdkaUlEST/Fz0NGkZABi9I/QgELbaGOhXGh+7cGaYqJCQa6BMFp28ut0g6HOALdAxIY4jGpKoN9TAVlEiDGFYfAMu6Vw3nlc165nVWe9xvfFlktPvsMjIx2uySq0alwwR1wXpuW2Yi7C/lfudtNcvxkFhyjjI8srGLNIn6iwbR9xipoxCSuPENYetjcllo4iu4zhMXyuFiP4xOCyqwhQtJolCgRL4bwybGHXkTtReBuxG6ydYfZm3HApyzbosfPN0GWF5Q52wwGDWfOZOm1uItvK8ZKSfFtwOAYPmRAtne+IEhzOQFteimvhExNTxvXjamgaEFq82fpaSQeL45jN1q9eabN1j12b0cDN9FBSJ4wUkjprC/Yww7jn27Q72kErk8l40mbjivJEGCNdRAnxpvSZsxcMZbzLRtislxidwPRPMxjk/A9nUgILCgEwLBGBpTAA2egoCDnRZt7Ulcn0eXlxew82qcRy4/BhqxK7C2id5gol8MiReiep23RAQe6pLoWB+fL21fnDMIUFeGSyax3PrWDops8LQRZsTowPweBzFht4Z4ns/2e4yW9sMcJksyQ6sOoxQo4JFdK9JjePkdatOvyqjWCC+ss+UbyS3UrwRxWkI0YfUlYFUFXZKEbAy3X/BM0JlLogRGaOV91ET5L6HZkcU9Ed+IeJ0oyY6pdDVGxFYgmq638gj3sRf/094i7p7w9SJdOIXaRI80oSLvm55GY5xN4padmXGM1h5u01CGxDuX18y52nsbO63wa/VlRG6I/FHT3wpQazjkkYb2tY4RymuUadPUSELXBcnySco0RyZvzxztKLTBwg3FCL7GuDRUWXW6Wlk+vs88Ls6xpvXXpjqV9ewnXcoLIXxL8WUHb841E5ElKnlODf0kiiRNjjHFWaEBkpEUMUhJBc+IsLWAJD4c5StF6kmHHzIhpdaCvBjXu9LrTnf0dA1NguYm30A+sNWnHkF7Maceovyb4M/aHBC0RLS1DFg2ttryCgiazwbmGiL6t3iXimG8ZZk3QkBNgwEowopuLoFHO19KKRXCa3BIMRo5S0OMqt47Q6+jCbhjphZ1WkPph6GKFHE8OFShoYAoKfkTUQ8o8MWukzxbbxkmtOVsNibErNmml5bShhC4ocKJFliVUIGskhj+C7dJubTPkCH02tdqVm06dp1sW6gVAXsBkB1i/JnCxAo4nRwpE+a5LOqjIpE2NvQUWyaLYJZwpWpeIhcuN0hyHFpS2xDNyCCHL91+YIS44zxke0rhFz2WW8buamqfBeZqdHwCZAZMdX30avFhBx9PXAlztwJEa4KSJV0oJyhz+KfigbYZnE+DxWF+W4I3Y3MCzQQ0H+aL7e3DSbpWJSNDO5jPAXH+sLg5qyDck0S29GMgLmewQ68PYxYw6nm+UP08p9LwCBivTz0Y+wgJlfnGNt+ko6Mlca4JTg6XsDuFyQ3KHZ9Bjln1cRo4sH49Hyzj/l5jy0vMa5onKzHpUFqSVQ7AZmBc12VHWp+z7lThLIW1MGPM6YHjrDO4Ln0iAZC7iC7IbY3E12FgyTR1zHfpcA2i1Ef/QO9dihiXPon6U6BxFDDji9M6fWBkbJ73jJIMcAm/TfTs4+JB7m6/s+eYVe0vCW0IYAxzlSAzE4Ks+CGIqCqmjtDQR+5bgyGMFHotwWYdL4m3Ob8cIv4aRWlTy6espnv7imSrsZPRJczEGrfWrr9R1YJrElQsD56AvHIOhoXSngCxIvhaRwiTNLG2UdAHx1pEvpLmatFfGvKNyh9maRNghzpsyKaZ0EySL2ciEXJyUEOdQkT5mMA8Ggyk9gmOnS0ER6jk6Dz7BsS+DR47/JiOpaAFnEJtE9GgWPPG5wZeUYOOMCHE4XoW4U0/uVJ87FMthZA6D+zXcyNpoT37ddWSE2typTwbuWgooTotp0sGf0TQcpsOlLYfsCnDMhZG6GXLQaJLjkcoYAhLlsAOosSnhEFrhWCmXmYLwxGFPTPbEZz8esOMHM9zgR+wQvycTPByVMiSepuueEwMbTFMJ8567hAqtcUjMI1wxhbLNnHFDhmr0LlF2h8K2gvJGy7JPkzbI0Avtc6JyL4j3Yn6PhTqk1ea4nzIei6k838S7TnzsGB2QUDI6IO6pcXFHXewuYuZi5aFSF1lmeSWVI69cZRgMrZEyVm032pygzuRKDIKM+vpZtCoGqWZlwfC91/OIlk3MVsdGyynRuyVyd61d/AP2cBbCUw4RqdiWnP/AxH9eNx2JwMSsEt4Stogvvmc+6jNIFIRmsD5husA21wdKvmVjdS6kHJcoXRXpEL7XHngW0jysDyevyDN2xKLb4IcZDWNlLcv/gj0c2y0TR1GPXqSplP639buRp44x82lo341reC1M0JBwpJMlq6uqNNCryjw0gvbIaGuuDnlTrMvBE03yWCUaZjGsUzrrFNq6nsT0O5aT+pAhWwRXwo2a+awzPmivtXpzITJRVegm5t8sCaqgLzwCDhilu7L1yLekwGkC1M+PuTPAKnNAPqAT479WJthKE3hJBScF4VFtk5ebLP5Tlmzt86dvF1w74tkdlKFhPixL3QGVTCtYpiBlsFOkjZDl8C7f53o+2vPpngTnkHOHzG8O9+OOTq8b2srxSItn5H43mRTGs7rljmpfLeJE7doK/ukFwXKh7+0+ZKDywSrsaCE50E6d1ALWjbxuYRpFPzkHUdfOYyHmSQA4U286GRykhSZPLh2g3xkyvrVibhgPfbugtMhxc66gYRdaWEUZvyTKsKKD5xvdw9NJPF2lYdBYkspuTDtP6xHSDruyjEKuHSefMo4zAfkwO65Jqnf5CZqvI9gwgo+LqO18tCjL6eyouX9wjaZzgxUvuLGDoV/DmK1dJx0BdJOV3TEsapt90hXJqcyluRB2yqz+a5CxgnwN1kAUE4AjkHK95t5F+0NdfQJEGGqZbpQi4LZOv7Q1SUfD9DRPl3d7PN3m9brwiWwv0UpYs134pLGH7QfEntZchmwPHEl5F23Ta8ZBlGj9QPJ7Raw1XEj8o2CSiGVdxUzoT0/sjcmJx3vBy/mVaMPFYNf2zpTYdscxUm7a2kxymynxD/m0xYOfb2J1L7b3tleBFeAsCQ8LDnkZB1p/LCTzbLxrHqVLa4UMDn8c9bGpz76/iiCcC7Lg7i6i6OsFURARoPVmlNt0OSXT944ei7dZ/6cM02KGMgaWyDTPjr0w2K+vvifaJ1myIch8p3sGbCxRplvTsxh1TTmlq0dd2+BHN6kKhpbgh3gMA3msMdZgBbNu2alytmuiPYrqEFqT/q545G603+HIC/SwwwgEI/QzZeCEJDDEDhPDUQH56HqPRsdAQVlaoJo49WrOH7z6nLUDaROLXwYK4ogBGZpF30OrLM9Bg/QgJqXBnsqD878czuciFMiJaj7kgeYKfb5Z0c4G8PYLCr46qsjlLNhVCFYHE5LCtIsir1JXq5jlSRy/47opn0ya3NOmqmvyW20JExtH2GvmB+zhaCJP1jLowmUgBGZuthk4UzAZknAfSAP0xMTWdwwUoruS4BOjqoTGUMybsfwkPUtePUp4SEFsrCGVedpACXOGnBcLe6GzHWm/UWhsRcdWgOazDBgKSVE2NG9svYwptZhjyE/1zZ8+bFL6dBmsx3c9foxG34IDK9E/Q8HfzMk1kFTudkAtBZmzUlZalfZkgFfCvCwy32PlJTvZLR5IneG4kkz7wjaoF54Fn1mMwWc/y/nZOUI7p/hLyKC19+ZZ5XLGJOCMI4PlESQMYmtNJrvhfNdZywrD0fCcsMlo4UeRDhpZkUjfI3OAE0ZfChskZ0X3wSIMl6QGMTSuxmgKkp566VNKm4LalPVTKmNxkOebkMALIZyQo+FQ8cKeArPkMy/cSZTLxeI6Ji1i6lGcT+FCfWCTRv3Ex5nL96CWb8zG/lTmCevIrqcrVjHmMVFo9N7IeyTK5FwfkhmLh8h4PnQfVWnLpJ3e7zMQKqrXeGIqcYR7XhtFdGgXITjifOTVCQt703mQDZHtnlerem8sqyCkhUVd5YU/ljM6lY9OnaRDhxzyZFKtz5iMxUFwuDHG42Tu1GSFvc955ehaJ4IR8jL3SQp1wMcoKpq7DiWMYu9G4sEJqNZFu0nKUy2i2yPyluf3JBziLd+DstZyZdnUDd156Q0n2hP7udkn8TGsa6m8YA878pFolugAJjkO9HGh43mucsx6LzJj7UorV4H11lrjwUQoSeq7ub3gALXB8yR6XlsLjgBqP057xAG3Y1pHDFxLUhFOr2Cm2mF48EqTHOZ1YfDR2tJEzFG6jyMc6WH01WDgCTq2AGQLRp+SQmujP33D4BkS1/BElnBQYkobqCGiXdVHKBVi8ZHPo4jLutsuxXNBnsty2KXNRR3qus0XCtcuyfTc5uvEHnZEL7TlorcJERy7nFb+Sg1SmIFjI3EcdUh1sQcKgAsCfbgBejFxwmRL4FEHzy+JY8ki5NlT5XAJxc5lvFnXzi7w9oyjLThKhCVbLCpIyzpfJQvXawOdi2nMoWjv/hQNUsTvUWXT5sjWEmSOf2gsoTGOdpk2i2RA3YjTRamIJS7Y55mIGEzBc01QrtDaZB5Rxvgy+eLCxZTXfO0LBDRLBVVMUbyI12fltWU5bVxm29dvfFet0Gsp0nQS5NsDRtpfIApgjlwAeohWa0nexW5GrkNKXC+RoRL2c71W6S/OWBc/RTbtuudBXRl9QjDvqczi9QqKQ86RlyF5n5UVjygpDzLzJNMn2soLmAqXo4fZ6pmXc3EyNGY+Z65DlVi6HekP2MMJy54cfoUyG7TIzbW2gq86FcuGXGKXjYxUUEtXWGcMrHGnHUnU3mcoj6NGwpIEWqtpztcHXZTwxpUWPCnCUS6cENGLKO0I9FM+Z1AxGcBCGylVPkCFmMY9bppcZJVjVeibRl1jsHDi+ZDEIk6HXSdBYCZ24OzkhTNH7jN3O471g6m96FdWz4VZImcX1NnVdw4jNMmjSTU/InMmCQOZQwN/4iMskegkiiw1ijIKn4c/IL+Yh6Q3Yblxg6KO4IhwMeJc7YODDjlAg7sVykJfgy6DLBwPMpt8e4HUm+bXEF2YAqxDCdedXpgBXjmmwfLAP10JxU5y12/++OGEy8834bUTjnvhO/ES3AZ4DM7RTQhYJ9GgUIr3c5Lx37JYWuJ9i+uBGgnJdfEbcpmtCs4prUVABlJXs1iCPGZdfaF2bsnLRZmpqw/ZskUI5liFGIgnYaHSNdW8wn1yYIHFVoo8w7VmJ9CbYLd/3VEOemHgTDnVENH+Kw+RawA4wYXTcCXml0AfsT0W0sUHrMx+YQgDofHBdYSjaaAvNkikTGaa4KTNJSm6lNuj6CajXzPlwcxjK1gi7BFaHFgwU6p698cPh7U/fZbvRgXeLaHDAMyFKQGItOw9wjG+F7waR6nXRUXojeAMBsggkY8knn6ePo+ZHFD35PCQeQYZ+DmWr4yDD7WXt7vGEckcUe1TAm2QXwlFsIKQtQCfIoaS5jVCxozcE0kX1cNqd6C/gUY2RJrk3cNdCUY7PfOXFI6852OBAxxCRmIvEzYXu70vnE3kcnCLsdv8fvEWyZQnnsC8eMsr9nBiJ+mfozuUAxhQAN1ngUoD8afHKElSHIwwcWSJyOyJwkbWvix9eAzU2UgJ1dXnsab94rlpSWRmMsgprtIqW9121HBPPXfVQU9NtNXHXxCMWEHEk9m/OIDAqekio/AiDuPixR1khOS1OoaIzXa8JEzB7xjUyThfNbdQ0g6iWw/rgCJ6hpzHCFBySxdu7bZNeW1WXluWE9B48Y8dL31KsC1u/GROS75uUmBaX7MRk/YxvU+0rmE9oj2zLIUJGf8g2TK0aMiwWXA/2oYzu0Z7ejJMhDIooWL4ou0zSY8neHkCmSOovWHqNrO3I4FPObbBj2Va0GgF2S0U8OAIpDX6ClMhZJw3MZI2j9ZA9SrGfnJ+lZ5RWp079ADqxbEheaRJhbhyomBq4uDRb32Vu5kVdk49nlO95zB1m9abMcD9/K5tIu/n94I9zEBXShFAc2XMWMcok5VVJHvVM8O0/3JbSciSOoaGDzz2WZxZuUCCq+gxAqDP/jfkq1JAXQueHu/Q6QFM4cdWiRxJyQ24zfDcDOY/C1Os+AJhCoL2VnkOb8JYusGmvOLAZpyYmRmnT/Mbq5gPQgS8yiB9osoyTRr4QKuziHs4Zp1jsSqzZuScPkx4q0VEQhQ15IvLxWD56VJndGSHO8sjhIvTCLM0jV4ZrTAO8cQlvPnjh2PPn2yIe50lapWHScqijahMokuQuAZnNIf7vA8cTybHoHRaDxK/RAwsEGcMHoljfNYZ45jgxPySvCJaJNdUfbtdxO4u8ZpRXP/i+SPTfe3TJndIsk+bPLGHExs9/VjKjb28WA2pmnxJJQ7qLNKKbLi0AgmezJKKsAtMSYC+wgPDcYzz/DARKJ6qjxFlxOvKaoOlvY4cK3BYlJse2rq4l8CzE36fBnw/8FfhgRWdcAP2EstYrEbj4pppRumfimT0Gq4KQROYam1ItE72hhYgfAnTmiRmnsge2SbwWj6Vne5Sll1H9VPHh7BMr1Qm7+g8YRdiPXAMdBGeQr8ayUFeMrSdmNe0eG8iRzvSNAPTXxLxmZHa802w6gW33i1hKUcebh4CN/OP9UJofw78buAzqWYSAK0KnWdzgZ3RwyirbAOsmSfocVPgPPwUYy3Q/iDjj/uos/j0TeBoB5p2YPphyGdFa/IsLyw5Zg0dB6uvsIxnTDLHIKY+h2ByhFBg39GQirOR15oZKCDiFlMc+ybnBaGeBS37nMcFk6vlzXr3doezl8y40YkxzYh01XegJjhiKidYC5FVydzd9R1v/vjhGJ3nGyPlGTXPCDYes4v5+GCUPYz1rBKFakH6Uyl+y7MLywkovfjTi1f93KCZSrQzj/cC7X2eAz/wQDv64htI0lyr/h8/HG/9FC9Ln4uyd8kjbqccQeLgNAfOD17NmonJBOPYuPLpzMM/0jQkOU1dOeEcK6TOWd3C14i65XYHed1EXveRTx1MquFQkw+DQTOKe3K0huNcZ/QFprE050ZxwRxBBEFUCAg0aoQZ8nl6+lkKAXESEc9vEPwKM1PEh61dMkoFjUx1jptwJXNHYfcEeS+odGJQO2Sdj5L2CD31iNFX96P8AXvY++zJDoK4VL9kkNGFb8/TNwf0Rso5WOiFL6tXjiLEMR9xTD3emS5aOxj0LV/fu9Rbd4yC6iHMKVK0jqXCyk2BORkzO73mq0im6uSoVMusYoA5URM0JFLIO2gL8V0ss/rmjx+OKvp0NVRPcfUcLRmpxGQWMQJ27q3SxRQhK+AgLRxaFaexpdXPreoJjfYUl6b5NbTnU5eDd5HnvRlRxhSWIfXmHQMS3pJlLxFiJ04+Dbt/DJmlfOeiAE7mUxecRn/36eSCChhoLwgLVikKPYtOT5X8OwW+V13VDzi/vDFJoOdf2y7H6UPmUOCg7ba8hCkX2+KyI0V7wbsT6pvCwAq8E4WN14hwO3fk/Yo9nJj5SXjCeKLWJTZuOMtQYukCpyKH2AUeqSehN9JsVSaGYmpMqyxT0v+PG5UI/uLWxFzn5zF5mr8ePqVdST6fURaU5gS4gAMZ+5cfwn8azhjcTFqG0VF/MUzGYIbYncUq7AyUNFCw2JfZCbA7laUeFBXkab1oxfER4YXLRheKcw8T1xyiqnwsk0YRfi9ydgD5xFiXCYy0MZn708/Q9hYv0/E2Ej8uPKGR5xRRNyzywigz6vo14YwVhjz9SMyL3NxbQocPrd7KtS60ppb3gZaWAx8HiwlB2LITx6mmnQt+yGdEmcDRwZYz+CoSoeTF5/njnWMYVCEBr6HPTi8vKnKCKCfo+jSaMQIR6QtAeqJzcy+x5RJXDEyPpEsjMCpybodHbB7fwWXMoa4Vk2klQRnlbqE5GLTz6blJzFQADXy31J2NYW8jPyAywycz2PolZNuiyU+ht+g0X4XzdbatgA5DO5IFR8t9kXAUVwVojxeWdp2nUHYU7XIHIZZ5XBIrRJnWLj5VDo+NVrZUh9i9Uk5nldOG5RF2j+DbAcHuXM4o2+o412G3Lp/Ywxb5ZVYSxWkIAdAtSO/wnvs/Mr/zwWOO5/nDhU+fQ74IxYK0C+M9gBCDZOZZuymsZsGAA+H5jDFaOO2ed2HUljmFaE7VmptssDITZhrj0zDFii+eEkckMsxSA4Prr6vEBodPJYmFaQ9KbIfVQXZjiNseYcRbGcd+LGnitBfEP0O6oVhecCJ5cnCWL5mbCrsnyL+LduzoyI6mPoxTzABDuu6I83GlM7+zOHOjHWdXRc5GYjIAzicUU4muJkyT494vSMHidNElMGKXi6TFIVWKKPLC9c6IssU5fsVLI3ppRy9L6UU7XnRkR1O/JlCxQoznG+3P0QodJ9rR/0A2IHL/egg4S2IFlLQS5zm69PnZvU3vG7WKrOtL13Vf30P2tLMGjvC6zROXOjILkcvQ0ExSwjzs2g15vBDJjKg+PO3ajI+eb+IpL/7yLp7H92fgGWcQYTLCfAg4Fz5K9yU94znzl711w/wnzLzLMIIr8K1h9DkLD/3SEp1DwLxYT4A6FuGYl8rmJTiMbIiZOVkhS8EpohFi6A5ZXrGHE2sgZEFJX+Nlg6O8CuoX2JZhw8LvIARpBflHwBDWytz2kNtanjg0K4rgOt8QJoDw66bAEEb/4uF7IG1XbH1+PTGBkSXEoeU84rvQZ/WIZgzawygb1SP6ij2cx/t88zqc1+e9btpr14VDUPmhQdMZq3K3Y8qiVL+Qbc9SR+2KOp4I5IhGnpbrSb+mUvyhWGAF+rNdsfIjZsoZe7u7FRtrBOQfKu2sfKvHFMeBhHcMtZk6klQLYSQkZlzS3u9LjIm0XYmXgbJf+RJZz8s0OHkJJ4vhSg6mQGHKGb8k9DNDtuebqNWLcr2oGOxXYGTg4yTFeC0U+lU5wY4sZLuWgy7MdAIWepwFkDxjlChvYHzg5L4yfxSnERU5DyuleA8AM8NHL9q0o9NfE7f8GHA8OVKAWQStuNAGUrIU+mbQEKLf8rRSXuefZOhtGO3O5B+Hpd7Hu4cGCWq+pBjaOiiOHiuf2AjVn9k4405fpNNF6fRcutGPGSw5wdWi3tDxE70nXdf4ij0czvwUblz4oDk2dbSLe/pamhOfSizcOFe+eNaoyBQlsUVkIlIXTavwuOkqvWUYbdyWNkbxrYwiwJGB6OL9eqeZORKbp8h5FN6j/HaI8Cn3Njjzk/cephzE+aOYUrISE7SWeN9gHEMmaiOkmZvq5CQIeJxrzm2FVICzsOb3lyvceZJyFQkcELen2cfspm28NI+TFfI5vMn57RDhl3BvizM/3+hUnq7l2DEe3NEuaX/oZNH6EiaJB2HQIo5SaDiCellP+tEqs7dzK7MBDcEKFrTgtGjHmjNCvxBm7cnV5ih3l797fN+ODz4l3hZhfvrRgRtNeFfPJ5kPPn7o4rq+co+QTJEDNjKOg7nIfPQNR5ZFbhKN9X46aOQGP2EceygtQbRifEpl5oaDu663BN4j/E6A8CH5NlkzGVHywBe59EuOryEe28X4obyX3meR82vQ2c9ut/IctshT9zBBhTY1h7PAe2I/grvCNJks3wOjiDoFwAPLhdGEk/T6ZMe0gVoPbzj8h9zbfMLPN2/Ee4PeG+cJB2GWUeAomMmxMVMcc3rYKKa0htR4OoUna3gyiE/hbcpvhwifkm+DN8+mApiQ/CX1zbHcoXiKsE8dXXyl3tN/cbh7ZVGbLjbWJTGPVjDLAwYJE2TuFMNAIyzgK9Y51M1Txk0Z3dHcPQLv0H0zOLgfIIZnEo0Afb0f4Av2sCVTGaA+iLNkrtBGxU1ZVbkZHZmZ+0Ywf3W12I6W4EtQuI28m0ipaMGnf+s8u/UKZQ1Gq8ifs+AZQx/9XZmyU9PsVEDbfcG20Guqwmsv796KcDReyK72/xRN4aj77PyIIwZ/xSqNpXwedubZBJHeF9RvaQqn1xhSEh0oILLhewk8YotNX2SlKIhiF7AyQuGvxze2yaARfhAjRj1NxJT7PA+ycHrLvVZ0t3XdanUHnjGfl3t0I15nqSIgBmTlOVkQixyk96sCFzPkeHKsQHSeB0NfiOvbNU9dg8HCeUKMX2giXmfF4fNBiojpuqdMDyNb5LRPHvFV4zoPkIJ3zCySHMrUrp0OYK9f2G4udoIfL1ayY6tPXa7lKuFyUTU6BuIQugmKMJirkq1CO0OcJ8OFME9x8DzrZ0GUHfw8JcihvcVqFya54OyoL1HBKHDi8JpPlqelwleDUPZCKdkMfsYqAMDwyFijOBuUmkswFnBsdWKWxWpaSu9VPEf0czVCLxbzYjc71vswiDKjH2nPThQhcXhCNor49YyKYLMHs3NML8FEesHhmjhpyxWNuU5VAsmjq9arru+fDR5I43A8K54eJYh54lZWyU1CeTkrLxjzgjc72Ps1YZQR/zx91ccTiUxJCQdxRtrkUq9FTrRKcIVgN2G0CdwK6wlrwhG96yvKOP9IxGz3n10wWIxXesHrN8l4VBiPhKfSWlvDI51QzI7c7EjvwyDKDH6efqTnxIXOpXNjc+EhZx0nOHcZKYvercjaENIF2ORzObIi2eZg8SuPORQNeicS9oNxMgulrZkYRDivS7IROHOoveflXuRmR3pznWIuBiGYgohVudpSuMqayGRKEJ55yTqffLx88mEXYEiCE8O9srT54rSidZ+55p7lpBQcmnBnLMlR4Uwj4BAp6hor2psMnYMfpk/P/csWExVWqIjAkpniC2xL51lOCOtqm7tmcNnE1aQXibzpKKuTMUUcGyYOutY5hfhN9ZNZLGVVVn0aylmv+vlmaThLyVt66Kqrjc/RRtqlhTb3NpnpiEnD4m9SrmXZAlv3cnQyT1fzQkIvgrQjzg8jESuIkPmvmavZubGdTE5YB6HT8yVjx90M9DBEacLAMFpKjc+9RxQW7hFaDWErVjzFoOmet4XaonnKcairN94q3HTKPL2iUC+aMUMfK07aRYh1/l9TRYgn9rDDzzkVCOEdh7BoQFr5BlTsFO4/gjae76QFzo8JzEOJG9YlHNDjgPfEKZXkr6eoh/Hdnc/74lML2+wVdO2CZ0ccs+NUidklZWb92a8I5qwo7MnhE05skRn5KfAJ2oh6MPq1MOFDi2WPM3qKqEYtCOeBQ3YVBRj1D1mOgos4xz1edU3yglQAX0FfCU41ca8/32nnt3v/3YjQDCCdgPPXxHJWDPach6/HwM0hlSdYzJhNjknlkIiWTZubEAISDu3MDGNWarpPHywJjThYonzUKsMY6o0b5OVPzGied+f0mTtd6XYPux8PmtGjGWt+GjxZQc9Tghv6lxkk4e3zfULGTDiBZEUxGPD2JbInSylSioB1OUM/TF7kQZhSopBECIN4ioGjXcTZRiwxvxdhPdHWE3m9UgonaHOCvBU9DYxg73xK3hfPzoIU2ee8pzd/+nCoxdOnIh51cakO5KzE3w9dBpW7ZYYwmZYyyhxgHmKZRyoikqOPtGmVYNbX97A0GUVLwik5y/9f4IMSasBf5TW7wsppexlwM2G+jGwiX0yRDUwcuD4OuQk4A3pa2Td//HDs45PtWhscMQCnICe3ZQdRnMLyEiSQMrcwjC7dNCIt5LcoXpFeh4i9GHoKS+2aAzojT5sLUY5qQdviWKcD2v3uXn+810/v2WvPvtv+YC3hNHUcJe38gD2cwF0GH1wUh8+x86jU3eWdtCCbqCxY3UVkCp4NHKesQaGnnEPNKWzplWAhgbznrE3iyowx2ywa+kIkhe2ltr1UuJ0694UET3iwhYpPg1QjvHz6gbQTd7thOgiaHHaeiLuWeTzlkOMCYI4yPQ2cOhEnPiIrnhh8SzZ8Vj4PLKiGyWFIz8WU5zkeoFSYNDYYp5eZZmThBbtOcOwE0x/GS+avPt9cpXdX3lPAIPYOEYFTZeSM+5ociDa9Jj24I/5E3/L0ME8/86IuL0qzo7pPwyUj0pmTkaEmyAhvsoBjtZ1BfeQIg+K8nu7pYBB3KuCATqg1fZBYfpapLlxgxSh2d8ZRBjz9ps6V6lWuOXVuTlWcE3OZAZoZzC3ORESMVpV0Z4E0EDXHraRJn9788cNxH89p9hPSTVwekdEPv9wErUoe68gdd3MkJRqtybshBII+2IosiAQvRwRTzhFD86VU4vG5QSLtIfVMjnFOUXE6sJ1+bbu7+40rs12f7So/5KQml3wyZ8wQRorsRHKfdXHGiKgxzdR6Xyg9UTSGcyL+uqT+y81ReMTTI6o2sd2R94xcutqIL9jDzh7PvmayXBJ6E0cc97EnCYMfI8cHs+cSEmBCM6YcaFenOetokQ9QvAcfODuDw84HT9DyQhIpIHe7Zvea0bsT69vCgJvEtlLedoL8f6BwacZ5Tw7RGpGrJF1/9ILmZE2cwE6+G/SLOMigrT5jN/gJiiOlhDSP1O6TzekJcZEL5rVccaZocZQujqKRCZ3tmo7CazdympOcViYn6nRiVDOi3ceCBMxCgo/djOYFe5i0/+kHCW5Q4QUhKFnj3g3MSepxniSDEQWYDR6ZLzVs/DUFGD27k1kkHFO8fDmOlObzfCGbtnuqL6pSh3RT9Oua4yFcfuVkTewkyyLaYZk0RbRfsYdDkGebc8DQayHaIw+ptcSoYFrMUrtPREVGUnCakAhjkICc7loUQMlykkWbaUUksySt2CGrda7BJH9KxKalr3fZTy9b6mVXPb7u8Xs7HviQ0FhkRKbCoOU4SecdPf97TkFo3ACCNw+bvvpb2jUgf4FTXrMEvDFXCqj7gTuu4x5SkMgDSZ8ejry8RxmZ5UBO8ZBTauTSIpNEWYzr0x5AixRLDyAFGCkKnlEYv+bOkfWLQ46VoK2Q2moCrLgEIdGXHFmGGLHwhD32oSwPrFiNvHYRF1q6tOH6kaMdaXqRqU/RbUJv0/9fQg0tSvcULkYWBA8dGd98XTdzIzbY0sz4piSD65C2DJEtAGxvLTPsQvZzVHgtkDH0iN7dwliu3BCOsiKMMWbc7hb2eou9XmSHX3p01Kavt/Mh8z6I6Y+ujnR5wR6OoX6+MeyOH/DcBjq9aZdmDpwhrpa12huS+oF3Af1mn7XZ1mr394a3l7yA1Avjzah/HVZ84USmgrMog+R6aCVlrHw5rPjNHz+c9IuctERGHUOspH37mtVEiFL74KL1C/WZYQ47HWx3U5R274vuadfKBxxyKdL8dY263lMaGN81Tw3JM0YaqHiPV2hz9uKYQyMG5hQFvDUeyt1xct96NCi3CKyRktee2o+fJTazyk4WepHTMbMS0nrUKy0NkMY+GembP37YTFuyvvQAxiruGjmvfFiJ6aqzFCynrcni4BQ+VKsXPm9TYDKWQ1hixntcmd0GxybHKdHTnWN63bfkvVVnFbhJOy/JZ+YEP6VPFu+Rlst8ITSUfDJZwLKquwYr/9K12FAr8SWJAhwRXKQum+KXNINKTlKXJDj3V0jPJS2xgI44CU5xuEP/epcA8RImToLF5WEeb7N53lqrne6AuCJiY86nkbshShniXKtv/vjhhDpPDmkS0f0uL5xc3TVnF0DSQFwhC2es44nhESunRy5uSpsHAyIgQ18+L8tK37dP0blYEcUOoV0uq8arE7arip0aZC/qcmI0O6RbxZL7aYXzWUrd5Js/fjg26embMM/ieRay4Wt4D2O2ZRhNGCeOEx7cZwGViihpb8uVkdfkXh1USlxVMubgUOVilR3z1+kRjGWw0fPDoRE99jjmOZhuXOclo+zk1a9hXRZfejLToQeDOQAcq/K4QKFFqKpmNsYl1rMvK6EYb2pg9FBhaaTCFnp0qCyl8RjMORWBO1nkdMCAjZ1musjtdnS6I71uSpe+2WTPJoc37yoYf4M5r2p88QtGj/JCuXvk05sTXHgKnetrYMRGYAaPPAaMD340IKpKoEOcxiBWKRomGCEFTl3wmMOQXRlwpHHl6jYcKRrLbFXGmWBpXFwoOMD8ijBht7zdqYb3iuetYnvgdA1BDj6V8aXyKOlm06x6J5JJbj22f8EkQ4MzSsMnKrGzFH3VNeAcsVCjVw9ROUPljH3GQthnkUdVZbzhMAOqAg/Ag/rpyztOrVt9nRdohDizVOlpp6934oEnNjjahBex2fGdHQ3+EgJrUpon2yt06/L0sYhQvEwCi+UzZFPyuIB6M34i3oFHhKF5nez2XabcEsQNegMN/QprNs1FC6PJkTiB3seNDwzTZVNAkeaKEHCaMz2uIAOGaQuPFX9gnA+P6kIY0+e0PdfIe7TZptkfMiyTGT0nA8oSr3QcTbWUctSf9T5leDj8cJeA9IojiphJXTIM2lfzPSLlES+bqP0Ssm7xbBngWrl/qGI9tmu5voBTb5ie5DxbHCErpBjlUEmKRKs0a0GTb3ysKWJRJPTWiFaMy8nMjFHT0PPb1eitXm+1+4TfDhDMeGKPvu/gAzx0ao++P7GHQwmebyiERzkchoK8PtejRfTt5ysuI4OaVRR7JXAPSHHTJNESCugbSDhcUOoI8XFI40FCavorUnM50GpHbioxPugDfUlLtoDg6dSmrP1LOLpFrp9MiynwavAEWAI4lEi4OJqyB7encpd+KMILcdo3bXVeAgFUYo4jw+nXYaCCbmCmS+h9Hd5RG+Z78sbItd1HupkVtE69rVOd6xB9Jyywo4j1bIlndg7fUewlonHhPBLdK9TZMSs57Q8+Xj74sNNtUv+OJBK9Vy70a+2u87+IOUl+5pqFOqiHwHHrfNwWbZUaV018pgWOw0zgxulNriFeOP+lcAkhjmmXR+1IAI5g4MkLTtrPSRKaKcVfMtbd3FBPdwM6+9Xd3RFFaRdru6AQUWrMQWdyY8EcXRUsy8d37MojYzZ58+VBW0y0xcdfE2xaBOL5hnDYBMXhM5XVnc59/Bg9et0Dchu8qxQ+QJeQBPyF3qqMNBLq7zBEKN4sMsoZKRGNoX2+DKlYh99HGR9STm/9gRfg2gHxr2Gdln+Wmjm8CD7CA4MjWrofY0OBqTRhJrqLuhYSsayc5IizBr+9aukKRUtYj4hNUFjV3r0Om4065PXOtNEKxnNDoc+daXvBHmaSTGZ/0arCQb3ImZItamvAAznwhgO4YfN6kGqTjhq9UtnqYISGuCbMbELIUlmbQSx7zzG6Zk10xc5ZEwPMqgezQsKupvBSdU5iz0wD/hqhwlIYnqwMdJwizSmThh5+vpKMHYk51IxHWoviN3Fofb9WUQ4MghS8IamADkSRBhAS1tU5jEE0vDoHRs6v84C93mavF9rrnfYED08gsQWVD6UKU2N4sjaA48VhRpAiCnW2ZuPRpsLzQJG7Gqi3ZhwOkWVDaBIogpHlEYgGIcHdmMoFpMbl+CicbpSQNITIAGLbVhuF2b3hdXt4zSG+5GFLJLak8ksopxXTiDMBiS9VWF5NwtuwxxMaSHgDXzyhWuDRG6YToUYF6AqwLZPph0BOxGTGV59JNSYNeLI4QmwmYiVlFIfd060wG7VzhQNtuVHJY6zWggvHQY/p8GOrY+KdHgE3AFaZsne3KKC2UQbLBNgiCYydTIWX2XAzIZ7o44lEtqj0K4iJ6cGebxweH/nTEOtDPqhZLLy8qVq7JNiJ1o5yF83UOE+vIIvZw+J9HgOxGYvFbz4Ngw268nTZjUuGvCvHZ4jgB5Yy4Q7Xq0PhaxDJMqAQa511kANPiEGTNAakz2J+tGO3xjjmxkQ5cww/y4fId8ZpO6W2Bro50bQVfDux+q8Jg6349cmhJ7FdXhk8B2OmzfhcC3LBmN6Eq8XU/9XWiZHG1xxrTj5rngnGM85xiAt4esA0HoZ5bBV6MTiE5QzHb35ttFlI7VRd+7G0GXmbcfq9Rnm0IWpUle98wR6Oz3uyr8KRxa0wXnDcx5i+jYJGrGmC6crTtY7YpcVyZSn66xTUzpN6ExIyFbsdyg53ATGOqofOJ/tGzOMvs7PZbcjxGni8hh+vgdJx2Y6L/x8nKRh6gBRdkOlHxIwF0KeiQPwaIxTR74v04ExZYIR8TQOdxEi4pHmSHUpIuHoHMD3767obQZDj5JPf6PXMdIunVdrCpqmBOnUJtoRhCx6/Qk8wDdPzjR3z7J5nJ5EAH3xYNI5HIDeUV5Kedh6GnaEDBid1h+XqbQrgUQaPYjjChKdj2LrHpzTIunhpEa1sQBhHq8Vs7UTjcGZ+T7wm4GCru6LiovUlckgjbpt2RYWVT/AqMxx+5PCpXxKimbHVk2MilKxy/ppeFJGHa81qGpEHZCKWwVHOYw2CymS/IsNIkAiLBd/qfAIE+A75yXnQnyQ66pAccO6rpt7rWXZanN2OaD/SsyNDO5L8jAnZHObpkzWcPsA9kexNWE2VrUOkaGB1kPPBKKAUJz5GRBcVtiyavkZ+u5U9imQyql0sD2JN+7sph/qCPRxP+GQPhgHWKPLAccRXb2OdNdyvzH2BEWeo10ucPnqIKNhPMnaUfEeOqz+HnkdmVpnR+3a1dX5hCqjHl1MS6BmEd71FXiuS27rkO2bbkduOf08B2KMZj+lJawqA+8cP2/PJvCrazTg9lxkY2fyVjqv0lhI7xATFah0KkitLDxiigWkQK81jRrSunzS9qumDV/Q0+4FiUwPXXrGHs3qfb1Y7GrcyzwNF4StdSlyOqAmtE5F5DpdxbbnruDxHZzvGX0PxLWouw/IxvrIx9cU02fuQVAphQ+GpCbn3++jCmCL6MLlsvLdrdQTQBkc0CeWA5/1PGOdjVObg5JBHWGX7VqOA01Xg9CA4IYITUJjhx3JtFDZCGrpEnU78cx1LW1zbmz9+2C7pya5kDK7pRJkMmfC+PA8tGnJtErFTrCBtiNJyFJYHu+rUXtGhRJuFtWgYJVh7xjNOgpAUNVk6cvkT97qrvG4sr3vLm+rheFTHA88nTAt9gFsMeYS0Oxqm+ZSZHnj3xw9T7pbpOsQcMDYbRxWhiWuN16FFyhOncEJwWxNteO4zn/+EqWo8O0TgUeCfsVz6OpYZzSSotuXEKtmpuci9vKOZo3TymY7sbmv0pqD/qQu1XN9z+qxQ2PWhxqXPARRwccSRI7uaOmu0uNWCwrshIWBcJ1BACaawFtlwTFVIZWbDU0IdfgnTwWG9CO61YHgtG06Hh+OGHa/tePkPeycupCw7d2bg7Dbi4ZHXIQqIiWnMXCqqu6SIBIfI9IHsfODiwhzGKoNDD+eQIeV8DuyqmmvXxQXKKDq8+pCbJfPRyM2wqJA55kqrKs8uBvSKB+1aQ7M0EXjngeIQ0hPHrUW4MI6ZSzJPEbPX+9XVIa//qkEvpgl8sukiyiA1rgHDHu5+UboyXmN4pNjpqxa5ojtLGmvQbpfXcXE4Ixy0GV4fmWWxgHwwOPftFNj6qQfZNddOhbZb0O1bY9t629b+11hRwwJK4wTdfU5se2KnbSL2iyJGCkKDGMbQF9HjlFphq0Yxtcyh5VpslKKxmyczsYaARtjtIMyNHtqIa1yGqbXYwowp4viW2LTblpH/0IxaBvAphguDhzqbFopVer0NXccMDsaTaCu/cZkx+SY+YB3zvCL6PhmnBdRlGkvkyRUyDR/HpCD25aw7ThsORdQjr6jaLcJ2arZ9e2zbb9vez/WpBgvxQ9xjh3h9vvvjh80s5TA19BVi9B+mZrd18nXCNLAqjQUU0NxnTQ1aUEHOr0e8UVcenbZFYBx2p5XrPsoqIhTj7FefJ9zY6XUnF+9l7j2Ka/Jhkz1/6J9Mv/JkfxA4ehRDTvtAREVugwg8uAehzyhDllwo3GceGIYRnhPqKvrmub8Ro3hwSKm4J2ZZBWeoYTPQJdX3+V8vX+zll303Z7tF240uE0p+kVYOXy5sZEYSJa5Dsd786cO0fVLLSmyJuAteace0/NUqHzFkkmHigfO0PPwL7c/IJ+fm3MpdcGxG246ldOyqaYV/hWO2PKqcU0AsqLAXw2iPLMEqfGfjAzqkxaKsswdw3mRKnDLiGq4xU0kJK2hwWxwy3HW25uD4gV5yE6eKc+OuNcjTLrX0SjO9Uk7HxZt8wGEPe4+iowhHpinp7gV72HvryXuCqJYMuaL33ddISAyAmRsOI+fvMZeY/dpm1ojMSV4FFGg5SJJ1oX19SecwGfDWR5hZw1Ti7J13s0x2UsrLYbn73LMLth351B1bfvTJ/m8gFTkYJ7cYVy9QxsFPMkbzymuWVQ7ovOTunihav/C5HDidFeXopYbuTIYjcuxXFy+ayTWMdeCaXTnkVRrZhUmuU/dIgE0afsGON7fqU4blog4i3b1WUhlXC8rbR5BSJbKCcgAZkq0Yd4w1yY3AYcyOxoaUcZsnyBMBWQN9obXxNE9s1U5MY25hJ6vsZqG9rLVnOjxTY5ume7HS3kApEaz/vVhfsIezY5+y0wa3B2DH0vZLktCO8H8XzxdGpBvXyHowyYiJDLyT0RgsTyEWPieJVe+Bc7cmNeECKGFD6M8qebIkVw331HNPbfctiG1xbAu1pNzITU1BTdp4hRCFJ5hVPpURy59MiQzQQboB+u5g9tPJwsi1I/uBYyAkXCX3HeWNI2oHOZZMJi2iIYVPF+Y00U6Uo8Igk4s1xkwHNMnI92BEZ3wbzXvRv6sWWOoC8MLmMglOT/6S0To4ZZNoIofnUpHe1N7/15XjmixapmoVlDsIHmh7jVV4GnD2p+xOVITmJXbVhUamUoxmnuOFOLRDfA/ztLuClR6ls7hfKd+n15m6naPyOZqgXS9rkn8nVPjQP5mO5ckegRYXd0RHNP3NopTMOY4IdRabJ3C64zdOJFacPixxGAXkM47InG2sooqhTYZBVPJHLowPyNn3/D5n6qVYvZSs7+Rsp2j60F/hnCyn8pQh8aVLfTbMV+51HZMbosiCyNLCPq5TdevgQB44hiCPNZiRntkVZDA0fUmWxdWYxvC8YVpPAyNQGXYyInb6xM61vPFvtj+0/eeHfsn0J8+ZnuyVO84GpsGWfKczW+QedLrT0Jb7weHDnQNMjPnq10xyYggIZ5XZO9BWm5ouHDXXs3Ilbu5zyqknMZt6tKdeu67Nc4W267wfJLKmOC8wq9D7BXs42/TJOzJgZqn0TGT8nbUjUZc7eykuipCmLIiCqopLBjEsrc7tjmQMbvb/b+3KkltZbuU/V+El1NA1LePt4/b+fx8SQ1NXRtLBCDn84SjROmI3CgkkgIQNoUsgEaUbuSaq51TRwILZBD1npSRSeiKVKuY2mJdJXNJ3yJ4h8u1ICt0uTZog7G1ZJpD3XGoZHQ9luyQC+O8iV8gSjHVhkeJ/jEiAuod+uqFh0H4LcLQjO9d1N624DhNjQRhpwkgWHh6k4QQJP/5GnOi/4dgG75oEeltRUB5iq1EYk5AVtAsWt1QxttjrI3/pOCpoCa7j0TIH62jjcRLR7hqjdwVjIZfJ9FdfvZuTyIRxZvw0iQtIFJHGHO9bLs4ONeGf7vLX2YvczlvvFdTHL9Mfr67YIbewg3tapla+XFFroPh6LQNXjKtF1VaCOe1Wxvh2q8se4Ji6FdrvpjiXbbUcWuNgNRFSQmGegnmWzA/9jW0mdmUtnAWrxvQYkmdvA2pFS67iYbvYr7FoGP9q9fJOy1EfdcqUoctLGbnJ5gb+Ld4mQHkrwolRgfzDMb7uI/km/mUUk92QS7Btkgot4UddU0NZePhFAZsCaUJHvlOM+oab6kd1edG828Gl6jmrRLDKBat0UNhOUZ5EBYEUC99+QP77DRW/z17Ex9uaz1Xn0HYebLWTd3/cmzeJE9UNqzzCrM+eT2xxbZaZX2PafaxwHngkRnZBj9VQAWRIadM+P1BGiWGklJOjHF5K+BHIYQiV4Vlowu/RvCf+rQn/+wyYCyRQ/Vv9+4ZWNoG56AhUilOfl44RKTyBgYfXUUpvPKno0k54Ze7PbMNTb2yVw4oO++Vyx4wUApNyzjGCHqVq/zjLyFkGzzL+jCHAOWymrGk9ymMcD6MwJiU24JAukeL6OQA/x6UNuNNKAhL5oWwDztJ6gz78+EVSDNNVlYu7NYXBrLhzqetSXhB3Fdzz5ROmKCaJeyjN2lLRUDdiZbG8msvGYAsGbGICU+60at8ja4BhHj/Pq2OsmpaW3ki6Q5KjPJeKHnX5XNlLkjt0ry0QjhtCF9Gj/uHHL3J5fT2UTqkarVaL33XxPAIUzdgnDEFZSIPpBsSilu3ITXvz493UenWK4WzvvELhU57tZfJGTd7L07yZs3OMzSPs3wdfkvue3Fd9G9z8d1xyazwxVIoaOcCSwLSH9rakqHWb9pp8JVtAidLJlPRhm8jaRseSpbdKHG3UDqoudOpPZUZyqQ3xGHSnoF08pCrySlFeWGJ1qA9RUh5V5VHYlyifwfOtOCyGonQLVP7bcO8JXwTTtky2y/33VmMs+l2Qa7Ce3+Y+osutAwtoCTGqk77dGIFL1RkGdIXX2MTJShysJMIqKCxcYOFFGo18C08ZstxGlsrvxnfqmHTcLuKGoX/xRwrzcGTdU1kYC6DCaleo767IzuRXnmayt3DUXtMCJED4VoHuYHxkfUwtSSrKUtcPUJciYw6k8TBVRXjr00CXhVj5ado1aM/1w49fBFpMkAD7kqppHaBkbW7+gJyb3c7lJSxfW1Whk6D90tA4O/PUaGEsDTu4rPZ6MNzk52hWvprjRQg4EcqYEcyEkKZAx4AxxdE/AakUXWy5Fiokev2wGTVwFEurJNnFuK8kA8CHZ7LhYOXv9R/X0ncNPhRqrqkTULpsZMTmeaihlFXt86dqp/Q/nKwj1B5jAhnWMWzMsfRbjMrgxbSa6oEQsaWr+K7RcLAmHCiGbYKpmToCVrodyx/oq1cmUoR+bVvVIk6kWRA0ITG/VNe86Is6J87z0iYrhbLSKcM6ho05lkYChb0AEuTMnwvof5+9iEc0QUos2+sWZIBJCXpLEg8lChCr7Mt5H5WsG9YPhmn5crxZADtG29imqiDmv6O1SHINmznSyflRoycoT8NY2sbSPOafmT/P/f+3gJ8h9a0IO6dCEM4l12qW10O/Q+zGIbMMbU35Rwspkp0MTZklt6lBdZk+yDg2FSS3d5u42nXpIh6dCsLg/XKzp0UjVmQiNSnWG0ECDRKYvIfbfLVM+1E4+3X2Ig/h1j++Y3VpU4J5y0U3f3aBbR1whko860y2ntvygm7CuKf66Kay2nJVL1/AIljYY7lpx8Y0o7XF80y7boySZxQ+pfz5S8lfYv7S/wTzU7C+FWaxogjYU9DdKU87RiowymkYvtFRbqiMwQYopOk5evNj0gIj+NMUSDrW+4aEGtZPaKSBRQjNVb4YpUwIaEJXs7ghjzLyqCQA/8KWtIV9sRCxENgVVGjnAfwPP34Rl2j6ORcWh8WwfFkWb2PN1rjQBaDiugJkJ/qqru2BwIL6yFnR/nUpM4upyn6KpUBN7hKerbVcVKjbPKP7WXLLkmGWO3MHnTv01P//TUCVBUK2Jm6g9O8VPsCobQfFBJ6uTW/YIbPdb0CZ+IxSLE2rYsjPmjjswB32NgSuDbk0zRjdPy7G+t7ikXKxjLolVC+PyvIgLg/6vgyn0kjo1ghGHAKq+DgvEJC1JinxZ8dcEqoF+9QTzVllq6A25Kiw1CRkOcTKK8AbWXl7lvPoaAI2bSHgEc+5/0c5npTvWbmfBmYskMsDv7dslhhYwWP6saj019mL4I2NAQpuAmSsw745GzlQnhlxLqHVmk9RF0vDvIFffG+PchL+tO54c6a3CA9tKD7Nltx29BBFxSerM5GiVF7BYtBHoJJA699AVoI1NrwyPK/ARjZxyysm9eSeQ2dI+wK79q3+Y2UceWvonJbgDMqdMWSSlZkYMjEgy4Hvb1AlQ4Pb18nLmzJZM/lGjnANbqxo+xn6I05dPtgO2WIBSotVJULuJ1r8MOPaTExYshdflTxgmjuqNfLvnDjPs1GWvbJsl3GvBM5S8PsTWEnx4FbHXyWcGNZQgjWMTsMh4NgwFKXtIP4c+wLkD7Odd0MJb4PtjrewVIhVPt/66payoAlQPHG3F9UQLxqwMPqP0YWMXiQAxfAshb/HFwoEYdgSAyyPL/x19soB4VZHPpHreHFaTGBGjaChlD8cELpnuksrT0psF/wx8rajSgKWDAUbOP5rPUvpBnJCww8Jx0OPkhVPWLGF1GY4PKVwRuDvS1hJ4eBWR74ubG2zVnE4T3XZaGdq3RvOoXn1LGLB3BvqkNp/j6qunqN2MHXIs0KUYQYTjr6zcnXvDZyt26o8RvDTggCpH+TgxKAsh7649rvL/xOpoXpRDOpDZuG59h9+/CI2ZlNnF3RO7fwNtwvCndgYag3hcuOuKLkJPF24ODA+MW4XUdBFg8sFZQZk3K19BV1tVWMsJbl9hIfRqIx2ZSwtM3l2RdIb9SfAlQKOKbhg1W0zEqQjjzse2mKz+7T8X/7yYk4CYbR4T/WfUAc51ciRpg1T1nwgT9UHQRvQ/TIRYzHB1sYz3J5G/SRJoDkFgz8Glym6/g1uZXhjS3qw0rEaG4NE2sgeVQevoYuo2x5i9uRUTBDr+WgjRl7Qx9GGjc5L5Dh2cFgbEZN1iaDQUmNJT85hEc6LcWQU/hhc5vD6eNt2YXmqTnI83vbX2Ys8hFv/ennQujEQEYhcoRokDVxDN3kCDC+HYDC2PDaL7QfEd4KrEve+vFP6QDzDuCpUyLpTW3jFwSTlDBZjvBhDxl9J/grTN/4tbmWAc9v+sCkwYgKkAmFRCQapCEV8gwSJBFdsJxOvZyVczEiipU3P0VcARSEDnLl9khYzgJcLn3bteXtWJeSsf1oiIPWED+iXo2WOrm962e7y/BlN/Tp7EWu61WoweKcbq7Axcx6Xh14YYNgWGUzxfVd0+falQ/AaMZxparYq6CI2N09MjFfP/rAKtiiiVfje2S2tpwkqSWhZAkzNO78M+dX5mxggw24bdxGr7dMmQbHU7kStc4szmy6NI29shqT61U4MkenydD2G2mbVVAxDO3iBeizA3GwFA8hWsO7Hz1NWlXCwjLJl9dg87iBhyt9EABly34q5Tf4sJbc6vrPTDrrgpaq4P7aDy0Paz2ZcTOAua1iYvbTQmukYT5v6+wUMd/Qxtn1p51HTdT7jfyRoLKFjCSAPJdLQIw1UvvSqqTe0sUx5YsbUwE507Na83pboa1hDC3QNfdwRmqOtq9/TMfRjaDwhYwLXZ/7wNO9MnGhjHNX6ZSCEeIXWb0r8MZ6Q8YrMNzNfnvv+J5ya6CPpXWVjxUgkHIMLfMIp/uNXfoetSb5cuvEa4fdB16rfVfTHbVv0Ovdy1Q4wQe10n0RHz79Rn5SuIneeuYjUo3wLKxke3OrHIburbxWNu6U6yGmjjT11bcTfwT+iSdqnxTYE9IdnogXKBcc+rl2wfn4mmClL8iAx2z5mqCyjJQkwQyeGZjn6/YnjSx2WacYcyTir1VvF7w3rWtGBkq3hgtVh2w5NF3EXxyqHUG+069GBshAiQoMh5pamn4opYfe41g2x8jYC7TS+p/kAyx+Y+2TuNvXOX+pqp/7qVk8j6VEp5pjQVWLGgXG61UczkToQO0+JoaJ/cOu5YPiZMauH1+McTj3XtC8l53IX2rbNHAfz4pYvM2aKMVmE+WIOlLjb3Dt/KUGRWdOtdiAB5Cx2ESC9bQztBS7eJWvRNQ1xxcge0HllGgZitOU8CSAGm4bfy2usmB6VdE5b+SoWUbn8IE2VSGZFErEP1p3fhuzuvEd85ZdIAFLKjwf56+xFjOlWI5DoSTsD0I8o96MGbSm20Wz7i0S7fQRtKYZbtkkMYL/sDg5nT9utXnAXp4c7C79zFAtW5fuvES1vOQHFCCtGcHHTzq9CfnXeiTc+uC/sxXon3v8+exFrutUMJEXURh/Uq8Rq7K+B2DeaobcPIi3vU0LyAE0gC5AWBDFaJBvHjA+JWL18gw+2Mgo2GNbJUzJtZJorsdSKZWLcuNO7kF+dL3E9BeRbgXQebT/DVPccV4lJMvnTMT6vuWsZfT6ryNfSNeoY/5T/tNgLvlA6tVBzQ0f00fzBQJg9eQxvW6GBJvAk4WcEwYf4II8n8vjj2zueXc7bllmdVVwQXKITb2uVPAqzhZ4ybtVo97QLd8dVVgXL6g6lMbmoU9MxzNrHDk9J6wQcbMGZ2rc30LEUk2WkJIP94CxS35K7om/veHY3b72EWL4DSg9rq/CZKDPLFdnVQH+dx0KwjaIOjMhWDS6m3SoJ/Zp4n24W29F6GuUDlP23WRpKoTUq5HnkSgJdEhdTX8F8S+qKvr3k2e289VZd8IXGXB00+8VKUCyK6DbQOaCSFdJb8lRNAwKzoNM33U1oLULd2gKugQzGU7gLG36Pp2RrlEdvJ00oWQLKElbuLVLvQrzRl7c8vZ3WDydouZepd0qy6GSU3MLeisZQOJcvUkKUpOJvsM8vcfc98rg0eySXmd393Fd82V+ZvnFr+mkLGhSWhKPYFOtywAYP0z2DWprRV3OrgI+WnsTsd/H8Y+I6XHCH+vnTXeFuwSXoVCki46sXDx9IRM4ieBrxMwNkBpsb+JcuLXVFt7oQ6F9vXwuK9Z/TXQ6kIn3/A0giP0fMI/m9reuS/+XT7AOdpVfVymfTSHYGaJ/RdE0FiGgxrR5EdA7aDORJTMA8I/Okued9k1u7YkHdNX+SW/8+exGLsraBIm95WAS7aolAuIKwG/p5lHz2sVeLSUSJB5bV9fHOTJUKg4sFwv/2+R0PB+KbKOxNj5CXt8rQwJzE8SzsZzlnfiHI/fnWMDODum0i7nSrYFR53GeGG21nmX2g61timO1uVx7qnpa3in+aI4K6LZ/elriKT5n2SlBNGc3q/Q0dPDNGH3KUYahEUOyDeefXIb8+X9plak+32sFpqoygQRcea0RLEuFDYhxufVddl2RBV53aZ6NLay8JDUKbFsvsip1v6EhFzV/AQbUcVIFf26E+xJIs9qSxKrNvdh/y+/PGn7L8vz/w599nL2JSt5G6VY0d5wVthyH2KS87QK+AqnK/vqx1R1fqlBNhCPYUDGvdgXJlfVbByfMf1VtIz66fQYyBHgNJbuDpfcivz7d2mdnT7QJmQ//RYlVKczi6xdc2o+LzmJevHleIMxpurzA4u200+uH2l9orse/3t+0QzoFO5o9v+++zV/rCjQDsV7manYv3fVqDoanejJeHstsIHk4eG34rzq+io4Dmo69TjAzRfdL76UzrkEbyPhrBa99ayCCGQRKBMGp/zF5z+9ZHSb6dEVINT8CqEacN3yOsVA/qDlZ1QEN5iFRfKIVPq1LM5RmQODaJG073qoZ8ofWoEAiSdJvxR5FrPdOWqcNjDpI5VPa02dvJ32Y8pezbWUovRqWxGWZF9iPkjYhzW98f/sG1R4gpYNXO5erB8s+tt35gcv3o02BPL3/a+i3+7/X/gXerggplbmRzdHJlYW0KZW5kb2JqCjEyIDAgb2JqCjM0MjUyCmVuZG9iagoxMCAwIG9iagpbIF0KZW5kb2JqCjE3IDAgb2JqCjw8IC9MZW5ndGggMzA3IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nD2SS24DMQxD9z6FLhDA+tme86Qoupjef9snJemKHNkWRWqWukxZUx6QNJOEf+nwcLGd8jtsz2Zm4Fqil4nllOfQFWLuonzZzEZdWSfF6oRmOrfoUTkXBzZNqp+rLKXdLngO1yaeW/YRP7zQoB7UNS4JN3RXo2UpNGOq+3/Se/yMMuBqTF1sUqt7HzxeRFXo6AdHiSJjlxfn40EJ6UrCaFqIlXdFA0Hu8rTKewnu295qyLIHqZjOOylmsOt0Ui5uF4chHsjyqPDlo9hrQs/4sCsl9EjYhjNyJ+5oxubUyOKQ/t6NBEuPrmgh8+CvbtYuYLxTOkViZE5yrGmLVU73UBTTucO9DBD1bEVDKXOR1epfw84La5ZsFnhK+gUeo90mSw5W2duoTu+tPNnQ9x9a13QfCmVuZHN0cmVhbQplbmRvYmoKMTggMCBvYmoKPDwgL0xlbmd0aCAyNDQgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicRZFNcgUhCIT3nqIv8KrkVz3PpFJZTO6/Dc28JCtaheYD0wITR/ASQ+yJlRMfMnwv6DJ8tzI78DrZmXBPuG5cw2XDM2Fb4DsqyzteQ3e2Uj+doarvGjneLlI1dGVkn3qhmgvMkIiuEVl0K5d1QNOU7lLhGmxbghT1SqwnnaA06BHK8HeUa3x1E0+vseRUzSFaza0TGoqwbHhB1MkkEbUNiyeWcyFR+aobqzouYJMl4vSA3KCVZnx6UkkRMIN8rMlozAI20JO7ZxfGmkseRY5XNJiwO0k18ID34ra+9zZxj/MX+IV33/8rDn3XAj5/AEv+XQYKZW5kc3RyZWFtCmVuZG9iagoxOSAwIG9iago8PCAvTGVuZ3RoIDIzMiAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJw1UUluxDAMu/sV/MAA1u68J8Wgh/b/11LKFAhAJba4JWJjIwIvMfg5iNz4kjWjJn5nclf8LE+FR8Kt4EkUgZfhXnaCyxvGZT8OMx+8l1bOpMaTDMhFNj08ETLYJRA6MLsGddhm2om+IeGzI1LNRpbT1xL00ioEylO23+mCEm2r+nP7rAtt+9oTTnZ76knlE4jnlqzAZeMVk8VYBj1RuUsxfZDqbKEnobwon4NsPmqIRJcoZ+CJwcEo0A7sue1n4lUhaF3dp21jqEZKx9O/DU1Nkgj5RAlntjTuFv5/z72+1/sPTiFUEQplbmRzdHJlYW0KZW5kb2JqCjIwIDAgb2JqCjw8IC9MZW5ndGggNzMgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicMzY2VzBQMDQEkUZGBgqmQFaKIRdIwNDIRCGXCyQIYuWAWQZAGqI4B64mhysDzAZphagHsSDqjS2NoSoRLIhsBlcaAKfIF68KZW5kc3RyZWFtCmVuZG9iagoyMSAwIG9iago8PCAvTGVuZ3RoIDI0OSAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJw9UDuORCEM6zmFL/Ak8iNwHkarLWbv364DmilQTH62MyTQEYFHDDGUr+MlraCugb+LQvFu4uuDwiCrQ1IgznoPiHTspjaREzodnDM/YTdjjsBFMQac6XSmPQcmOfvCCoRzG2XsVkgniaoijuozjimeKnufeBYs7cg2WyeSPeQg4VJSicmln5TKP23KlAo6ZtEELBK54GQTTTjLu0lSjBmUMuoepnYifaw8yKM66GRNzqwjmdnTT9uZ+Bxwt1/aZE6Vx3QezPictM6DORW69+OJNgdNjdro7PcTaSovUrsdWp1+dRKV3RjnGBKXZ38Z32T/+Qf+h1oiCmVuZHN0cmVhbQplbmRvYmoKMjIgMCBvYmoKPDwgL0xlbmd0aCAzOTUgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicPVJLbsVACNvnFFyg0vCbz3lSVd28+29rQ1KpKryJMcYwfcqQueVLXRJxhcm3Xq5bPKZ8LltamXmIu4uNJT623JfuIbZddC6xOB1H8gsynSpEqM2q0aH4QpaFB5BO8KELwn05/uMvgMHXsA244T0yQbAk5ilCxm5RGZoSQRFh55EVqKRQn1nC31Hu6/cyBWpvjKULYxz0CbQFQm1IxALqQABE7JRUrZCOZyQTvxXdZ2IcYOfRsgGuGVRElnvsx4ipzqiMvETEPk9N+iiWTC1Wxm5TGV/8lIzUfHQFKqk08pTy0FWz0AtYiXkS9jn8SPjn1mwhhjpu1vKJ5R8zxTISzmBLOWChl+NH4NtZdRGuHbm4znSBH5XWcEy0637I9U/+dNtazXW8cgiiQOVNQfC7Dq5GscTEMj6djSl6oiywGpq8RjPBYRAR1vfDyAMa/XK8EDSnayK0WCKbtWJEjYpscz29BNZM78U51sMTwmzvndahsjMzKiGC2rqGautAdrO+83C2nz8z6KJtCmVuZHN0cmVhbQplbmRvYmoKMjMgMCBvYmoKPDwgL0xlbmd0aCAyNDkgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicTVFJigMwDLvnFfpAIV6TvKdDmUPn/9fKDoU5BAmvkpOWmFgLDzGEHyw9+JEhczf9G36i2btZepLJ2f+Y5yJTUfhSqC5iQl2IG8+hEfA9oWsSWbG98Tkso5lzvgcfhbgEM6EBY31JMrmo5pUhE04MdRwOWqTCuGtiw+Ja0TyN3G77RmZlJoQNj2RC3BiAiCDrArIYLJQ2NhMyWc4D7Q3JDVpg16kbUYuCK5TWCXSiVsSqzOCz5tZ2N0Mt8uCoffH6aFaXYIXRS/VYeF+FPpipmXbukkJ64U07IsweCqQyOy0rtXvE6m6B+j/LUvD9yff4Ha8PzfxcnAplbmRzdHJlYW0KZW5kb2JqCjI0IDAgb2JqCjw8IC9MZW5ndGggOTQgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicRY3BEcAgCAT/VEEJCgraTyaTh/b/jRAyfGDnDu6EBQu2eUYfBZUmXhVYB0pj3FCPQL3hci3J3AUPcCd/2tBUnJbTd2mRSVUp3KQSef8OZyaQqHnRY533C2P7IzwKZW5kc3RyZWFtCmVuZG9iagoyNSAwIG9iago8PCAvTGVuZ3RoIDE2NCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJxFkMdxBTEMQ++qAiUwgAr1rMfzD+v+r4b000F6GEIMYk/CsFxXcWF0w4+3LTMNf0cZ7sb6MmO81VggJ+gDDJGJq9Gk+nbFGar05NVirqOiXC86IhLMkuOrQCN8OrLHk7a2M/10Xh/sIe8T/yoq525hAS6q7kD5Uh/x1I/ZUeqaoY8qK2seatpXhF0RSts+LqcyTt29A1rhvZWrPdrvPx52OvIKZW5kc3RyZWFtCmVuZG9iagoyNiAwIG9iago8PCAvTGVuZ3RoIDcyIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nDMyt1AwULA0ARKGFiYK5mYGCimGXEC+qYm5Qi4XSAzEygGzDIC0JZyCiGeAmCBtEMUgFkSxmYkZRB2cAZHL4EoDACXbFskKZW5kc3RyZWFtCmVuZG9iagoyNyAwIG9iago8PCAvTGVuZ3RoIDQ3IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nDMyt1AwULA0ARKGFiYK5mYGCimGXJYQVi4XTCwHzALRlnAKIp7BlQYAuWcNJwplbmRzdHJlYW0KZW5kb2JqCjI4IDAgb2JqCjw8IC9MZW5ndGggMjU4IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nEWRS3IEIAhE956CI4D85DyTSmUxuf82Dc5kNnaXqP2ESiOmEiznFHkwfcnyzWS26Xc5VjsbBRRFKJjJVeixAqs7U8SZa4lq62Nl5LjTOwbFG85dOalkcaOMdVR1KnBMz5X1Ud35dlmUfUcOZQrYrHMcbODKbcMYJ0abre4O94kgTydTR8XtINnwByeNfZWrK3CdbPbRSzAOBP1CE5jki0DrDIHGzVP05BLs4+N254Fgb3kRSNkQyJEhGB2Cdp1c/+LW+b3/cYY7z7UZrhzv4neY1nbHX2KSFXMBi9wpqOdrLlrXGTrekzPH5Kb7hs65YJe7g0zv+T/Wz/r+Ax4pZvoKZW5kc3RyZWFtCmVuZG9iagoyOSAwIG9iago8PCAvTGVuZ3RoIDgzIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nEWMuw3AMAhEe6ZgBH4m9j5RlMLevw0QJW64J909XB0JmSluM8NDBp4MLIZdcYH0ljALXEdQjp3so2HVvuoEjfWmUvPvD5Se7KzihusBAkIaZgplbmRzdHJlYW0KZW5kb2JqCjMwIDAgb2JqCjw8IC9MZW5ndGggNTEgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicMza0UDBQMDQwB5JGhkCWkYlCiiEXSADEzOWCCeaAWQZAGqI4B64mhyuDKw0A4bQNmAplbmRzdHJlYW0KZW5kb2JqCjMxIDAgb2JqCjw8IC9MZW5ndGggMTYwIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nEWQORIDMQgEc72CJ0hcgvesy7XB+v+pB9ZHoukCNBy6Fk3KehRoPumxRqG60GvoLEqSRMEWkh1Qp2OIOyhITEhjkki2HoMjmlizXZiZVCqzUuG0acXCv9la1chEjXCN/InpBlT8T+pclPBNg6+SMfoYVLw7g4xJ+F5F3Fox7f5EMLEZ9glvRSYFhImxqdm+z2CGzPcK1zjH8w1MgjfrCmVuZHN0cmVhbQplbmRvYmoKMzIgMCBvYmoKPDwgL0xlbmd0aCAzMzQgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicLVJLcsUgDNtzCl2gM/gH5DzpdLp4vf+2kpNFRg5g9DHlholKfFkgt6PWxLeNzECF4a+rzIXPSNvIOojLkIu4ki2Fe0Qs5DHEPMSC76vxHh75rMzJswfGL9l3Dyv21IRlIePFGdphFcdhFeRYsHUhqnt4U6TDqSTY44v/PsVzLQQtfEbQgF/kn6+O4PmSFmn3mG3TrnqwTDuqpLAcbE9zXiZfWme5Oh7PB8n2rtgRUrsCFIW5M85z4SjTVka0FnY2SGpcbG+O/VhK0IVuXEaKI5CfqSI8oKTJzCYK4o+cHnIqA2Hqmq50chtVcaeezDWbi7czSWbrvkixmcJ5XTiz/gxTZrV5J89yotSpCO+xZ0vQ0Dmunr2WWWh0mxO8pITPxk5PTr5XM+shORUJqWJaV8FpFJliCdsSX1NRU5p6Gf778u7xO37+ASxzfHMKZW5kc3RyZWFtCmVuZG9iagozMyAwIG9iago8PCAvTGVuZ3RoIDcwIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nDMzNlMwULAwAhKmpoYK5kaWCimGXEA+iJXLBRPLAbPMLMyBLCMLkJYcLkMLYzBtYmykYGZiBmRZIDEgujK40gCYmhMDCmVuZHN0cmVhbQplbmRvYmoKMzQgMCBvYmoKPDwgL0xlbmd0aCAzMjAgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicNVJLbgUxCNvPKbhApfBPzvOqqou++29rE70VTDBg4ykvWdJLvtQl26XD5Fsf9yWxQt6P7ZrMUsX3FrMUzy2vR88Rty0KBFETPViZLxUi1M/06DqocEqfgVcItxQbvINJAINq+AcepTMgUOdAxrtiMlIDgiTYc2lxCIlyJol/pLye3yetpKH0PVmZy9+TS6XQHU1O6AHFysVJoF1J+aCZmEpEkpfrfbFC9IbAkjw+RzHJgOw2iW2iBSbnHqUlzMQUOrDHArxmmtVV6GDCHocpjFcLs6gebPJbE5WkHa3jGdkw3sswU2Kh4bAF1OZiZYLu5eM1r8KI7VGTXcNw7pbNdwjRaP4bFsrgYxWSgEensRINaTjAiMCeXjjFXvMTOQ7AiGOdmiwMY2gmp3qOicDQnrOlYcbHHlr18w9U6XyHCmVuZHN0cmVhbQplbmRvYmoKMzUgMCBvYmoKPDwgL0xlbmd0aCAxOCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJwzNrRQMIDDFEOuNAAd5gNSCmVuZHN0cmVhbQplbmRvYmoKMzYgMCBvYmoKPDwgL0xlbmd0aCAxMzMgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicRY9LDgQhCET3nKKOwMcf53Ey6YVz/+2AnW4TYz2FVIG5gqE9LmsDnRUfIRm28beplo5FWT5UelJWD8ngh6zGyyHcoCzwgkkqhiFQi5gakS1lbreA2zYNsrKVU6WOsIujMI/2tGwVHl+iWyJ1kj+DxCov3OO6Hcil1rveoou+f6QBMQkKZW5kc3RyZWFtCmVuZG9iagozNyAwIG9iago8PCAvTGVuZ3RoIDM0MCAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJw1UjluBDEM6/0KfSCAbtvv2SBIkfy/DanZFANxdFKUO1pUdsuHhVS17HT5tJXaEjfkd2WFxAnJqxLtUoZIqLxWIdXvmTKvtzVnBMhSpcLkpORxyYI/w6WnC8f5trGv5cgdjx5YFSOhRMAyxcToGpbO7rBmW36WacCPeIScK9Ytx1gFUhvdOO2K96F5LbIGiL2ZlooKHVaJFn5B8aBHjX32GFRYINHtHElwjIlQkYB2gdpIDDl7LHZRH/QzKDET6NobRdxBgSWSmDnFunT03/jQsaD+2Iw3vzoq6VtaWWPSPhvtlMYsMul6WPR089bHgws076L859UMEjRljZLGB63aOYaimVFWeLdDkw3NMcch8w6ewxkJSvo8FL+PJRMdlMjfDg2hf18eo4ycNt4C5qI/bRUHDuKzw165gRVKF2uS9wGpTOiB6f+v8bW+19cfHe2AxgplbmRzdHJlYW0KZW5kb2JqCjM4IDAgb2JqCjw8IC9MZW5ndGggMjUxIC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nC1RSXIDQQi7zyv0hGan32OXK4fk/9cIygcGDYtAdFrioIyfICxXvOWRq2jD3zMxgt8Fh34r121Y5EBUIEljUDWhdvF69B7YcZgJzJPWsAxmrA/8jCnc6MXhMRlnt9dl1BDsXa89mUHJrFzEJRMXTNVhI2cOP5kyLrRzPTcg50ZYl2GQblYaMxKONIVIIYWqm6TOBEESjK5GjTZyFPulL490hlWNqDHscy1tX89NOGvQ7Fis8uSUHl1xLicXL6wc9PU2AxdRaazyQEjA/W4P9XOyk994S+fOFtPje83J8sJUYMWb125ANtXi37yI4/uMr+fn+fwDX2BbiAplbmRzdHJlYW0KZW5kb2JqCjM5IDAgb2JqCjw8IC9MZW5ndGggMTc0IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nE2QSQ5DIQxD95zCF6iEM8DnPL+qumjvv61DB3WB/OQgcDw80HEkLnRk6IyOK5sc48CzIGPi0Tj/ybg+xDFB3aItWJd2x9nMEnPCMjECtkbJ2TyiwA/HXAgSZJcfvsAgIl2P+VbzWZP0z7c73Y+6tGZfPaLAiewIxbABV4D9useBS8L5XtPklyolYxOH8oHqIlI2O6EQtVTscqqKs92bK3AV9PzRQ+7tBbUjPN8KZW5kc3RyZWFtCmVuZG9iago0MCAwIG9iago8PCAvTGVuZ3RoIDU0IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nDM1MFAwUNC1VNA1MjZVMDUEsg3NTBVSDLng7FwIEySfwwVTCWGBpHMQKnO4MrjSAHNRD48KZW5kc3RyZWFtCmVuZG9iago0MSAwIG9iago8PCAvTGVuZ3RoIDg5IC9GaWx0ZXIgL0ZsYXRlRGVjb2RlID4+CnN0cmVhbQp4nDVNuRGAMAzrPYVHwI9IvA/HUYT9W+yENJZOnxHKB2vkAYLhjS8h+KIvGYS1Cw8q+0h02EQNZxUkE8OvLPCqnBVtcyUT2VlMo7NBy/St7W+DHro/3Y4cCgplbmRzdHJlYW0KZW5kb2JqCjQyIDAgb2JqCjw8IC9MZW5ndGggNzYgL0ZpbHRlciAvRmxhdGVEZWNvZGUgPj4Kc3RyZWFtCnicPYw7DoAwDEP3nMJHaH4kB0KIgd5/pSm0i/30JNvF0WBakQK3wMnkPqnTcs8kO3wQmyHkVxtata7K0poMi5qMvw3f3U3XC6Y4F8AKZW5kc3RyZWFtCmVuZG9iago0MyAwIG9iago8PCAvTGVuZ3RoIDIxNSAvRmlsdGVyIC9GbGF0ZURlY29kZSA+PgpzdHJlYW0KeJw1UTkOAyEM7PcV/kAkjC94T6Iozf6/zYzRVh7BXIa0lCGZ8lKTqCHlUz56mS6cutzXzGo055a0LXOAuLa8L62SwIlmiIPBaZi4AZo8AUPX0ahRQxce0NSlUyiw3AQ+irduD91jtYGXtiHniSBiKBksQc2pRRMWbc8npDW/Xosb3pft3chTpcaWGIEGAVY4HNfo1/CVPU8m0XQVMtSrNcsYCRNFIjz5jqbVE+taNNIyEtTGEaxqA7w7/TBOAAATccsCZJ9KlLPkxG+x9LMGV/r+AZ9HVJYKZW5kc3RyZWFtCmVuZG9iagoxNSAwIG9iago8PCAvVHlwZSAvRm9udCAvQmFzZUZvbnQgL0JNUVFEVitEZWphVnVTYW5zIC9GaXJzdENoYXIgMCAvTGFzdENoYXIgMjU1Ci9Gb250RGVzY3JpcHRvciAxNCAwIFIgL1N1YnR5cGUgL1R5cGUzIC9OYW1lIC9CTVFRRFYrRGVqYVZ1U2FucwovRm9udEJCb3ggWyAtMTAyMSAtNDYzIDE3OTQgMTIzMyBdIC9Gb250TWF0cml4IFsgMC4wMDEgMCAwIDAuMDAxIDAgMCBdCi9DaGFyUHJvY3MgMTYgMCBSCi9FbmNvZGluZyA8PCAvVHlwZSAvRW5jb2RpbmcKL0RpZmZlcmVuY2VzIFsgMzIgL3NwYWNlIDQ2IC9wZXJpb2QgNDggL3plcm8gL29uZSAvdHdvIC90aHJlZSAvZm91ciAvZml2ZSAvc2l4IC9zZXZlbgovZWlnaHQgNTggL2NvbG9uIDk1IC91bmRlcnNjb3JlIDk3IC9hIC9iIC9jIDEwMSAvZSAxMDQgL2ggL2kgMTA4IC9sIC9tIDExNAovciAvcyAvdCAvdSAxMjAgL3ggMTIyIC96IF0KPj4KL1dpZHRocyAxMyAwIFIgPj4KZW5kb2JqCjE0IDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvRm9udE5hbWUgL0JNUVFEVitEZWphVnVTYW5zIC9GbGFncyAzMgovRm9udEJCb3ggWyAtMTAyMSAtNDYzIDE3OTQgMTIzMyBdIC9Bc2NlbnQgOTI5IC9EZXNjZW50IC0yMzYgL0NhcEhlaWdodCAwCi9YSGVpZ2h0IDAgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WIDAgL01heFdpZHRoIDEzNDIgPj4KZW5kb2JqCjEzIDAgb2JqClsgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAKNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCAzMTggNDAxIDQ2MCA4MzggNjM2Cjk1MCA3ODAgMjc1IDM5MCAzOTAgNTAwIDgzOCAzMTggMzYxIDMxOCAzMzcgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNgo2MzYgNjM2IDMzNyAzMzcgODM4IDgzOCA4MzggNTMxIDEwMDAgNjg0IDY4NiA2OTggNzcwIDYzMiA1NzUgNzc1IDc1MiAyOTUKMjk1IDY1NiA1NTcgODYzIDc0OCA3ODcgNjAzIDc4NyA2OTUgNjM1IDYxMSA3MzIgNjg0IDk4OSA2ODUgNjExIDY4NSAzOTAgMzM3CjM5MCA4MzggNTAwIDUwMCA2MTMgNjM1IDU1MCA2MzUgNjE1IDM1MiA2MzUgNjM0IDI3OCAyNzggNTc5IDI3OCA5NzQgNjM0IDYxMgo2MzUgNjM1IDQxMSA1MjEgMzkyIDYzNCA1OTIgODE4IDU5MiA1OTIgNTI1IDYzNiAzMzcgNjM2IDgzOCA2MDAgNjM2IDYwMCAzMTgKMzUyIDUxOCAxMDAwIDUwMCA1MDAgNTAwIDEzNDIgNjM1IDQwMCAxMDcwIDYwMCA2ODUgNjAwIDYwMCAzMTggMzE4IDUxOCA1MTgKNTkwIDUwMCAxMDAwIDUwMCAxMDAwIDUyMSA0MDAgMTAyMyA2MDAgNTI1IDYxMSAzMTggNDAxIDYzNiA2MzYgNjM2IDYzNiAzMzcKNTAwIDUwMCAxMDAwIDQ3MSA2MTIgODM4IDM2MSAxMDAwIDUwMCA1MDAgODM4IDQwMSA0MDEgNTAwIDYzNiA2MzYgMzE4IDUwMAo0MDEgNDcxIDYxMiA5NjkgOTY5IDk2OSA1MzEgNjg0IDY4NCA2ODQgNjg0IDY4NCA2ODQgOTc0IDY5OCA2MzIgNjMyIDYzMiA2MzIKMjk1IDI5NSAyOTUgMjk1IDc3NSA3NDggNzg3IDc4NyA3ODcgNzg3IDc4NyA4MzggNzg3IDczMiA3MzIgNzMyIDczMiA2MTEgNjA1CjYzMCA2MTMgNjEzIDYxMyA2MTMgNjEzIDYxMyA5ODIgNTUwIDYxNSA2MTUgNjE1IDYxNSAyNzggMjc4IDI3OCAyNzggNjEyIDYzNAo2MTIgNjEyIDYxMiA2MTIgNjEyIDgzOCA2MTIgNjM0IDYzNCA2MzQgNjM0IDU5MiA2MzUgNTkyIF0KZW5kb2JqCjE2IDAgb2JqCjw8IC9hIDE3IDAgUiAvYiAxOCAwIFIgL2MgMTkgMCBSIC9jb2xvbiAyMCAwIFIgL2UgMjEgMCBSIC9laWdodCAyMiAwIFIKL2ZpdmUgMjMgMCBSIC9mb3VyIDI0IDAgUiAvaCAyNSAwIFIgL2kgMjYgMCBSIC9sIDI3IDAgUiAvbSAyOCAwIFIKL29uZSAyOSAwIFIgL3BlcmlvZCAzMCAwIFIgL3IgMzEgMCBSIC9zIDMyIDAgUiAvc2V2ZW4gMzMgMCBSIC9zaXggMzQgMCBSCi9zcGFjZSAzNSAwIFIgL3QgMzYgMCBSIC90aHJlZSAzNyAwIFIgL3R3byAzOCAwIFIgL3UgMzkgMCBSCi91bmRlcnNjb3JlIDQwIDAgUiAveCA0MSAwIFIgL3ogNDIgMCBSIC96ZXJvIDQzIDAgUiA+PgplbmRvYmoKMyAwIG9iago8PCAvRjEgMTUgMCBSID4+CmVuZG9iago0IDAgb2JqCjw8IC9BMSA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAwIC9jYSAxID4+Ci9BMiA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAxIC9jYSAxID4+Ci9BMyA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAwLjUgL2NhIDAuNSA+PgovQTQgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMSAvY2EgMC45ID4+ID4+CmVuZG9iago1IDAgb2JqCjw8ID4+CmVuZG9iago2IDAgb2JqCjw8ID4+CmVuZG9iago3IDAgb2JqCjw8ID4+CmVuZG9iagoyIDAgb2JqCjw8IC9UeXBlIC9QYWdlcyAvS2lkcyBbIDExIDAgUiBdIC9Db3VudCAxID4+CmVuZG9iago0NCAwIG9iago8PCAvQ3JlYXRvciAoTWF0cGxvdGxpYiB2My45LjIsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcpCi9Qcm9kdWNlciAoTWF0cGxvdGxpYiBwZGYgYmFja2VuZCB2My45LjIpCi9DcmVhdGlvbkRhdGUgKEQ6MjAyNDEwMTYxMDA3MjArMDInMDAnKSA+PgplbmRvYmoKeHJlZgowIDQ1CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAxNiAwMDAwMCBuIAowMDAwMDQzNzg3IDAwMDAwIG4gCjAwMDAwNDM1MDkgMDAwMDAgbiAKMDAwMDA0MzU0MSAwMDAwMCBuIAowMDAwMDQzNzI0IDAwMDAwIG4gCjAwMDAwNDM3NDUgMDAwMDAgbiAKMDAwMDA0Mzc2NiAwMDAwMCBuIAowMDAwMDAwMDY1IDAwMDAwIG4gCjAwMDAwMDAzNDggMDAwMDAgbiAKMDAwMDAzNDY5NyAwMDAwMCBuIAowMDAwMDAwMjA4IDAwMDAwIG4gCjAwMDAwMzQ2NzUgMDAwMDAgbiAKMDAwMDA0MjExNSAwMDAwMCBuIAowMDAwMDQxOTA4IDAwMDAwIG4gCjAwMDAwNDE0MjkgMDAwMDAgbiAKMDAwMDA0MzE2OCAwMDAwMCBuIAowMDAwMDM0NzE3IDAwMDAwIG4gCjAwMDAwMzUwOTcgMDAwMDAgbiAKMDAwMDAzNTQxNCAwMDAwMCBuIAowMDAwMDM1NzE5IDAwMDAwIG4gCjAwMDAwMzU4NjQgMDAwMDAgbiAKMDAwMDAzNjE4NiAwMDAwMCBuIAowMDAwMDM2NjU0IDAwMDAwIG4gCjAwMDAwMzY5NzYgMDAwMDAgbiAKMDAwMDAzNzE0MiAwMDAwMCBuIAowMDAwMDM3Mzc5IDAwMDAwIG4gCjAwMDAwMzc1MjMgMDAwMDAgbiAKMDAwMDAzNzY0MiAwMDAwMCBuIAowMDAwMDM3OTczIDAwMDAwIG4gCjAwMDAwMzgxMjggMDAwMDAgbiAKMDAwMDAzODI1MSAwMDAwMCBuIAowMDAwMDM4NDg0IDAwMDAwIG4gCjAwMDAwMzg4OTEgMDAwMDAgbiAKMDAwMDAzOTAzMyAwMDAwMCBuIAowMDAwMDM5NDI2IDAwMDAwIG4gCjAwMDAwMzk1MTYgMDAwMDAgbiAKMDAwMDAzOTcyMiAwMDAwMCBuIAowMDAwMDQwMTM1IDAwMDAwIG4gCjAwMDAwNDA0NTkgMDAwMDAgbiAKMDAwMDA0MDcwNiAwMDAwMCBuIAowMDAwMDQwODMyIDAwMDAwIG4gCjAwMDAwNDA5OTMgMDAwMDAgbiAKMDAwMDA0MTE0MSAwMDAwMCBuIAowMDAwMDQzODQ3IDAwMDAwIG4gCnRyYWlsZXIKPDwgL1NpemUgNDUgL1Jvb3QgMSAwIFIgL0luZm8gNDQgMCBSID4+CnN0YXJ0eHJlZgo0NDAwNAolJUVPRgo=",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#| label: 601_user_model_run\n",
    "res = spot_tuner.run()\n",
    "print(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n",
    "spot_tuner.plot_important_hyperparameter_contour(max_imp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e360187f",
   "metadata": {},
   "source": [
    "## Details\n",
    "\n",
    "### Model Setup\n",
    "\n",
    "By using `core_model_name = \"my_regressor.MyRegressor\"`, the user specified model class `MyRegressor` [[SOURCE]](https://github.com/sequential-parameter-optimization/Hyperparameter-Tuning-Cookbook/blob/main/userModel/my_regressor.py) is selected.\n",
    "For this given `core_model_name`, the local hyper_dict is loaded using the `my_hyper_dict.py` file as shown below.\n",
    "\n",
    "### The `my_hyper_dict.py` File {#sec-my-hyper-dict}\n",
    "\n",
    "The `my_hyper_dict.py` file  must be placed in the `/userModel` directory.  It provides a convenience function to load the hyperparameters from user specified the `my_hyper_dict.json` file, see @sec-my-hyper-dict.\n",
    "The user does not need to modify this file, if the JSON file is stored as `my_hyper_dict.json`. \n",
    "Alternative filenames can be specified via the `filename` argument (which is default set to `\"my_hyper_dict.json\"`).\n",
    "\n",
    "### The `my_hyper_dict.json` File {#sec-my-hyper-dict-json}\n",
    "\n",
    "The `my_hyper_dict.json` file contains the hyperparameter settings as a dictionary, which are loaded via the `my_hyper_dict.py` file.\n",
    "The example below shows the content of the `my_hyper_dict.json` file.\n",
    "```json\n",
    "{\n",
    "    \"MyRegressor\": {\n",
    "        \"l1\": {\n",
    "            \"type\": \"int\",\n",
    "            \"default\": 3,\n",
    "            \"transform\": \"transform_power_2_int\",\n",
    "            \"lower\": 3,\n",
    "            \"upper\": 8\n",
    "        },\n",
    "        \"epochs\": {\n",
    "            \"type\": \"int\",\n",
    "            \"default\": 4,\n",
    "            \"transform\": \"transform_power_2_int\",\n",
    "            \"lower\": 4,\n",
    "            \"upper\": 9\n",
    "        },\n",
    "        \"batch_size\": {\n",
    "            \"type\": \"int\",\n",
    "            \"default\": 4,\n",
    "            \"transform\": \"transform_power_2_int\",\n",
    "            \"lower\": 1,\n",
    "            \"upper\": 4\n",
    "        },\n",
    "        \"act_fn\": {\n",
    "            \"levels\": [\n",
    "                \"Sigmoid\",\n",
    "                \"Tanh\",\n",
    "                \"ReLU\",\n",
    "                \"LeakyReLU\",\n",
    "                \"ELU\",\n",
    "                \"Swish\"\n",
    "            ],\n",
    "            \"type\": \"factor\",\n",
    "            \"default\": \"ReLU\",\n",
    "            \"transform\": \"None\",\n",
    "            \"class_name\": \"spotpython.torch.activation\",\n",
    "            \"core_model_parameter_type\": \"instance()\",\n",
    "            \"lower\": 0,\n",
    "            \"upper\": 5\n",
    "        },\n",
    "        \"optimizer\": {\n",
    "            \"levels\": [\n",
    "                \"Adadelta\",\n",
    "                \"Adagrad\",\n",
    "                \"Adam\",\n",
    "                \"AdamW\",\n",
    "                \"SparseAdam\",\n",
    "                \"Adamax\",\n",
    "                \"ASGD\",\n",
    "                \"NAdam\",\n",
    "                \"RAdam\",\n",
    "                \"RMSprop\",\n",
    "                \"Rprop\",\n",
    "                \"SGD\"\n",
    "            ],\n",
    "            \"type\": \"factor\",\n",
    "            \"default\": \"SGD\",\n",
    "            \"transform\": \"None\",\n",
    "            \"class_name\": \"torch.optim\",\n",
    "            \"core_model_parameter_type\": \"str\",\n",
    "            \"lower\": 0,\n",
    "            \"upper\": 11\n",
    "        },\n",
    "        \"dropout_prob\": {\n",
    "            \"type\": \"float\",\n",
    "            \"default\": 0.01,\n",
    "            \"transform\": \"None\",\n",
    "            \"lower\": 0.0,\n",
    "            \"upper\": 0.25\n",
    "        },\n",
    "        \"lr_mult\": {\n",
    "            \"type\": \"float\",\n",
    "            \"default\": 1.0,\n",
    "            \"transform\": \"None\",\n",
    "            \"lower\": 0.1,\n",
    "            \"upper\": 10.0\n",
    "        },\n",
    "        \"patience\": {\n",
    "            \"type\": \"int\",\n",
    "            \"default\": 2,\n",
    "            \"transform\": \"transform_power_2_int\",\n",
    "            \"lower\": 2,\n",
    "            \"upper\": 6\n",
    "        },\n",
    "        \"initialization\": {\n",
    "            \"levels\": [\n",
    "                \"Default\",\n",
    "                \"Kaiming\",\n",
    "                \"Xavier\"\n",
    "            ],\n",
    "            \"type\": \"factor\",\n",
    "            \"default\": \"Default\",\n",
    "            \"transform\": \"None\",\n",
    "            \"core_model_parameter_type\": \"str\",\n",
    "            \"lower\": 0,\n",
    "            \"upper\": 2\n",
    "        }\n",
    "    }\n",
    "}\n",
    "```\n",
    "\n",
    "### The `my_regressor.py` File {#sec-my-regressor}\n",
    "\n",
    "The `my_regressor.py` file contains [[SOURCE]](https://github.com/sequential-parameter-optimization/Hyperparameter-Tuning-Cookbook/blob/main/userModel/my_regressor.py) the model class, which is a subclass of `nn.Module`. It must implement the following methods:\n",
    "\n",
    "* `__init__(self, **kwargs)`: The constructor of the model class. The hyperparameters are passed as keyword arguments.\n",
    "* `forward(self, x: torch.Tensor) -> torch.Tensor`: The forward pass of the model. The input `x` is passed through the model and the output is returned.\n",
    "* `training_step(self, batch, batch_idx) -> torch.Tensor`: The training step of the model. It takes a batch of data and the batch index as input and returns the loss.\n",
    "* `validation_step(self, batch, batch_idx) -> torch.Tensor`: The validation step of the model. It takes a batch of data and the batch index as input and returns the loss.\n",
    "* `test_step(self, batch, batch_idx) -> torch.Tensor`: The test step of the model. It takes a batch of data and the batch index as input and returns the loss.\n",
    "* `predict(self, x: torch.Tensor) -> torch.Tensor`: The prediction method of the model. It takes an input `x` and returns the prediction.\n",
    "* `configure_optimizers(self) -> torch.optim.Optimizer`: The method to configure the optimizer of the model. It returns the optimizer.\n",
    "\n",
    "The file `my_regressor.py` must be placed in the `/userModel` directory. The user can modify the model class to implement a custom model architecture.\n",
    "\n",
    "We will take a closer look at the methods defined in the `my_regressor.py` file in the next subsections.\n",
    "\n",
    "#### The `__init__` Method\n",
    "\n",
    "`__init__()` initializes the `MyRegressor` object. It takes the following arguments:\n",
    "\n",
    "* `l1` (int): The number of neurons in the first hidden layer.\n",
    "* `epochs` (int): The number of epochs to train the model for.\n",
    "* `batch_size` (int): The batch size to use during training.\n",
    "* `initialization` (str): The initialization method to use for the weights.\n",
    "* `act_fn` (nn.Module): The activation function to use in the hidden layers.\n",
    "* `optimizer` (str): The optimizer to use during training.\n",
    "* `dropout_prob` (float): The probability of dropping out a neuron during training.\n",
    "* `lr_mult` (float): The learning rate multiplier for the optimizer.\n",
    "* `patience` (int): The number of epochs to wait before early stopping.\n",
    "* `_L_in` (int): The number of input features. Not a hyperparameter, but needed to create the network.\n",
    "* `_L_out` (int): The number of output classes. Not a hyperparameter, but needed to create the network.\n",
    "* `_torchmetric` (str): The metric to use for the loss function. If `None`, then \"mean_squared_error\" is used.\n",
    "\n",
    "It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "user_model_init",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_init\n",
    "#| eval: false\n",
    "class MyRegressor(L.LightningModule):\n",
    "        def __init__(\n",
    "        self,\n",
    "        l1: int,\n",
    "        epochs: int,\n",
    "        batch_size: int,\n",
    "        initialization: str,\n",
    "        act_fn: nn.Module,\n",
    "        optimizer: str,\n",
    "        dropout_prob: float,\n",
    "        lr_mult: float,\n",
    "        patience: int,\n",
    "        _L_in: int,\n",
    "        _L_out: int,\n",
    "        _torchmetric: str,\n",
    "    ):\n",
    "        super().__init__()\n",
    "        self._L_in = _L_in\n",
    "        self._L_out = _L_out\n",
    "        if _torchmetric is None:\n",
    "            _torchmetric = \"mean_squared_error\"\n",
    "        self._torchmetric = _torchmetric\n",
    "        self.metric = getattr(torchmetrics.functional.regression, _torchmetric)\n",
    "        # _L_in and _L_out are not hyperparameters, but are needed to create the network\n",
    "        # _torchmetric is not a hyperparameter, but is needed to calculate the loss\n",
    "        self.save_hyperparameters(ignore=[\"_L_in\", \"_L_out\", \"_torchmetric\"])\n",
    "        # set dummy input array for Tensorboard Graphs\n",
    "        # set log_graph=True in Trainer to see the graph (in traintest.py)\n",
    "        self.example_input_array = torch.zeros((batch_size, self._L_in))\n",
    "        if self.hparams.l1 < 4:\n",
    "            raise ValueError(\"l1 must be at least 4\")\n",
    "        hidden_sizes = self._get_hidden_sizes()\n",
    "        # Create the network based on the specified hidden sizes\n",
    "        layers = []\n",
    "        layer_sizes = [self._L_in] + hidden_sizes\n",
    "        layer_size_last = layer_sizes[0]\n",
    "        for layer_size in layer_sizes[1:]:\n",
    "            layers += [\n",
    "                nn.Linear(layer_size_last, layer_size),\n",
    "                self.hparams.act_fn,\n",
    "                nn.Dropout(self.hparams.dropout_prob),\n",
    "            ]\n",
    "            layer_size_last = layer_size\n",
    "        layers += [nn.Linear(layer_sizes[-1], self._L_out)]\n",
    "        # nn.Sequential summarizes a list of modules into a single module,\n",
    "        # applying them in sequence\n",
    "        self.layers = nn.Sequential(*layers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68fdccd7",
   "metadata": {},
   "source": [
    "#### The `_get_hidden_sizes` Method\n",
    "\n",
    "`__init__()` uses the helper method `_get_hidden_sizes()` to calculate the hidden layer sizes based on the number of neurons in the first hidden layer `l1`. The hidden layer sizes are calculated as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "user_model_get_hidden_sizes",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_get_hidden_sizes\n",
    "#| eval: false\n",
    "def _get_hidden_sizes(self):\n",
    "    # Calculate the hidden layer sizes based on the number of neurons in the first hidden layer\n",
    "    hidden_sizes = [self.hparams.l1]\n",
    "    while hidden_sizes[-1] > 2:\n",
    "        hidden_sizes.append(hidden_sizes[-1] // 2)\n",
    "    return hidden_sizes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edf852c3",
   "metadata": {},
   "source": [
    "#### The `forward` Method\n",
    "\n",
    "The `forward()` method defines the forward pass of the model. It takes an input tensor `x` and passes it through the network layers to produce an output tensor. It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "user_model_forward",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_forward\n",
    "#| eval: false\n",
    "def forward(self, x: torch.Tensor) -> torch.Tensor:\n",
    "    return self.layers(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b82ebb5b",
   "metadata": {},
   "source": [
    "#### The `_calculate_loss` Method\n",
    "\n",
    "The `_calculate_loss()` method calculates the loss based on the predicted output and the target values. It uses the specified metric to calculate the loss. \n",
    "It takes the following arguments:\n",
    "\n",
    "* `batch (tuple)`: A tuple containing a batch of input data and labels.\n",
    "\n",
    "It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "user_model_calculate_loss",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_calculate_loss\n",
    "#| eval: false\n",
    "def _calculate_loss(self, batch):\n",
    "    x, y = batch\n",
    "    y = y.view(len(y), 1)\n",
    "    y_hat = self(x)\n",
    "    loss = self.metric(y_hat, y)\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0daff7e7",
   "metadata": {},
   "source": [
    "#### The `training_step` Method\n",
    "\n",
    "The `training_step()` method defines the training step of the model. It takes a batch of data and returns the loss. It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "user_model_training_step",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_training_step\n",
    "#| eval: false\n",
    "def training_step(self, batch: tuple) -> torch.Tensor:\n",
    "    val_loss = self._calculate_loss(batch)\n",
    "    return val_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4c09a5c",
   "metadata": {},
   "source": [
    "#### The `validation_step` Method\n",
    "\n",
    "The `validation_step()` method defines the validation step of the model. It takes a batch of data and returns the loss. It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "user_model_validation_step",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_validation_step\n",
    "#| eval: false\n",
    "def validation_step(self, batch: tuple) -> torch.Tensor:\n",
    "    val_loss = self._calculate_loss(batch)\n",
    "    return val_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48f97a68",
   "metadata": {},
   "source": [
    "#### The `test_step` Method\n",
    "\n",
    "The `test_step()` method defines the test step of the model. It takes a batch of data and returns the loss. It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "user_model_test_step",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_test_step\n",
    "#| eval: false\n",
    "def test_step(self, batch: tuple) -> torch.Tensor:\n",
    "    val_loss = self._calculate_loss(batch)\n",
    "    return val_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7218ed9a",
   "metadata": {},
   "source": [
    "#### The `predict` Method\n",
    "\n",
    "The `predict()` method defines the prediction method of the model. It takes an input tensor `x` and returns \n",
    "a tuple with the input tensor `x`, the target tensor `y`, and the predicted tensor `y_hat`.\n",
    "\n",
    " It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "user_model_predict",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_predict\n",
    "#| eval: false\n",
    "def predict(self, x: torch.Tensor) -> torch.Tensor:\n",
    "    x, y = batch\n",
    "    yhat = self(x)\n",
    "    y = y.view(len(y), 1)\n",
    "    yhat = yhat.view(len(yhat), 1)\n",
    "    return (x, y, yhat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6626e4bc",
   "metadata": {},
   "source": [
    "#### The `configure_optimizers` Method\n",
    "\n",
    "The `configure_optimizers()` method defines the optimizer to use during training.\n",
    "It uses the `optimizer_handler` from `spotpython.hyperparameter.optimizer` to create the optimizer based on the specified optimizer name, parameters, and learning rate multiplier.\n",
    "It is implemented as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "user_model_configure_optimizers",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 601_user_model_configure_optimizers\n",
    "#| eval: false\n",
    "def configure_optimizers(self) -> torch.optim.Optimizer:\n",
    "    optimizer = optimizer_handler(\n",
    "        optimizer_name=self.hparams.optimizer, params=self.parameters(), lr_mult=self.hparams.lr_mult\n",
    "    )\n",
    "    return optimizer"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e89695a",
   "metadata": {},
   "source": [
    "Note, the default Lightning way is to define an optimizer as\n",
    "`optimizer = torch.optim.Adam(self.parameters(), lr=self.learning_rate)`.\n",
    "`spotpython` uses an optimizer handler to create the optimizer, which adapts the learning rate according to the `lr_mult` hyperparameter as\n",
    "well as other hyperparameters. See `spotpython.hyperparameters.optimizer.py` [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotpython/hyperparameters/optimizer.py) for details.\n",
    "\n",
    "## Connection with the LightDataModule\n",
    "\n",
    "The steps described in @sec-my-regressor are connected to the `LightDataModule` class [[DOC]](https://sequential-parameter-optimization.github.io/spotPython/reference/spotpython/data/lightdatamodule/).\n",
    "This class is used to create the data loaders for the training, validation, and test sets.\n",
    "The `LightDataModule` class is part of the `spotpython` package and class provides the following methods [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotpython/data/lightdatamodule.py):\n",
    "\n",
    "* `prepare_data()`: This method is used to prepare the data set.\n",
    "* `setup()`: This method is used to create the data loaders for the training, validation, and test sets.\n",
    "* `train_dataloader()`: This method is used to return the data loader for the training set.\n",
    "* `val_dataloader()`: This method is used to return the data loader for the validation set.\n",
    "* `test_dataloader()`: This method is used to return the data loader for the test set.\n",
    "* `predict_dataloader()`: This method is used to return the data loader for the prediction set.\n",
    "\n",
    "### The `prepare_data()` Method\n",
    "\n",
    "The `prepare_data()` method is used to prepare the data set.\n",
    "This method is called only once and on a single process.\n",
    "It can be used to download the data set. In our case, the data set is already available, so this method uses a simple `pass` statement.\n",
    "\n",
    "### The `setup()` Method\n",
    "\n",
    "The `stage` is used to define the data set to be returned. It \n",
    "can be `None`, `fit`, `test`, or `predict`.\n",
    "If `stage` is `None`, the method returns the training (`fit`),\n",
    "testing (`test`), and prediction (`predict`) data sets.\n",
    "\n",
    "The `setup` methods splits the data based on the `stage` setting for use in training, validation, and testing.\n",
    "It uses `torch.utils.data.random_split()` to split the data.\n",
    "\n",
    "Splitting is based on the `test_size` and `test_seed`. \n",
    "The `test_size` can be a float or an int.\n",
    "\n",
    "First, the data set sizes are determined as described in @sec-determine-sizes-601.\n",
    "Then, the data sets are split based on the `stage` setting.\n",
    "`spotpython`'s `LightDataModule` class uses the following sizes:\n",
    "\n",
    "* `full_train_size`: The size of the full training data set. This data set is splitted into the final training data set and a validation data set.\n",
    "* `val_size`: The size of the validation data set. The validation data set is used to validate the model during training.\n",
    "* `train_size`: The size of the training data set. The training data set is used to train the model.\n",
    "* `test_size`: The size of the test data set. The test data set is used to evaluate the model after training. It is not used during training (\"hyperparameter tuning\"). Only after everything is finished, the model is evaluated on the test data set.\n",
    "\n",
    "#### Determine the Sizes of the Data Sets {#sec-determine-sizes-601}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "user_data_module_setup",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LightDataModule setup(): full_train_size: 0.6\n",
      "LightDataModule setup(): val_size: 0.24\n",
      "LightDataModule setup(): train_size: 0.36\n",
      "LightDataModule setup(): test_size: 0.4\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_data_module_setup\n",
    "import torch\n",
    "from torch.utils.data import random_split\n",
    "data_full = Diabetes()\n",
    "test_size = fun_control[\"test_size\"]\n",
    "test_seed=fun_control[\"test_seed\"]\n",
    "# if test_size is float, then train_size is 1 - test_size\n",
    "if isinstance(test_size, float):\n",
    "    full_train_size = round(1.0 - test_size, 2)\n",
    "    val_size = round(full_train_size * test_size, 2)\n",
    "    train_size = round(full_train_size - val_size, 2)\n",
    "else:\n",
    "    # if test_size is int, then train_size is len(data_full) - test_size\n",
    "    full_train_size = len(data_full) - test_size\n",
    "    val_size = int(full_train_size * test_size / len(data_full))\n",
    "    train_size = full_train_size - val_size\n",
    "\n",
    "print(f\"LightDataModule setup(): full_train_size: {full_train_size}\")\n",
    "print(f\"LightDataModule setup(): val_size: {val_size}\")\n",
    "print(f\"LightDataModule setup(): train_size: {train_size}\")\n",
    "print(f\"LightDataModule setup(): test_size: {test_size}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "305c1fc9",
   "metadata": {},
   "source": [
    "#### The \"setup\" Method: Stage \"fit\" {#sec-stage-fit-601}\n",
    "\n",
    "Here, `train_size` and `val_size` are used to split the data into training and validation sets.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "user_data_module_setup_fit",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_size: 0.36, val_size: 0.24 used for train & val data.\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_data_module_setup_fit\n",
    "stage = \"fit\"\n",
    "scaler = None\n",
    "# Assign train/val datasets for use in dataloaders\n",
    "if stage == \"fit\" or stage is None:\n",
    "    print(f\"train_size: {train_size}, val_size: {val_size} used for train & val data.\")\n",
    "    generator_fit = torch.Generator().manual_seed(test_seed)\n",
    "    data_train, data_val, _ = random_split(\n",
    "        data_full, [train_size, val_size, test_size], generator=generator_fit\n",
    "    )\n",
    "    if scaler is not None:\n",
    "        # Fit the scaler on training data and transform both train and val data\n",
    "        scaler_train_data = torch.stack([data_train[i][0] for i in range(len(data_train))]).squeeze(1)\n",
    "        # train_val_data = data_train[:,0]\n",
    "        print(scaler_train_data.shape)\n",
    "        scaler.fit(scaler_train_data)\n",
    "        data_train = [(scaler.transform(data), target) for data, target in data_train]\n",
    "        data_tensors_train = [data.clone().detach() for data, target in data_train]\n",
    "        target_tensors_train = [target.clone().detach() for data, target in data_train]\n",
    "        data_train = TensorDataset(\n",
    "            torch.stack(data_tensors_train).squeeze(1), torch.stack(target_tensors_train)\n",
    "        )\n",
    "        # print(data_train)\n",
    "        data_val = [(scaler.transform(data), target) for data, target in data_val]\n",
    "        data_tensors_val = [data.clone().detach() for data, target in data_val]\n",
    "        target_tensors_val = [target.clone().detach() for data, target in data_val]\n",
    "        data_val = TensorDataset(torch.stack(data_tensors_val).squeeze(1), torch.stack(target_tensors_val))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a7ff826",
   "metadata": {},
   "source": [
    "The `data_train` and `data_val` data sets are further used to create the training and validation data loaders as \n",
    "described in @sec-train-dataloader-601 and @sec-val-dataloader-601, respectively.\n",
    "\n",
    "#### The \"setup\" Method: Stage \"test\" {#sec-stage-test-601}\n",
    "\n",
    "Here, the test data set, which is based on the `test_size`, is created.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "user_data_module_setup_test",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_size: 0.4 used for test dataset.\n",
      "LightDataModule setup(): Test set size: 177\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0490, -0.0446, -0.0418,  0.1045,  0.0356, -0.0257,  0.1775, -0.0764,\n",
      "         -0.0129,  0.0155],\n",
      "        [-0.0273,  0.0507, -0.0159, -0.0298,  0.0039, -0.0007,  0.0413, -0.0395,\n",
      "         -0.0236,  0.0113],\n",
      "        [ 0.0708,  0.0507, -0.0170,  0.0219,  0.0438,  0.0563,  0.0376, -0.0026,\n",
      "         -0.0702, -0.0176],\n",
      "        [-0.0382,  0.0507,  0.0714, -0.0573,  0.1539,  0.1559,  0.0008,  0.0719,\n",
      "          0.0503,  0.0693],\n",
      "        [ 0.0453, -0.0446,  0.0391,  0.0460,  0.0067, -0.0242,  0.0081, -0.0126,\n",
      "          0.0643,  0.0569]])\n",
      "Targets: tensor([103.,  53.,  80., 220., 246.])\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_data_module_setup_test\n",
    "stage = \"test\"\n",
    "# Assign test dataset for use in dataloader(s)\n",
    "if stage == \"test\" or stage is None:\n",
    "    print(f\"test_size: {test_size} used for test dataset.\")\n",
    "    # get test data set as test_abs percent of the full dataset\n",
    "    generator_test = torch.Generator().manual_seed(test_seed)\n",
    "    data_test, _ = random_split(data_full, [test_size, full_train_size], generator=generator_test)\n",
    "    if scaler is not None:\n",
    "        data_test = [(scaler.transform(data), target) for data, target in data_test]\n",
    "        data_tensors_test = [data.clone().detach() for data, target in data_test]\n",
    "        target_tensors_test = [target.clone().detach() for data, target in data_test]\n",
    "        data_test = TensorDataset(\n",
    "            torch.stack(data_tensors_test).squeeze(1), torch.stack(target_tensors_test)\n",
    "        )\n",
    "print(f\"LightDataModule setup(): Test set size: {len(data_test)}\")\n",
    "# Set batch size for DataLoader\n",
    "batch_size = 5\n",
    "# Create DataLoader\n",
    "from torch.utils.data import DataLoader\n",
    "dataloader = DataLoader(data_test, batch_size=batch_size, shuffle=False)\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dataloader:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d0903a4",
   "metadata": {},
   "source": [
    "#### The \"setup\" Method: Stage \"predict\" {#sec-stage-predict-601}\n",
    "\n",
    "Prediction and testing use the same data set.\n",
    "The prediction data set is created based on the `test_size`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "user_data_module_setup_predict",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_size: 0.4 used for predict dataset.\n",
      "LightDataModule setup(): Predict set size: 177\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0490, -0.0446, -0.0418,  0.1045,  0.0356, -0.0257,  0.1775, -0.0764,\n",
      "         -0.0129,  0.0155],\n",
      "        [-0.0273,  0.0507, -0.0159, -0.0298,  0.0039, -0.0007,  0.0413, -0.0395,\n",
      "         -0.0236,  0.0113],\n",
      "        [ 0.0708,  0.0507, -0.0170,  0.0219,  0.0438,  0.0563,  0.0376, -0.0026,\n",
      "         -0.0702, -0.0176],\n",
      "        [-0.0382,  0.0507,  0.0714, -0.0573,  0.1539,  0.1559,  0.0008,  0.0719,\n",
      "          0.0503,  0.0693],\n",
      "        [ 0.0453, -0.0446,  0.0391,  0.0460,  0.0067, -0.0242,  0.0081, -0.0126,\n",
      "          0.0643,  0.0569]])\n",
      "Targets: tensor([103.,  53.,  80., 220., 246.])\n"
     ]
    }
   ],
   "source": [
    "#| label: 601_user_data_module_setup_predict\n",
    "stage = \"predict\"\n",
    "if stage == \"predict\" or stage is None:\n",
    "    print(f\"test_size: {test_size} used for predict dataset.\")\n",
    "    # get test data set as test_abs percent of the full dataset\n",
    "    generator_predict = torch.Generator().manual_seed(test_seed)\n",
    "    data_predict, _ = random_split(\n",
    "        data_full, [test_size, full_train_size], generator=generator_predict\n",
    "    )\n",
    "    if scaler is not None:\n",
    "        data_predict = [(scaler.transform(data), target) for data, target in data_predict]\n",
    "        data_tensors_predict = [data.clone().detach() for data, target in data_predict]\n",
    "        target_tensors_predict = [target.clone().detach() for data, target in data_predict]\n",
    "        data_predict = TensorDataset(\n",
    "            torch.stack(data_tensors_predict).squeeze(1), torch.stack(target_tensors_predict)\n",
    "        )\n",
    "print(f\"LightDataModule setup(): Predict set size: {len(data_predict)}\")\n",
    "# Set batch size for DataLoader\n",
    "batch_size = 5\n",
    "# Create DataLoader\n",
    "from torch.utils.data import DataLoader\n",
    "dataloader = DataLoader(data_predict, batch_size=batch_size, shuffle=False)\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dataloader:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80a26de5",
   "metadata": {},
   "source": [
    "### The `train_dataloader()` Method {#sec-train-dataloader-601}\n",
    "\n",
    "The method ``train_dataloader` returns the training dataloader, i.e., a Pytorch DataLoader instance using the training dataset.\n",
    "It simply returns a DataLoader with the `data_train` set that was created in the `setup()` method as described in @sec-stage-fit-601.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1540b719",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "def train_dataloader(self) -> DataLoader:\n",
    "    return DataLoader(data_train, batch_size=batch_size, num_workers=num_workers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b41a11f",
   "metadata": {},
   "source": [
    "::: {.callout-note}\n",
    "#### Using the `train_dataloader()` Method\n",
    "\n",
    "The `train_dataloader()` method can be used as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e1f33497",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: 160\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0562, -0.0446, -0.0579, -0.0080,  0.0521,  0.0491,  0.0560, -0.0214,\n",
      "         -0.0283,  0.0445],\n",
      "        [ 0.0018, -0.0446, -0.0709, -0.0229, -0.0016, -0.0010,  0.0266, -0.0395,\n",
      "         -0.0225,  0.0072],\n",
      "        [-0.0527, -0.0446,  0.0542, -0.0263, -0.0552, -0.0339, -0.0139, -0.0395,\n",
      "         -0.0741, -0.0591],\n",
      "        [ 0.0054, -0.0446, -0.0482, -0.0126,  0.0012, -0.0066,  0.0634, -0.0395,\n",
      "         -0.0514, -0.0591],\n",
      "        [-0.0527, -0.0446, -0.0094, -0.0057,  0.0397,  0.0447,  0.0266, -0.0026,\n",
      "         -0.0181, -0.0135]])\n",
      "Targets: tensor([158.,  49., 142.,  96.,  59.])\n"
     ]
    }
   ],
   "source": [
    "from spotpython.data.lightdatamodule import LightDataModule\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "dataset = Diabetes(target_type=torch.float)\n",
    "data_module = LightDataModule(dataset=dataset, batch_size=5, test_size=0.4)\n",
    "data_module.setup()\n",
    "print(f\"Training set size: {len(data_module.data_train)}\")\n",
    "dl = data_module.train_dataloader()\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dl:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b11fc846",
   "metadata": {},
   "source": [
    ":::\n",
    "\n",
    "### The `val_dataloader()` Method {#sec-val-dataloader-601}\n",
    "\n",
    "Returns the validation dataloader, i.e., a Pytorch DataLoader instance using the validation dataset.\n",
    "It simply returns a DataLoader with the `data_val` set that was created in the `setup()` method as desccribed in @sec-stage-fit-601.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3a6ac5ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "def val_dataloader(self) -> DataLoader:\n",
    "    return DataLoader(data_val, batch_size=batch_size, num_workers=num_workers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ae5f6fb",
   "metadata": {},
   "source": [
    "::: {.callout-note}\n",
    "#### Using the `val_dataloader()` Method\n",
    "\n",
    "The `val_dataloader()` method can be used as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "865cca9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation set size: 106\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0163, -0.0446,  0.0736, -0.0412, -0.0043, -0.0135, -0.0139, -0.0011,\n",
      "          0.0429,  0.0445],\n",
      "        [ 0.0453, -0.0446,  0.0714,  0.0012, -0.0098, -0.0010,  0.0155, -0.0395,\n",
      "         -0.0412, -0.0715],\n",
      "        [ 0.0308,  0.0507,  0.0326,  0.0494, -0.0401, -0.0436, -0.0692,  0.0343,\n",
      "          0.0630,  0.0031],\n",
      "        [ 0.0235,  0.0507, -0.0396, -0.0057, -0.0484, -0.0333,  0.0118, -0.0395,\n",
      "         -0.1016, -0.0674],\n",
      "        [-0.0091,  0.0507,  0.0013, -0.0022,  0.0796,  0.0701,  0.0339, -0.0026,\n",
      "          0.0267,  0.0818]])\n",
      "Targets: tensor([275., 141., 208.,  78., 142.])\n"
     ]
    }
   ],
   "source": [
    "from spotpython.data.lightdatamodule import LightDataModule\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "dataset = Diabetes(target_type=torch.float)\n",
    "data_module = LightDataModule(dataset=dataset, batch_size=5, test_size=0.4)\n",
    "data_module.setup()\n",
    "print(f\"Validation set size: {len(data_module.data_val)}\")\n",
    "dl = data_module.val_dataloader()\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dl:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9ae8f96",
   "metadata": {},
   "source": [
    "::: \n",
    "\n",
    "\n",
    "### The `test_dataloader()` Method\n",
    "\n",
    "Returns the test dataloader, i.e., a Pytorch DataLoader instance using the test dataset.\n",
    "It simply returns a DataLoader with the `data_test` set that was created in the `setup()` method as described in @sec-stage-test-30.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "de357cc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "def test_dataloader(self) -> DataLoader:\n",
    "    return DataLoader(data_test, batch_size=batch_size, num_workers=num_workers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f8c224e",
   "metadata": {},
   "source": [
    "::: {.callout-note}\n",
    "#### Using the `test_dataloader()` Method\n",
    "\n",
    "The `test_dataloader()` method can be used as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "67bd272c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set size: 177\n",
      "Batch Size: 5\n",
      "Inputs Shape: torch.Size([5, 10])\n",
      "Targets Shape: torch.Size([5])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0562, -0.0446, -0.0579, -0.0080,  0.0521,  0.0491,  0.0560, -0.0214,\n",
      "         -0.0283,  0.0445],\n",
      "        [ 0.0018, -0.0446, -0.0709, -0.0229, -0.0016, -0.0010,  0.0266, -0.0395,\n",
      "         -0.0225,  0.0072],\n",
      "        [-0.0527, -0.0446,  0.0542, -0.0263, -0.0552, -0.0339, -0.0139, -0.0395,\n",
      "         -0.0741, -0.0591],\n",
      "        [ 0.0054, -0.0446, -0.0482, -0.0126,  0.0012, -0.0066,  0.0634, -0.0395,\n",
      "         -0.0514, -0.0591],\n",
      "        [-0.0527, -0.0446, -0.0094, -0.0057,  0.0397,  0.0447,  0.0266, -0.0026,\n",
      "         -0.0181, -0.0135]])\n",
      "Targets: tensor([158.,  49., 142.,  96.,  59.])\n"
     ]
    }
   ],
   "source": [
    "from spotpython.data.lightdatamodule import LightDataModule\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "dataset = Diabetes(target_type=torch.float)\n",
    "data_module = LightDataModule(dataset=dataset, batch_size=5, test_size=0.4)\n",
    "data_module.setup()\n",
    "print(f\"Test set size: {len(data_module.data_test)}\")\n",
    "dl = data_module.test_dataloader()\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dl:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "350adc21",
   "metadata": {},
   "source": [
    "::: \n",
    "\n",
    "### The `predict_dataloader()` Method\n",
    "\n",
    "Returns the prediction dataloader, i.e., a Pytorch DataLoader instance using the prediction dataset.\n",
    "It simply returns a DataLoader with the `data_predict` set that was created in the `setup()` method as described in @sec-stage-predict-30.\n",
    "\n",
    "::: {.callout-warning}\n",
    "The `batch_size` is set to the length of the `data_predict` set.\n",
    ":::"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "57b84c97",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "def predict_dataloader(self) -> DataLoader:\n",
    "    return DataLoader(data_predict, batch_size=len(data_predict), num_workers=num_workers)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b55b71a1",
   "metadata": {},
   "source": [
    "::: {.callout-note}\n",
    "#### Using the `predict_dataloader()` Method\n",
    "\n",
    "The `predict_dataloader()` method can be used as follows:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "69618749",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test set size: 177\n",
      "Batch Size: 177\n",
      "Inputs Shape: torch.Size([177, 10])\n",
      "Targets Shape: torch.Size([177])\n",
      "---------------\n",
      "Inputs: tensor([[ 0.0562, -0.0446, -0.0579,  ..., -0.0214, -0.0283,  0.0445],\n",
      "        [ 0.0018, -0.0446, -0.0709,  ..., -0.0395, -0.0225,  0.0072],\n",
      "        [-0.0527, -0.0446,  0.0542,  ..., -0.0395, -0.0741, -0.0591],\n",
      "        ...,\n",
      "        [ 0.0090, -0.0446, -0.0321,  ..., -0.0764, -0.0119, -0.0384],\n",
      "        [-0.0273, -0.0446, -0.0666,  ..., -0.0395, -0.0358, -0.0094],\n",
      "        [ 0.0817,  0.0507,  0.0067,  ...,  0.0919,  0.0547,  0.0072]])\n",
      "Targets: tensor([158.,  49., 142.,  96.,  59.,  74., 137., 136.,  39.,  66., 310., 198.,\n",
      "        235., 116.,  55., 177.,  59., 246.,  53., 135.,  88., 198., 186., 217.,\n",
      "         51., 118., 153., 180.,  51., 229.,  84.,  72., 237., 142., 185.,  91.,\n",
      "         88., 148., 179., 144.,  25.,  89.,  42.,  60., 124., 170., 215., 263.,\n",
      "        178., 245., 202.,  97., 321.,  71., 123., 220., 132., 243.,  61., 102.,\n",
      "        187.,  70., 242., 134.,  63.,  72.,  88., 219., 127., 146., 122., 143.,\n",
      "        220., 293.,  59., 317.,  60., 140.,  65., 277.,  90.,  96., 109., 190.,\n",
      "         90.,  52., 160., 233., 230., 175.,  68., 272., 144.,  70.,  68., 163.,\n",
      "         71.,  93., 263., 118., 220.,  90., 232., 120., 163.,  88.,  85.,  52.,\n",
      "        181., 232., 212., 332.,  81., 214., 145., 268., 115.,  93.,  64., 156.,\n",
      "        128., 200., 281., 103., 220.,  66.,  48., 246.,  42., 150., 125., 109.,\n",
      "        129.,  97., 265.,  97., 173., 216., 237., 121.,  42., 151.,  31.,  68.,\n",
      "        137., 221., 283., 124., 243., 150.,  69., 306., 182., 252., 132., 258.,\n",
      "        121., 110., 292., 101., 275., 141., 208.,  78., 142., 185., 167., 258.,\n",
      "        144.,  89., 225., 140., 303., 236.,  87.,  77., 131.])\n"
     ]
    }
   ],
   "source": [
    "from spotpython.data.lightdatamodule import LightDataModule\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "dataset = Diabetes(target_type=torch.float)\n",
    "data_module = LightDataModule(dataset=dataset, batch_size=5, test_size=0.4)\n",
    "data_module.setup()\n",
    "print(f\"Test set size: {len(data_module.data_predict)}\")\n",
    "dl = data_module.predict_dataloader()\n",
    "# Iterate over the data in the DataLoader\n",
    "for batch in dl:\n",
    "    inputs, targets = batch\n",
    "    print(f\"Batch Size: {inputs.size(0)}\")\n",
    "    print(f\"Inputs Shape: {inputs.shape}\")\n",
    "    print(f\"Targets Shape: {targets.shape}\")\n",
    "    print(\"---------------\")\n",
    "    print(f\"Inputs: {inputs}\")\n",
    "    print(f\"Targets: {targets}\")\n",
    "    break"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14c19acf",
   "metadata": {},
   "source": [
    ":::\n",
    "\n",
    "## Using the `LightDataModule` in the `train_model()` Method\n",
    "\n",
    "The methods discussed so far are used in `spotpython`'s  `train_model()` method [[DOC]](https://sequential-parameter-optimization.github.io/spotPython/reference/spotpython/light/trainmodel/) to train the model.\n",
    "It is implemented as follows [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotpython/light/trainmodel.py).\n",
    "\n",
    "First, a `LightDataModule` object is created and the `setup()` method is called."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9d48fe99",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "dm = LightDataModule(\n",
    "    dataset=fun_control[\"data_set\"],\n",
    "    batch_size=config[\"batch_size\"],\n",
    "    num_workers=fun_control[\"num_workers\"],\n",
    "    test_size=fun_control[\"test_size\"],\n",
    "    test_seed=fun_control[\"test_seed\"],\n",
    ")\n",
    "dm.setup()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "efeb6da3",
   "metadata": {},
   "source": [
    "Then, the `Trainer` is initialized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5d14372e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "# Init trainer\n",
    "trainer = L.Trainer(\n",
    "    default_root_dir=os.path.join(fun_control[\"CHECKPOINT_PATH\"], config_id),\n",
    "    max_epochs=model.hparams.epochs,\n",
    "    accelerator=fun_control[\"accelerator\"],\n",
    "    devices=fun_control[\"devices\"],\n",
    "    logger=TensorBoardLogger(\n",
    "        save_dir=fun_control[\"TENSORBOARD_PATH\"],\n",
    "        version=config_id,\n",
    "        default_hp_metric=True,\n",
    "        log_graph=fun_control[\"log_graph\"],\n",
    "    ),\n",
    "    callbacks=[\n",
    "        EarlyStopping(monitor=\"val_loss\", patience=config[\"patience\"], mode=\"min\", strict=False, verbose=False)\n",
    "    ],\n",
    "    enable_progress_bar=enable_progress_bar,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5268e74c",
   "metadata": {},
   "source": [
    "Next, the `fit()` method is called to train the model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "38870de4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "# Pass the datamodule as arg to trainer.fit to override model hooks :)\n",
    "trainer.fit(model=model, datamodule=dm)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cde205d3",
   "metadata": {},
   "source": [
    "Finally, the `validate()` method is called to validate the model.\n",
    "The `validate()` method returns the validation loss.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6703012f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "# Test best model on validation and test set\n",
    "result = trainer.validate(model=model, datamodule=dm)\n",
    "# unlist the result (from a list of one dict)\n",
    "result = result[0]\n",
    "return result[\"val_loss\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea2e772f",
   "metadata": {},
   "source": [
    "## The Last Connection: The `HyperLight` Class\n",
    "\n",
    "The method `train_model()` is part of the `HyperLight` class [[DOC]](https://sequential-parameter-optimization.github.io/spotPython/reference/spotpython/light/trainmodel/). It is called from `spotpython` as an objective function to train the model and return the validation loss.\n",
    "\n",
    "The `HyperLight` class is implemented as follows [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotpython/fun/hyperlight.py).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "user_hyperlight",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| eval: false\n",
    "#| label: 601_user_hyperlight\n",
    "\n",
    "class HyperLight:\n",
    "    def fun(self, X: np.ndarray, fun_control: dict = None) -> np.ndarray:\n",
    "        z_res = np.array([], dtype=float)\n",
    "        self.check_X_shape(X=X, fun_control=fun_control)\n",
    "        var_dict = assign_values(X, get_var_name(fun_control))\n",
    "        for config in generate_one_config_from_var_dict(var_dict, fun_control):\n",
    "            df_eval = train_model(config, fun_control)\n",
    "            z_val = fun_control[\"weights\"] * df_eval\n",
    "            z_res = np.append(z_res, z_val)\n",
    "        return z_res"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24db27de",
   "metadata": {},
   "source": [
    "## Further Information \n",
    "\n",
    "### Preprocessing {#sec-preprocessing-601}\n",
    "\n",
    "Preprocessing is handled by `Lightning` and `PyTorch`. It is described in the [LIGHTNINGDATAMODULE](https://lightning.ai/docs/pytorch/stable/data/datamodule.html) documentation. Here you can find information about the `transforms` methods."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/bartz/miniforge3/envs/spot312/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
