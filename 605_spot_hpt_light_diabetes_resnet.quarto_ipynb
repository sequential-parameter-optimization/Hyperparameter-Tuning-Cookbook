{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "59b14737",
   "metadata": {},
   "source": [
    "---\n",
    "execute:\n",
    "  cache: false\n",
    "  eval: true\n",
    "  echo: true\n",
    "  warning: false\n",
    "title: Hyperparameter Tuning with `spotpython` and `PyTorch` Lightning for the Diabetes Data Set Using a ResNet Model\n",
    "jupyter: python3\n",
    "---\n",
    "\n",
    "\n",
    "\n",
    "In this section, we will show how `spotpython` can be integrated into the `PyTorch` Lightning\n",
    "training workflow for a regression task.\n",
    "It demonstrates how easy it is to use `spotpython` to tune hyperparameters for a `PyTorch` Lightning model.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "imports",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 605_imports\n",
    "#| echo: false\n",
    "import os\n",
    "from math import inf\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97c2dd55",
   "metadata": {},
   "source": [
    "After importing the necessary libraries, the `fun_control` dictionary is set up via the `fun_control_init` function.\n",
    "The `fun_control` dictionary contains\n",
    "\n",
    "* `PREFIX`: a unique identifier for the experiment\n",
    "* `fun_evals`: the number of function evaluations\n",
    "* `max_time`: the maximum run time in minutes\n",
    "* `data_set`: the data set. Here we use the `Diabetes` data set that is provided by `spotpython`.\n",
    "* `core_model_name`: the class name of the neural network model. This neural network model is provided by `spotpython`.\n",
    "* `hyperdict`: the hyperparameter dictionary. This dictionary is used to define the hyperparameters of the neural network model. It is also provided by `spotpython`.\n",
    "* `_L_in`: the number of input features. Since the `Diabetes` data set has 10 features, `_L_in` is set to 10.\n",
    "* `_L_out`: the number of output features. Since we want to predict a single value, `_L_out` is set to 1.\n",
    "\n",
    "The `HyperLight` class is used to define the objective function `fun`.\n",
    "It connects the `PyTorch` and the `spotpython` methods and is provided by `spotpython`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "spotpython_setup",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module_name: light\n",
      "submodule_name: regression\n",
      "model_name: NNResNetRegressor\n"
     ]
    }
   ],
   "source": [
    "#| label: 605_spotpython_setup\n",
    "\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "from spotpython.hyperdict.light_hyper_dict import LightHyperDict\n",
    "from spotpython.fun.hyperlight import HyperLight\n",
    "from spotpython.utils.init import (fun_control_init, surrogate_control_init, design_control_init)\n",
    "from spotpython.utils.eda import gen_design_table\n",
    "from spotpython.spot import spot\n",
    "from spotpython.utils.file import get_experiment_filename\n",
    "\n",
    "PREFIX=\"605\"\n",
    "\n",
    "data_set = Diabetes()\n",
    "\n",
    "fun_control = fun_control_init(\n",
    "    PREFIX=PREFIX,\n",
    "    fun_evals=inf,\n",
    "    max_time=1,\n",
    "    data_set = data_set,\n",
    "    core_model_name=\"light.regression.NNResNetRegressor\",\n",
    "    hyperdict=LightHyperDict,\n",
    "    _L_in=10,\n",
    "    _L_out=1)\n",
    "\n",
    "fun = HyperLight().fun"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef4bbc96",
   "metadata": {},
   "source": [
    "The method `set_hyperparameter` allows the user to modify default hyperparameter settings.\n",
    "Here we modify some hyperparameters to keep the model small and to decrease the tuning time.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "274b83db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | transform             |\n",
      "|----------------|--------|-----------|---------|---------|-----------------------|\n",
      "| l1             | int    | 3         |     3   |   4     | transform_power_2_int |\n",
      "| epochs         | int    | 4         |     3   |   7     | transform_power_2_int |\n",
      "| batch_size     | int    | 4         |     4   |  11     | transform_power_2_int |\n",
      "| act_fn         | factor | ReLU      |     0   |   5     | None                  |\n",
      "| optimizer      | factor | SGD       |     0   |   2     | None                  |\n",
      "| dropout_prob   | float  | 0.01      |     0   |   0.025 | None                  |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |  20     | None                  |\n",
      "| patience       | int    | 2         |     2   |   3     | transform_power_2_int |\n",
      "| initialization | factor | Default   |     0   |   4     | None                  |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.hyperparameters.values import set_hyperparameter\n",
    "set_hyperparameter(fun_control, \"optimizer\", [ \"Adadelta\", \"Adam\", \"Adamax\"])\n",
    "set_hyperparameter(fun_control, \"l1\", [3,4])\n",
    "set_hyperparameter(fun_control, \"epochs\", [3,7])\n",
    "set_hyperparameter(fun_control, \"batch_size\", [4,11])\n",
    "set_hyperparameter(fun_control, \"dropout_prob\", [0.0, 0.025])\n",
    "set_hyperparameter(fun_control, \"patience\", [2,3])\n",
    "set_hyperparameter(fun_control, \"lr_mult\", [0.1, 20.0])\n",
    "\n",
    "design_control = design_control_init(init_size=10)\n",
    "\n",
    "print(gen_design_table(fun_control))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60623476",
   "metadata": {},
   "source": [
    "Finally, a `Spot` object is created.\n",
    "Calling the method `run()` starts the hyperparameter tuning process.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "run",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.8 K  | train | [128, 10] | [128, 1] \n",
      "----------------------------------------------------------------------\n",
      "1.8 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.8 K     Total params\n",
      "0.007     Total estimated model params size (MB)\n",
      "101       Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23430.251953125, 'hp_metric': 23430.251953125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.8 K  | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "1.8 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.8 K     Total params\n",
      "0.007     Total estimated model params size (MB)\n",
      "101       Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23832.76171875, 'hp_metric': 23832.76171875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.8 K  | train | [16, 10] | [16, 1]  \n",
      "---------------------------------------------------------------------\n",
      "1.8 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.8 K     Total params\n",
      "0.007     Total estimated model params size (MB)\n",
      "101       Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24174.52734375, 'hp_metric': 24174.52734375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.8 K  | train | [1024, 10] | [1024, 1]\n",
      "-----------------------------------------------------------------------\n",
      "1.8 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.8 K     Total params\n",
      "0.007     Total estimated model params size (MB)\n",
      "101       Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23714.984375, 'hp_metric': 23714.984375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23998.998046875, 'hp_metric': 23998.998046875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [256, 10] | [256, 1] \n",
      "----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4521.89404296875, 'hp_metric': 4521.89404296875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24035.34375, 'hp_metric': 24035.34375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23314.099609375, 'hp_metric': 23314.099609375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.8 K  | train | [64, 10] | [64, 1]  \n",
      "---------------------------------------------------------------------\n",
      "1.8 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.8 K     Total params\n",
      "0.007     Total estimated model params size (MB)\n",
      "101       Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22047.951171875, 'hp_metric': 22047.951171875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23273.93359375, 'hp_metric': 23273.93359375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 9563.8974609375, 'hp_metric': 9563.8974609375}\n",
      "spotpython tuning: 4521.89404296875 [#---------] 6.10% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 7381.14501953125, 'hp_metric': 7381.14501953125}\n",
      "spotpython tuning: 4521.89404296875 [#---------] 12.37% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes  | Out sizes\n",
      "----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [512, 10] | [512, 1] \n",
      "----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23363.349609375, 'hp_metric': 23363.349609375}\n",
      "spotpython tuning: 4521.89404296875 [#---------] 14.56% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23838.75, 'hp_metric': 23838.75}\n",
      "spotpython tuning: 4521.89404296875 [##--------] 16.81% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [1024, 10] | [1024, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23894.296875, 'hp_metric': 23894.296875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 4521.89404296875 [###-------] 34.73% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3983.214599609375, 'hp_metric': 3983.214599609375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3983.214599609375 [####------] 41.79% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4832.064453125, 'hp_metric': 4832.064453125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3983.214599609375 [#####-----] 48.63% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 8285.69921875, 'hp_metric': 8285.69921875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3983.214599609375 [#######---] 70.17% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.8 K  | train | [1024, 10] | [1024, 1]\n",
      "-----------------------------------------------------------------------\n",
      "1.8 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.8 K     Total params\n",
      "0.007     Total estimated model params size (MB)\n",
      "101       Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23632.052734375, 'hp_metric': 23632.052734375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3983.214599609375 [########--] 76.30% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4522.251953125, 'hp_metric': 4522.251953125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3983.214599609375 [#########-] 88.46% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes | Out sizes\n",
      "---------------------------------------------------------------------\n",
      "0 | layers | Sequential | 1.8 K  | train | [32, 10] | [32, 1]  \n",
      "---------------------------------------------------------------------\n",
      "1.8 K     Trainable params\n",
      "0         Non-trainable params\n",
      "1.8 K     Total params\n",
      "0.007     Total estimated model params size (MB)\n",
      "101       Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 14587.1298828125, 'hp_metric': 14587.1298828125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3983.214599609375 [##########] 100.00% Done...\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "#| label: 605_run\n",
    "spot_tuner = spot.Spot(fun=fun,fun_control=fun_control, design_control=design_control)\n",
    "res = spot_tuner.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9de7c1cf",
   "metadata": {},
   "source": [
    "## Looking at the Results\n",
    "\n",
    "### Tuning Progress\n",
    "\n",
    "After the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized with `spotpython`'s method `plot_progress`. The black points represent the performace values (score or metric) of  hyperparameter configurations from the initial design, whereas the red points represents the  hyperparameter configurations found by the surrogate model based optimization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f3aede43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 2700x1800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_progress()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "282ed4b1",
   "metadata": {},
   "source": [
    "### Tuned Hyperparameters and Their Importance\n",
    "\n",
    "Results can be printed in tabular form.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "357a09e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | tuned               | transform             |   importance | stars   |\n",
      "|----------------|--------|-----------|---------|---------|---------------------|-----------------------|--------------|---------|\n",
      "| l1             | int    | 3         |     3.0 |     4.0 | 3.0                 | transform_power_2_int |         0.00 |         |\n",
      "| epochs         | int    | 4         |     3.0 |     7.0 | 7.0                 | transform_power_2_int |        11.63 | *       |\n",
      "| batch_size     | int    | 4         |     4.0 |    11.0 | 11.0                | transform_power_2_int |         0.00 |         |\n",
      "| act_fn         | factor | ReLU      |     0.0 |     5.0 | ReLU                | None                  |         0.00 |         |\n",
      "| optimizer      | factor | SGD       |     0.0 |     2.0 | Adadelta            | None                  |         0.00 |         |\n",
      "| dropout_prob   | float  | 0.01      |     0.0 |   0.025 | 0.01565972071452102 | None                  |       100.00 | ***     |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |    20.0 | 17.481358411838603  | None                  |       100.00 | ***     |\n",
      "| patience       | int    | 2         |     2.0 |     3.0 | 3.0                 | transform_power_2_int |        26.31 | *       |\n",
      "| initialization | factor | Default   |     0.0 |     4.0 | kaiming_uniform     | None                  |         0.01 |         |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.utils.eda import gen_design_table\n",
    "print(gen_design_table(fun_control=fun_control, spot=spot_tuner))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "907716b1",
   "metadata": {},
   "source": [
    "A histogram can be used to visualize the most important hyperparameters.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "753899f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 1650x1050 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_importance(threshold=1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8b94e2f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l1:  0.001\n",
      "epochs:  11.627910987386626\n",
      "batch_size:  0.001\n",
      "act_fn:  0.001\n",
      "optimizer:  0.001\n",
      "dropout_prob:  100.0\n",
      "lr_mult:  100.0\n",
      "patience:  26.31348984532779\n",
      "initialization:  0.00842478951799848\n"
     ]
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "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MzMgXSAvRm9udE1hdHJpeCBbIDAuMDAxIDAgMCAwLjAwMSAwIDAgXQovQ2hhclByb2NzIDE2IDAgUgovRW5jb2RpbmcgPDwgL1R5cGUgL0VuY29kaW5nCi9EaWZmZXJlbmNlcyBbIDMyIC9zcGFjZSA0MyAvcGx1cyA0NiAvcGVyaW9kIDQ4IC96ZXJvIC9vbmUgL3R3byAvdGhyZWUgL2ZvdXIgL2ZpdmUgL3NpeAovc2V2ZW4gL2VpZ2h0IC9uaW5lIC9jb2xvbiA5NSAvdW5kZXJzY29yZSA5NyAvYSAvYiAvYyAvZCAvZSAxMDUgL2kgMTEwIC9uCi9vIC9wIDExNCAvciAxMTYgL3QgL3UgMTIwIC94IF0KPj4KL1dpZHRocyAxMyAwIFIgPj4KZW5kb2JqCjE0IDAgb2JqCjw8IC9UeXBlIC9Gb250RGVzY3JpcHRvciAvRm9udE5hbWUgL0JNUVFEVitEZWphVnVTYW5zIC9GbGFncyAzMgovRm9udEJCb3ggWyAtMTAyMSAtNDYzIDE3OTQgMTIzMyBdIC9Bc2NlbnQgOTI5IC9EZXNjZW50IC0yMzYgL0NhcEhlaWdodCAwCi9YSGVpZ2h0IDAgL0l0YWxpY0FuZ2xlIDAgL1N0ZW1WIDAgL01heFdpZHRoIDEzNDIgPj4KZW5kb2JqCjEzIDAgb2JqClsgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAKNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCAzMTggNDAxIDQ2MCA4MzggNjM2Cjk1MCA3ODAgMjc1IDM5MCAzOTAgNTAwIDgzOCAzMTggMzYxIDMxOCAzMzcgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNgo2MzYgNjM2IDMzNyAzMzcgODM4IDgzOCA4MzggNTMxIDEwMDAgNjg0IDY4NiA2OTggNzcwIDYzMiA1NzUgNzc1IDc1MiAyOTUKMjk1IDY1NiA1NTcgODYzIDc0OCA3ODcgNjAzIDc4NyA2OTUgNjM1IDYxMSA3MzIgNjg0IDk4OSA2ODUgNjExIDY4NSAzOTAgMzM3CjM5MCA4MzggNTAwIDUwMCA2MTMgNjM1IDU1MCA2MzUgNjE1IDM1MiA2MzUgNjM0IDI3OCAyNzggNTc5IDI3OCA5NzQgNjM0IDYxMgo2MzUgNjM1IDQxMSA1MjEgMzkyIDYzNCA1OTIgODE4IDU5MiA1OTIgNTI1IDYzNiAzMzcgNjM2IDgzOCA2MDAgNjM2IDYwMCAzMTgKMzUyIDUxOCAxMDAwIDUwMCA1MDAgNTAwIDEzNDIgNjM1IDQwMCAxMDcwIDYwMCA2ODUgNjAwIDYwMCAzMTggMzE4IDUxOCA1MTgKNTkwIDUwMCAxMDAwIDUwMCAxMDAwIDUyMSA0MDAgMTAyMyA2MDAgNTI1IDYxMSAzMTggNDAxIDYzNiA2MzYgNjM2IDYzNiAzMzcKNTAwIDUwMCAxMDAwIDQ3MSA2MTIgODM4IDM2MSAxMDAwIDUwMCA1MDAgODM4IDQwMSA0MDEgNTAwIDYzNiA2MzYgMzE4IDUwMAo0MDEgNDcxIDYxMiA5NjkgOTY5IDk2OSA1MzEgNjg0IDY4NCA2ODQgNjg0IDY4NCA2ODQgOTc0IDY5OCA2MzIgNjMyIDYzMiA2MzIKMjk1IDI5NSAyOTUgMjk1IDc3NSA3NDggNzg3IDc4NyA3ODcgNzg3IDc4NyA4MzggNzg3IDczMiA3MzIgNzMyIDczMiA2MTEgNjA1CjYzMCA2MTMgNjEzIDYxMyA2MTMgNjEzIDYxMyA5ODIgNTUwIDYxNSA2MTUgNjE1IDYxNSAyNzggMjc4IDI3OCAyNzggNjEyIDYzNAo2MTIgNjEyIDYxMiA2MTIgNjEyIDgzOCA2MTIgNjM0IDYzNCA2MzQgNjM0IDU5MiA2MzUgNTkyIF0KZW5kb2JqCjE2IDAgb2JqCjw8IC9hIDE3IDAgUiAvYiAxOCAwIFIgL2MgMTkgMCBSIC9jb2xvbiAyMCAwIFIgL2QgMjEgMCBSIC9lIDIyIDAgUgovZWlnaHQgMjMgMCBSIC9maXZlIDI0IDAgUiAvZm91ciAyNSAwIFIgL2kgMjYgMCBSIC9uIDI4IDAgUiAvbmluZSAyOSAwIFIKL28gMzAgMCBSIC9vbmUgMzEgMCBSIC9wIDMyIDAgUiAvcGVyaW9kIDMzIDAgUiAvcGx1cyAzNCAwIFIgL3IgMzUgMCBSCi9zZXZlbiAzNiAwIFIgL3NpeCAzNyAwIFIgL3NwYWNlIDM4IDAgUiAvdCAzOSAwIFIgL3RocmVlIDQwIDAgUiAvdHdvIDQxIDAgUgovdSA0MiAwIFIgL3VuZGVyc2NvcmUgNDMgMCBSIC94IDQ0IDAgUiAvemVybyA0NSAwIFIgPj4KZW5kb2JqCjMgMCBvYmoKPDwgL0YxIDE1IDAgUiA+PgplbmRvYmoKNCAwIG9iago8PCAvQTEgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMCAvY2EgMSA+PgovQTIgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMSAvY2EgMSA+PgovQTMgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMC41IC9jYSAwLjUgPj4KL0E0IDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDEgL2NhIDAuOSA+PiA+PgplbmRvYmoKNSAwIG9iago8PCA+PgplbmRvYmoKNiAwIG9iago8PCA+PgplbmRvYmoKNyAwIG9iago8PCAvRjEtRGVqYVZ1U2Fucy1taW51cyAyNyAwIFIgPj4KZW5kb2JqCjIgMCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9LaWRzIFsgMTEgMCBSIF0gL0NvdW50IDEgPj4KZW5kb2JqCjQ2IDAgb2JqCjw8IC9DcmVhdG9yIChNYXRwbG90bGliIHYzLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZykKL1Byb2R1Y2VyIChNYXRwbG90bGliIHBkZiBiYWNrZW5kIHYzLjkuMikKL0NyZWF0aW9uRGF0ZSAoRDoyMDI0MTExMDIyMTYzOSswMicwMCcpID4+CmVuZG9iagp4cmVmCjAgNDcKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDE2IDAwMDAwIG4gCjAwMDAwMzU1MzMgMDAwMDAgbiAKMDAwMDAzNTIyNyAwMDAwMCBuIAowMDAwMDM1MjU5IDAwMDAwIG4gCjAwMDAwMzU0NDIgMDAwMDAgbiAKMDAwMDAzNTQ2MyAwMDAwMCBuIAowMDAwMDM1NDg0IDAwMDAwIG4gCjAwMDAwMDAwNjUgMDAwMDAgbiAKMDAwMDAwMDM0NyAwMDAwMCBuIAowMDAwMDI1NzczIDAwMDAwIG4gCjAwMDAwMDAyMDggMDAwMDAgbiAKMDAwMDAyNTc1MSAwMDAwMCBuIAowMDAwMDMzODE3IDAwMDAwIG4gCjAwMDAwMzM2MTAgMDAwMDAgbiAKMDAwMDAzMzEyNiAwMDAwMCBuIAowMDAwMDM0ODcwIDAwMDAwIG4gCjAwMDAwMjU3OTMgMDAwMDAgbiAKMDAwMDAyNjE3MyAwMDAwMCBuIAowMDAwMDI2NDkwIDAwMDAwIG4gCjAwMDAwMjY3OTUgMDAwMDAgbiAKMDAwMDAyNjk0MCAwMDAwMCBuIAowMDAwMDI3MjQ0IDAwMDAwIG4gCjAwMDAwMjc1NjYgMDAwMDAgbiAKMDAwMDAyODAzNCAwMDAwMCBuIAowMDAwMDI4MzU2IDAwMDAwIG4gCjAwMDAwMjg1MjIgMDAwMDAgbiAKMDAwMDAyODY2NiAwMDAwMCBuIAowMDAwMDI4ODM4IDAwMDAwIG4gCjAwMDAwMjkwNzQgMDAwMDAgbiAKMDAwMDAyOTQ2OSAwMDAwMCBuIAowMDAwMDI5NzYwIDAwMDAwIG4gCjAwMDAwMjk5MTUgMDAwMDAgbiAKMDAwMDAzMDIyNyAwMDAwMCBuIAowMDAwMDMwMzUwIDAwMDAwIG4gCjAwMDAwMzA1MDMgMDAwMDAgbiAKMDAwMDAzMDczNiAwMDAwMCBuIAowMDAwMDMwODc4IDAwMDAwIG4gCjAwMDAwMzEyNzEgMDAwMDAgbiAKMDAwMDAzMTM2MSAwMDAwMCBuIAowMDAwMDMxNTY3IDAwMDAwIG4gCjAwMDAwMzE5ODAgMDAwMDAgbiAKMDAwMDAzMjMwNCAwMDAwMCBuIAowMDAwMDMyNTUxIDAwMDAwIG4gCjAwMDAwMzI2NzcgMDAwMDAgbiAKMDAwMDAzMjgzOCAwMDAwMCBuIAowMDAwMDM1NTkzIDAwMDAwIG4gCnRyYWlsZXIKPDwgL1NpemUgNDcgL1Jvb3QgMSAwIFIgL0luZm8gNDYgMCBSID4+CnN0YXJ0eHJlZgozNTc1MAolJUVPRgo=",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_important_hyperparameter_contour(max_imp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e3d3b20",
   "metadata": {},
   "source": [
    "### Get the Tuned Architecture {#sec-get-spot-results-31}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "66592f5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'act_fn': ReLU(),\n",
      " 'batch_size': 2048,\n",
      " 'dropout_prob': 0.01565972071452102,\n",
      " 'epochs': 128,\n",
      " 'initialization': 'kaiming_uniform',\n",
      " 'l1': 8,\n",
      " 'lr_mult': 17.481358411838603,\n",
      " 'optimizer': 'Adadelta',\n",
      " 'patience': 8}\n"
     ]
    }
   ],
   "source": [
    "import pprint\n",
    "from spotpython.hyperparameters.values import get_tuned_architecture\n",
    "config = get_tuned_architecture(spot_tuner, fun_control)\n",
    "pprint.pprint(config)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "933de3f0",
   "metadata": {},
   "source": [
    "### Test on the full data set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "31481608",
   "metadata": {},
   "outputs": [],
   "source": [
    "# set the value of the key \"TENSORBOARD_CLEAN\" to True in the fun_control dictionary and use the update() method to update the fun_control dictionary\n",
    "import os\n",
    "# if the directory \"./runs\" exists, delete it\n",
    "if os.path.exists(\"./runs\"):\n",
    "    os.system(\"rm -r ./runs\")\n",
    "fun_control.update({\"tensorboard_log\": True})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b2bdf613",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Restoring states from the checkpoint path at /Users/bartz/workspace/Hyperparameter-Tuning-Cookbook/runs/saved_models/8_128_2048_ReLU_Adadelta_0.0157_17.4814_8_kaiming_uniform_TEST/last.ckpt\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loaded model weights from the checkpoint at /Users/bartz/workspace/Hyperparameter-Tuning-Cookbook/runs/saved_models/8_128_2048_ReLU_Adadelta_0.0157_17.4814_8_kaiming_uniform_TEST/last.ckpt\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\">        Test metric        </span>┃<span style=\"font-weight: bold\">       DataLoader 0        </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">         hp_metric         </span>│<span style=\"color: #800080; text-decoration-color: #800080\">      4261.4482421875      </span>│\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\">         val_loss          </span>│<span style=\"color: #800080; text-decoration-color: #800080\">      4261.4482421875      </span>│\n",
       "└───────────────────────────┴───────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1m       Test metric       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      DataLoader 0       \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36m        hp_metric        \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m     4261.4482421875     \u001b[0m\u001b[35m \u001b[0m│\n",
       "│\u001b[36m \u001b[0m\u001b[36m        val_loss         \u001b[0m\u001b[36m \u001b[0m│\u001b[35m \u001b[0m\u001b[35m     4261.4482421875     \u001b[0m\u001b[35m \u001b[0m│\n",
       "└───────────────────────────┴───────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "test_model result: {'val_loss': 4261.4482421875, 'hp_metric': 4261.4482421875}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['age',\n",
       " 'sex',\n",
       " 'bmi',\n",
       " 'bp',\n",
       " 's1_tc',\n",
       " 's2_ldl',\n",
       " 's3_hdl',\n",
       " 's4_tch',\n",
       " 's5_ltg',\n",
       " 's6_glu']"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.light.testmodel import test_model\n",
    "from spotpython.utils.init import get_feature_names\n",
    "\n",
    "test_model(config, fun_control)\n",
    "get_feature_names(fun_control)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18628422",
   "metadata": {},
   "source": [
    "### Cross Validation With Lightning\n",
    "\n",
    "* The `KFold` class from `sklearn.model_selection` is used to generate the folds for cross-validation.\n",
    "* These mechanism is used to generate the folds for the final evaluation of the model.\n",
    "* The `CrossValidationDataModule` class [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/data/lightcrossvalidationdatamodule.py) is used to generate the folds for the hyperparameter tuning process.\n",
    "* It is called from the `cv_model` function [[SOURCE]](https://github.com/sequential-parameter-optimization/spotpython/blob/main/src/spotpython/light/cvmodel.py).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bdcba73e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'l1': 8,\n",
       " 'epochs': 128,\n",
       " 'batch_size': 2048,\n",
       " 'act_fn': ReLU(),\n",
       " 'optimizer': 'Adadelta',\n",
       " 'dropout_prob': 0.01565972071452102,\n",
       " 'lr_mult': 17.481358411838603,\n",
       " 'patience': 8,\n",
       " 'initialization': 'kaiming_uniform'}"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "11b15c7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k: 0\n",
      "Train Dataset Size: 221\n",
      "Val Dataset Size: 221\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name   | Type       | Params | Mode  | In sizes   | Out sizes\n",
      "-----------------------------------------------------------------------\n",
      "0 | layers | Sequential | 637    | train | [2048, 10] | [2048, 1]\n",
      "-----------------------------------------------------------------------\n",
      "637       Trainable params\n",
      "0         Non-trainable params\n",
      "637       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "63        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 8519.5078125, 'hp_metric': 8519.5078125}\n",
      "k: 1\n",
      "Train Dataset Size: 221\n",
      "Val Dataset Size: 221\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3927.25244140625, 'hp_metric': 3927.25244140625}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "6223.380126953125"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from spotpython.light.cvmodel import cv_model\n",
    "fun_control.update({\"k_folds\": 2})\n",
    "fun_control.update({\"test_size\": 0.6})\n",
    "cv_model(config, fun_control)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c81cb26b",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "This section presented an introduction to the basic setup of hyperparameter tuning with `spotpython` and `PyTorch` Lightning using a ResNet model for the Diabetes data set.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/bartz/miniforge3/envs/spot312/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
