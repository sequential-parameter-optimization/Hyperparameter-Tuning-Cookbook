{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "execute:\n",
        "  cache: false\n",
        "  eval: true\n",
        "  echo: true\n",
        "  warning: false\n",
        "---\n",
        "\n",
        "\n",
        "<!-- bart21mSlides2022Lec01-03 -->\n",
        "\n",
        "# Introduction: Numerical Methods\n",
        "\n",
        "This part deals with numerical implementations of optimization methods. The goal is to understand the implementation of optimization methods and to solve real-world problems numerically and efficiently. We will focus on the implementation of surrogate models, because they are the most efficient way to solve real-world problems.\n",
        "\n",
        "Starting point is the well-established response surface methodology. It will be extended to the design and analysis of computer experiments (DACE). The DACE methodology is a modern extension of the response surface methodology. It is based on the use of surrogate models, which are used to replace the real-world problem with a simpler problem. The simpler problem is then solved numerically. The solution of the simpler problem is then used to solve the real-world problem.\n",
        "\n",
        "::: {.callout-important}\n",
        "\n",
        "### Numerical methods: Goals\n",
        "\n",
        "* Understand implementation of optimization methods\n",
        "* Solve real-world problems numerically and efficiently\n",
        "\n",
        ":::\n",
        "\n",
        "## Response Surface Methods: What is RSM?\n",
        "\n",
        "Response Surface Methods (RSM) refer to a collection of statistical and mathematical tools that are valuable for developing, improving, and optimizing processes. The overarching theme of RSM involves studying how input variables that control a product or process can potentially influence a response that measures performance or quality characteristics. \n",
        "\n",
        "The advantages of RSM include a rich literature, well-established methods often used in manufacturing, the importance of careful experimental design combined with a well-understood model, and the potential to add significant value to scientific inquiry, process refinement, optimization, and more. However, there are also drawbacks to RSM, such as the use of simple and crude surrogates, the hands-on nature of the methods, and the limitation of local methods.\n",
        "\n",
        "RSM is related to various fields, including Design of Experiments (DoE), quality management, reliability, and productivity. Its applications are widespread in industry and manufacturing, focusing on designing, developing, and formulating new products and improving existing ones, as well as from laboratory research. RSM is commonly applied in domains such as materials science, manufacturing, applied chemistry, climate science, and many others.\n",
        "\n",
        "An example of RSM involves studying the relationship between a response variable, such as yield ($y$) in a chemical process, and two process variables: reaction time ($\\xi_1$) and reaction temperature ($\\xi_2$). The provided code illustrates this scenario, following a variation of the so-called \"banana function.\"\n",
        "\n",
        "In the context of visualization, RSM offers the choice between 3D plots and contour plots. In a 3D plot, the independent variables $\\xi_1$ and $\\xi_2$ are represented, with $y$ as the dependent variable.\n"
      ],
      "id": "38da1bee"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def fun_rosen(x1, x2):\n",
        "    b = 10\n",
        "    return (x1-1)**2 + b*(x2-x1**2)**2\n",
        "\n",
        "fig = plt.figure()\n",
        "ax = fig.add_subplot(111, projection='3d')\n",
        "x = np.arange(-2.0, 2.0, 0.05)\n",
        "y = np.arange(-1.0, 3.0, 0.05)\n",
        "X, Y = np.meshgrid(x, y)\n",
        "zs = np.array(fun_rosen(np.ravel(X), np.ravel(Y)))\n",
        "Z = zs.reshape(X.shape)\n",
        "\n",
        "ax.plot_surface(X, Y, Z)\n",
        "\n",
        "ax.set_xlabel('X1')\n",
        "ax.set_ylabel('X2')\n",
        "ax.set_zlabel('Y')\n",
        "\n",
        "plt.show()"
      ],
      "id": "183a53a3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- contour plot example: \n",
        "  - $x_1$ and $x_2$ are the independent variables\n",
        "  - $y$ is the dependent variable\n"
      ],
      "id": "d4399570"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.cm as cm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "delta = 0.025\n",
        "x1 = np.arange(-2.0, 2.0, delta)\n",
        "x2 = np.arange(-1.0, 3.0, delta)\n",
        "X1, X2 = np.meshgrid(x1, x2)\n",
        "Y = fun_rosen(X1, X2)\n",
        "fig, ax = plt.subplots()\n",
        "CS = ax.contour(X1, X2, Y , 50)\n",
        "ax.clabel(CS, inline=True, fontsize=10)\n",
        "ax.set_title(\"Rosenbrock's Banana Function\")"
      ],
      "id": "2045a70c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- Visual inspection: yield is optimized near $(\\xi_1. \\xi_2)$\n",
        "\n",
        "\n",
        "### Visualization: Problems in Practice\n",
        "\n",
        "- True response surface is unknown in practice\n",
        "- When yield evaluation is not as simple as a toy banana function, but a process requiring care to monitor, reconfigure and run, it's far too expensive to observe over a dense grid\n",
        "- And, measuring yield may be a noisy/inexact process\n",
        "- That's where stats (RSM) comes in\n",
        "\n",
        "\n",
        "### RSM: Strategies\n",
        "\n",
        "- RSMs consist of experimental strategies for\n",
        " - **exploring** the space of the process (i.e., independent/input) variables\n",
        "(above $\\xi_1$ and $\\xi2)$ \n",
        " - empirical statistical **modeling** targeted\n",
        "toward development of an appropriate approximating relationship between\n",
        "the response (yield) and process variables local to a study region of\n",
        "interest \n",
        "- **optimization** methods for sequential refinement in search\n",
        "of the levels or values of process variables that produce desirable\n",
        "responses (e.g., that maximize yield or explain variation)\n",
        "\n",
        "- RSM used for fitting an Empirical Model\n",
        "- True response surface driven by an unknown physical mechanism\n",
        "- Observations corrupted by noise \n",
        "- Helpful:  fit an empirical model to output collected under different process configurations\n",
        "- Consider response $Y$ that depends on controllable input variables $\\xi_1, \\xi_2, \\ldots, \\xi_m$ \n",
        "- RSM: Equations of the  Empirical Model\n",
        "  - $Y=f(\\xi_1, \\xi_2, \\ldots, \\xi_m) + \\epsilon$\n",
        "  - $\\mathbb{E}\\{Y\\} = \\eta = f(\\xi1_1, \\xi_2, \\ldots, \\xi_m)$\n",
        "  - $\\epsilon$ is treated as zero mean idiosyncratic noise possibly representing\n",
        "    - inherent variation, or \n",
        "    - the effect of other systems or\n",
        "    - variables not under our purview at this time \n",
        "\n",
        "\n",
        "### RSM: Noise in the Empirical Model \n",
        "\n",
        "- Typical simplifying assumption: $\\epsilon \\sim N(0,\\sigma^2)$ \n",
        "- We seek estimates for $f$ and $\\sigma^2$ from noisy observations $Y$ at inputs $\\xi$\n",
        "\n",
        "### RSM: Natural and Coded Variables\n",
        "\n",
        "- Inputs $\\xi_1, \\xi_2, \\ldots, \\xi_m$  called **natural variables**:\n",
        "  - expressed in natural units of measurement, e.g., degrees Celsius, pounds per square inch (psi), etc.\n",
        "- Transformed to **coded variables** $x_1, x_2, \\ldots, x_m$:\n",
        "  - to mitigate hassles and confusion that can arise when working with a multitude of scales of measurement\n",
        "- Typical **Transformations** offering dimensionless inputs $x_1, x_2, \\ldots, x_m$ \n",
        "  - in the unit cube, or \n",
        "  - scaled to have a mean of zero and standard deviation of one, are common choices. \n",
        "- Empirical model becomes $\\eta = f(x_1, x_2, \\ldots, x_m)$\n",
        "\n",
        "\n",
        "### RSM Low-order Polynomials\n",
        "\n",
        "- Low-order polynomial make the following simplifying Assumptions\n",
        "  - Learning about $f$ is lots easier if we make some simplifying approximations\n",
        "  - Appealing to **Taylor's theorem**, a low-order polynomial in a small, localized region of the input ($x$) space is one way forward\n",
        "  - Classical RSM: \n",
        "    - disciplined application of **local analysis** and \n",
        "    - **sequential refinement** of locality through conservative extrapolation\n",
        "  - Inherently a **hands-on process**\n",
        "\n",
        "\n",
        "## First-Order Models (Main Effects Model)\n",
        "\n",
        "- **First-order model** (sometimes called main effects model) useful in parts of the input space where it's believed that there's little curvature in $f$:\n",
        "$$\\eta = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 $$\n",
        "- For example: \n",
        "$$\\eta = 50 + 8 x_1 + 3x_2$$\n",
        "- In practice, such a surface would be obtained by fitting a model to the outcome of a designed experiment \n",
        "- First-Order Model in python Evaluated on a Grid\n",
        "- Evaluate model on a grid in a double-unit square centered at the origin\n",
        "- Coded units are chosen arbitrarily, although one can imagine deploying this approximating function nearby $x^{(0)} = (0,0)$\n"
      ],
      "id": "4d200636"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def fun_1(x1,x2):\n",
        "    return 50 + 8*x1 + 3*x2"
      ],
      "id": "f4a93450",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.cm as cm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "delta = 0.025\n",
        "x1 = np.arange(-1.0, 1.0, delta)\n",
        "x2 = np.arange(-1.0, 1.0, delta)\n",
        "X1, X2 = np.meshgrid(x1, x2)\n",
        "Y = fun_1(X1,X2)\n",
        "fig, ax = plt.subplots()\n",
        "CS = ax.contour(X1, X2, Y)\n",
        "ax.clabel(CS, inline=True, fontsize=10)\n",
        "ax.set_title('First Order Model: $50 + 8x_1 + 3x_2$')"
      ],
      "id": "1f1c8db0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### First-Order Model Properties\n",
        " \n",
        "- First-order model in 2d traces out a **plane** in $y \\times (x_1, x_2)$ space\n",
        "- Only be appropriate for the most trivial of response surfaces, even when applied in a highly localized part of the input space\n",
        "- Adding **curvature** is key to most applications: \n",
        "  - First-order model with **interactions** induces limited degree of curvature via different rates of change of $y$ as $x_1$ is varied for fixed $x_2$, and vice versa:\n",
        "$$\\eta = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\beta_{12} x_{12} $$\n",
        "- For example \n",
        "$\\eta = 50+8x_1+3x_2-4x_1x_2$\n",
        "\n",
        "### First-order Model with Interactions in python \n",
        "\n",
        "- Code below facilitates evaluations for pairs $(x_1, x_2)$\n",
        "- Responses may be observed over a mesh in the same double-unit square\n"
      ],
      "id": "83bb77c0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def fun_11(x1,x2):\n",
        "    return 50 + 8 * x1 + 3 * x2 - 4 * x1 * x2"
      ],
      "id": "e3782cb3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.cm as cm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "delta = 0.025\n",
        "x1 = np.arange(-2.0, 2.0, delta)\n",
        "x2 = np.arange(-2.0, 2.0, delta)\n",
        "X1, X2 = np.meshgrid(x1, x2)\n",
        "Y = fun_11(X1,X2)\n",
        "fig, ax = plt.subplots()\n",
        "CS = ax.contour(X1, X2, Y, 20)\n",
        "ax.clabel(CS, inline=True, fontsize=10)\n",
        "ax.set_title('First Order Model with Interactions')"
      ],
      "id": "f012e7e2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Observations: First-Order Model with Interactions\n",
        "\n",
        "- Mean response $\\eta$ is increasing marginally in both $x_1$ and $x_2$, or conditional on a fixed value of the other until\n",
        "$x_1$ is 0.75 \n",
        "- Rate of increase slows as both coordinates grow simultaneously since the coefficient in front of the interaction term\n",
        "$x_1 x_2$ is negative \n",
        "- Compared to the first-order model (without interactions): surface is far more useful locally\n",
        "- Least squares regressions often flag up significant interactions when fit to data collected on a design far from local optima\n",
        "\n",
        "\n",
        "\n",
        "## Second-Order Models\n",
        "\n",
        "- Second-order model may be appropriate near local optima where $f$ would have substantial curvature:\n",
        "$$\\eta = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2  + \\beta_{11}x_1^2 + \\beta_{22}x^2 + \\beta_{12} x_1 x_2$$\n",
        "- For example $$\\eta = 50 + 8 x_1 + 3x_2 - 7x_1^2 - 3 x_2^2 - 4x_1x_2$$\n",
        "\n",
        "* Implementation of the Second-Order Model as `fun_2()`. \n"
      ],
      "id": "45ebd50c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def fun_2(x1,x2):\n",
        "    return 50 + 8 * x1 + 3 * x2 - 7 * x1**2 - 3*x2**2 - 4 * x1 * x2"
      ],
      "id": "7b8f6380",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.cm as cm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "delta = 0.025\n",
        "x1 = np.arange(-2.0, 2.0, delta)\n",
        "x2 = np.arange(-2.0, 2.0, delta)\n",
        "X1, X2 = np.meshgrid(x1, x2)\n",
        "Y = fun_2(X1,X2)\n",
        "fig, ax = plt.subplots()\n",
        "CS = ax.contour(X1, X2, Y, 20)\n",
        "ax.clabel(CS, inline=True, fontsize=10)\n",
        "ax.set_title('Second Order Model with Interactions. Maximum near about $(0.6,0.2)$')"
      ],
      "id": "7f61c34c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Second-Order Models: Properties\n",
        "\n",
        "- Not all second-order models would have a single stationary point (in RSM jargon called \"a simple maximum\") \n",
        "- In \"yield maximizing\" setting we're presuming response surface is **concave** down from a global viewpoint\n",
        "  - even though local dynamics may be more nuanced\n",
        "- Exact criteria depend upon the eigenvalues of a certain matrix built from those coefficients\n",
        "- Box and Draper (2007) provide a diagram categorizing all of the kinds of second-order surfaces in RSM analysis, where finding local maxima is the goal\n",
        "\n",
        "\n",
        "### Example: Stationary Ridge \n",
        "\n",
        "- Example set of coefficients describing what's called a **stationary ridge** is provided by the code below\n"
      ],
      "id": "f8b4c701"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def fun_ridge(x1, x2):\n",
        "    return 80 + 4*x1 + 8*x2 - 3*x1**2 - 12*x2**2 - 12*x1*x2"
      ],
      "id": "f5eef52a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.cm as cm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "delta = 0.025\n",
        "x1 = np.arange(-2.0, 2.0, delta)\n",
        "x2 = np.arange(-2.0, 2.0, delta)\n",
        "X1, X2 = np.meshgrid(x1, x2)\n",
        "Y = fun_ridge(X1,X2)\n",
        "fig, ax = plt.subplots()\n",
        "CS = ax.contour(X1, X2, Y, 20)\n",
        "ax.clabel(CS, inline=True, fontsize=10)\n",
        "ax.set_title('Example of a stationary ridge')"
      ],
      "id": "05f39e51",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Observations: Second-Order Model (Ridge)\n",
        "\n",
        "- **Ridge**: a whole line of stationary points corresponding to maxima\n",
        "- Situation means that the practitioner has some flexibility when it comes to optimizing: \n",
        "  - can choose the precise setting of $(x_1, x_2)$ either arbitrarily or (more commonly) by\n",
        "consulting some tertiary criteria\n",
        "\n",
        "### Example: Rising Ridge\n",
        "\n",
        "- An example of a rising ridge is implemented by the code below.\n"
      ],
      "id": "3571012d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def fun_ridge_rise(x1, x2):\n",
        "     return 80 - 4*x1 + 12*x2 - 3*x1**2 - 12*x2**2 - 12*x1*x2"
      ],
      "id": "02e52a55",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.cm as cm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "delta = 0.025\n",
        "x1 = np.arange(-2.0, 2.0, delta)\n",
        "x2 = np.arange(-2.0, 2.0, delta)\n",
        "X1, X2 = np.meshgrid(x1, x2)\n",
        "Y = fun_ridge_rise(X1,X2)\n",
        "fig, ax = plt.subplots()\n",
        "CS = ax.contour(X1, X2, Y, 20)\n",
        "ax.clabel(CS, inline=True, fontsize=10)\n",
        "ax.set_title('Rising ridge: $\\\\eta = 80 + 4x_1 + 8x_2 - 3x_1^2 - 12x_2^2 - 12x_1x_2$')"
      ],
      "id": "802dd6e9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Summary: Rising Ridge\n",
        "\n",
        "- The stationary point is remote to the study region\n",
        "- Ccontinuum of (local) stationary points along any line going through the 2d space, excepting one that\n",
        "lies directly on the ridge\n",
        "- Although estimated response will increase while moving along the axis of symmetry toward its stationary point, this situation indicates \n",
        "  - either a poor fit by the approximating second-order function, or \n",
        "  - that the study region is not yet precisely in the vicinity of a local optima---often both. \n",
        "\n",
        "\n",
        "### Falling Ridge\n",
        "\n",
        "- Inversion of a rising ridge is a falling ridge\n",
        "- Similarly indicating one is far from local optima, except that the response decreases as you move toward the\n",
        "stationary point \n",
        "- Finding a falling ridge system can be a back-to-the-drawing-board affair.\n",
        "\n",
        "\n",
        "### Saddle Point\n",
        "\n",
        "- Finally, we can get what's called a saddle or minimax system. \n"
      ],
      "id": "79b2b2c8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def fun_saddle(x1, x2):\n",
        "    return 80 + 4*x1 + 8*x2 - 2*x2**2 - 12*x1*x2 "
      ],
      "id": "41cc3e66",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import matplotlib.cm as cm\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "delta = 0.025\n",
        "x1 = np.arange(-2.0, 2.0, delta)\n",
        "x2 = np.arange(-2.0, 2.0, delta)\n",
        "X1, X2 = np.meshgrid(x1, x2)\n",
        "Y = fun_saddle(X1,X2)\n",
        "fig, ax = plt.subplots()\n",
        "CS = ax.contour(X1, X2, Y, 20)\n",
        "ax.clabel(CS, inline=True, fontsize=10)\n",
        "ax.set_title('Saddle Point: $\\\\eta = 80 + 4x_1 + 8x_2 - 2x_2^2 - 12x_1x_2$')"
      ],
      "id": "1aa82d19",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Interpretation: Saddle Points\n",
        "\n",
        "- Likely further data collection, and/or outside expertise, is needed before determining a course of action in this situation \n",
        "\n",
        "### Summary: Ridge Analysis\n",
        "\n",
        "- Finding a simple maximum, or stationary ridge, represents ideals in the spectrum of second-order approximating functions\n",
        "- But getting there can be a bit of a slog\n",
        "- Using models fitted from data means uncertainty due to noise, and therefore uncertainty in the type of fitted second-order model\n",
        "- A ridge analysis attempts to offer a principled approach to navigating uncertainties when one is seeking local maxima\n",
        "- The two-dimensional setting exemplified above is convenient for visualization, but rare in practice\n",
        "- Complications compound when studying the effect of more than two process variables\n",
        "\n",
        "## General RSM Models\n",
        "\n",
        "- General **first-order model** on $m$ process variables $x_1, x_2, \\cdots, x_m$ is \n",
        "$$\\eta = \\beta_0 + \\beta_1x_1 + \\cdots + \\beta_m x_m$$ \n",
        "- General **second-order model** on $m$ process variables\n",
        "$$\n",
        "\\eta= \\beta_0 + \\sum_{j=1}^m + \\sum_{j=1}^m x_j^2 + \\sum_{j=2}^m \\sum_{k=1}^j \\beta_{kj}x_k x_j.\n",
        "$$\n",
        "\n",
        "### Ordinary Least Squares\n",
        "\n",
        "- Inference from data is carried out by **ordinary least squares** (OLS)\n",
        "- For an excellent review including R examples, see Sheather (2009)\n",
        "- OLS and maximum likelihood estimators (MLEs) are in the typical Gaussian linear modeling setup basically equivalent\n",
        "\n",
        "## Designs\n",
        "\n",
        "- Important: Organize the data collection phase of a response surface study carefully\n",
        "- **Design**: choice of $x$'s where we plan to observe  $y$'s, for the purpose of approximating $f$\n",
        "- Analyses and designs need to be carefully matched\n",
        "- When using a first-order model, some designs are preferred over others\n",
        "- When using a second-order model to capture curvature, a different sort of design is appropriate\n",
        "- Design choices often contain features enabling modeling assumptions to be challenged\n",
        "  - e.g., to check if initial impressions are supported by the data ultimately collected\n",
        "\n",
        "### Different Designs\n",
        "\n",
        "- **Screening desings**:  determine which variables matter so that subsequent experiments may be smaller and/or more focused\n",
        "- Then there are designs tailored to the form of model (first- or second-order, say) in the screened variables\n",
        "- And then there are more designs still\n",
        "\n",
        "## RSM Experimentation\n",
        "\n",
        "### First Step\n",
        "\n",
        "- RSM-based experimentation begins with a **first-order model**, possibly with interactions\n",
        "- Presumption: current process operating **far from optimal** conditions\n",
        "- Collect data and apply **method of steepest ascent** (gradient) on fitted surfaces to move to the optimum\n",
        "\n",
        "\n",
        "### Second Step\n",
        "\n",
        "- Eventually, if all goes well after several such carefully iterated refinements, **second-order models** are used on\n",
        "appropriate designs in order to zero-in on ideal operating conditions\n",
        "- Careful analysis of the fitted surface:\n",
        "  - Ridge analysis with further refinement using gradients of, and\n",
        "  - standard errors associated with, the fitted surfaces, and so on \n",
        " \n",
        "\n",
        "### Third Step \n",
        "\n",
        "- Once the practitioner is satisfied with the full arc of\n",
        "  - design(s), \n",
        "  - fit(s), and\n",
        "  - decision(s):\n",
        "- A small experiment called  **confirmation test** may be performed to check if the predicted optimal settings are \n",
        "realizable in practice\n",
        "\n",
        "\n",
        "## RSM: Review and General Considerations\n",
        "\n",
        "- First Glimpse, RSM seems sensible, and pretty straightforward as quantitative statistics-based analysis goes\n",
        "- But: RSM can get complicated, especially when input dimensions are not very low\n",
        "- Design considerations are particularly nuanced, since the goal is to obtain reliable estimates of\n",
        "main effects, interaction, and curvature while minimizing sampling effort/expense\n",
        "\n",
        "- RSM Downside: Inefficiency\n",
        "  - Despite intuitive appeal, several RSM downsides become apparent upon reflection\n",
        "  - Problems in practice \n",
        "  - Stepwise nature of sequential decision making is inefficient:\n",
        "    - Not obvious how to re-use or update analysis from earlier phases, or couple with data from other sources/related experiments\n",
        "\n",
        "- RSM Downside: Locality\n",
        "  - In addition to being local in experiment-time (stepwise approach),  it's local in experiment-space\n",
        "  - Balance between \n",
        "    - exploration (maybe we're barking up the wrong tree) and \n",
        "    - exploitation (let's make things a little better) is modest at best\n",
        "\n",
        "- RSM Downside: Expert Knowledge\n",
        "  - Interjection of expert knowledge is limited to hunches about relevant variables (i.e., the screening phase), where to initialize search, how to design the experiments \n",
        "  - Yet at the same time classical RSMs rely heavily on constant examination throughout stages of modeling and design\n",
        "  and on the instincts of seasoned practitioners\n",
        "\n",
        "- RSM Downside: Replicability\n",
        "  - Parallel analyses, conducted according to the same best intentions, rarely lead to the same designs, model fits and so on \n",
        "  - Sometimes that means they lead to different conclusions, which can be cause for concern\n",
        "\n",
        "### Historical Considerations about RSM\n",
        "\n",
        "- In spite of those criticisms, however, there was historically little impetus to revise the status quo\n",
        "- Classical RSM was comfortable in its skin, consistently led to improvements or compelling evidence that none\n",
        "can reasonably be expected\n",
        "- But then in the late 20th century came an explosive expansion in computational capability, and with it a means of\n",
        "addressing many of those downsides\n",
        "\n",
        "### Status Quo\n",
        "\n",
        "- Nowadays, field experiments and statistical models, designs and optimizations are coupled with  with mathematical models \n",
        "- Simple equations are not regarded as sufficient to describe real-world systems anymore\n",
        "- Physicists figured that out fifty years ago; industrial engineers followed, biologists, social scientists, climate scientists and weather forecasters, etc.\n",
        "- Systems of equations are required, solved over meshes (e.g., finite elements), or stochastically interacting agents \n",
        "- Goals for those simulation experiments are as diverse as their underlying dynamics\n",
        "- Optimization of systems is common, e.g., to identify worst-case scenarios\n",
        "\n",
        "### The Role of Statistics \n",
        "\n",
        "- Solving systems of equations, or interacting agents, requires computing\n",
        "- Statistics involved at various stages: \n",
        "  - choosing the mathematical model\n",
        "  - solving by stochastic simulation (Monte Carlo)\n",
        "  - designing the computer experiment\n",
        "  - smoothing over idiosyncrasies or noise\n",
        "  - finding optimal conditions, or \n",
        "  - calibrating mathematical/computer models to data from field experiments\n",
        "\n",
        "\n",
        "### New RSM is needed: DACE\n",
        "\n",
        "- Classical RSMs are not well-suited to any of those tasks, because\n",
        "  - they lack the fidelity required to model these data \n",
        "  - their intended application is too local\n",
        "  - they're also too hands-on. \n",
        "- Once computers are involved, a natural inclination is to automate---to remove humans from the loop and set the computer running on the analysis in order to maximize computing throughput, or minimize idle time\n",
        "- **Design and Analysis of Computer Experiments** as a modern extension of RSM\n",
        "- Experimentation is changing due to  advances in machine learning\n",
        "- **Gaussian process** (GP) regression is the canonical surrogate model\n",
        "- Origins in geostatistics (gold mining)\n",
        "- Wide applicability in contexts where prediction is king \n",
        "- Machine learners exposed GPs as powerful predictors for all sorts of tasks:\n",
        " - from regression to classification, \n",
        " - active learning/sequential design,\n",
        " - reinforcement learning and optimization, \n",
        " - latent variable modeling, and so on\n",
        "\n",
        "\n",
        "## Exercises\n",
        "\n",
        "1. Generate 3d Plots for the Contour Plots in this notebook.\n",
        "2. Write a `plot_3d` function, that takes the objective function `fun` as an argument.\n",
        "  * It should provide the following interface: `plot_3d(fun)`.\n",
        "3. Write a `plot_contour` function, that takes the objective function `fun` as an argument:\n",
        "  * It should provide the following interface: `plot_contour(fun)`.\n",
        "4. Consider further arguments that might be useful for both function, e.g., ranges, size, etc.\n",
        "\n",
        "\n",
        "\n",
        "## Jupyter Notebook\n",
        "\n",
        ":::{.callout-note}\n",
        "\n",
        "* The Jupyter-Notebook of this lecture is available on GitHub in the [Hyperparameter-Tuning-Cookbook Repository](https://github.com/sequential-parameter-optimization/Hyperparameter-Tuning-Cookbook/blob/main/005_num_rsm.ipynb)\n",
        "\n",
        ":::"
      ],
      "id": "321ba13f"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/homebrew/Caskroom/miniforge/base/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}