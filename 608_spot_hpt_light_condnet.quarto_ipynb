{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "14756202",
   "metadata": {},
   "source": [
    "---\n",
    "execute:\n",
    "  cache: false\n",
    "  eval: true\n",
    "  echo: true\n",
    "  warning: false\n",
    "title: Hyperparameter Tuning with `spotpython` and `PyTorch` Lightning Using a CondNet Model\n",
    "jupyter: python3\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "user-user-imports",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 608_user-user-imports\n",
    "#| echo: false\n",
    "import os\n",
    "from math import inf\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc80a8d5",
   "metadata": {},
   "source": [
    "* We use the `Diabetes` dataset to illustrate the hyperparameter tuning process of a `CondNet` model using the `spotpython` package.\n",
    "* The CondNet model is a conditional neural network that can be used to model conditional distributions [[LINK]](https://sequential-parameter-optimization.github.io/spotPython/reference/spotpython/light/regression/nn_condnet_regressor/).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cond_net_setup",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module_name: light\n",
      "submodule_name: regression\n",
      "model_name: NNCondNetRegressor\n",
      "| name           | type   | default   |   lower |   upper | transform             |\n",
      "|----------------|--------|-----------|---------|---------|-----------------------|\n",
      "| l1             | int    | 3         |     3   |   4     | transform_power_2_int |\n",
      "| epochs         | int    | 4         |     3   |   7     | transform_power_2_int |\n",
      "| batch_size     | int    | 4         |     4   |   5     | transform_power_2_int |\n",
      "| act_fn         | factor | ReLU      |     0   |   5     | None                  |\n",
      "| optimizer      | factor | SGD       |     0   |   2     | None                  |\n",
      "| dropout_prob   | float  | 0.01      |     0   |   0.025 | None                  |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |  20     | None                  |\n",
      "| patience       | int    | 2         |     2   |   3     | transform_power_2_int |\n",
      "| batch_norm     | factor | 0         |     0   |   1     | None                  |\n",
      "| initialization | factor | Default   |     0   |   4     | None                  |\n"
     ]
    }
   ],
   "source": [
    "#| label: 608_cond_net_setup\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "from spotpython.hyperdict.light_hyper_dict import LightHyperDict\n",
    "from spotpython.fun.hyperlight import HyperLight\n",
    "from spotpython.utils.init import (fun_control_init, surrogate_control_init, design_control_init)\n",
    "from spotpython.utils.eda import gen_design_table\n",
    "from spotpython.spot import spot\n",
    "from spotpython.utils.file import get_experiment_filename\n",
    "from math import inf\n",
    "from spotpython.hyperparameters.values import set_hyperparameter\n",
    "\n",
    "PREFIX=\"CondNet_01\"\n",
    "\n",
    "data_set = Diabetes()\n",
    "input_dim = 10\n",
    "output_dim = 1\n",
    "cond_dim = 2\n",
    "\n",
    "fun_control = fun_control_init(\n",
    "    PREFIX=PREFIX,\n",
    "    fun_evals=inf,\n",
    "    max_time=1,\n",
    "    data_set = data_set,\n",
    "    core_model_name=\"light.regression.NNCondNetRegressor\",\n",
    "    hyperdict=LightHyperDict,\n",
    "    _L_in=input_dim - cond_dim,\n",
    "    _L_out=1,\n",
    "    _L_cond=cond_dim,)\n",
    "\n",
    "fun = HyperLight().fun\n",
    "\n",
    "\n",
    "set_hyperparameter(fun_control, \"optimizer\", [ \"Adadelta\", \"Adam\", \"Adamax\"])\n",
    "set_hyperparameter(fun_control, \"l1\", [3,4])\n",
    "set_hyperparameter(fun_control, \"epochs\", [3,7])\n",
    "set_hyperparameter(fun_control, \"batch_size\", [4,5])\n",
    "set_hyperparameter(fun_control, \"dropout_prob\", [0.0, 0.025])\n",
    "set_hyperparameter(fun_control, \"patience\", [2,3])\n",
    "set_hyperparameter(fun_control, \"lr_mult\", [0.1, 20.0])\n",
    "\n",
    "design_control = design_control_init(init_size=10)\n",
    "\n",
    "print(gen_design_table(fun_control))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cond_net_run",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[32, 8], [32, 2]] | [32, 16] \n",
      "1 | layers     | Sequential       | 587    | train | [32, 16]           | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "779       Trainable params\n",
      "0         Non-trainable params\n",
      "779       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "26        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 153    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "249       Trainable params\n",
      "0         Non-trainable params\n",
      "249       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "18        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24158.83203125, 'hp_metric': 24158.83203125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[32, 8], [32, 2]] | [32, 16] \n",
      "1 | layers     | Sequential       | 691    | train | [32, 16]           | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "883       Trainable params\n",
      "0         Non-trainable params\n",
      "883       Total params\n",
      "0.004     Total estimated model params size (MB)\n",
      "36        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23447.546875, 'hp_metric': 23447.546875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[32, 8], [32, 2]] | [32, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [32, 8]            | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 7307.08984375, 'hp_metric': 7307.08984375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[16, 8], [16, 2]] | [16, 16] \n",
      "1 | layers     | Sequential       | 691    | train | [16, 16]           | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "883       Trainable params\n",
      "0         Non-trainable params\n",
      "883       Total params\n",
      "0.004     Total estimated model params size (MB)\n",
      "36        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23786.861328125, 'hp_metric': 23786.861328125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[16, 8], [16, 2]] | [16, 16] \n",
      "1 | layers     | Sequential       | 587    | train | [16, 16]           | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "779       Trainable params\n",
      "0         Non-trainable params\n",
      "779       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "26        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22770.90625, 'hp_metric': 22770.90625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[32, 8], [32, 2]] | [32, 8]  \n",
      "1 | layers     | Sequential       | 153    | train | [32, 8]            | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "249       Trainable params\n",
      "0         Non-trainable params\n",
      "249       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "18        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23846.84375, 'hp_metric': 23846.84375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23610.291015625, 'hp_metric': 23610.291015625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 153    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "249       Trainable params\n",
      "0         Non-trainable params\n",
      "249       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "18        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4652.201171875, 'hp_metric': 4652.201171875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[32, 8], [32, 2]] | [32, 16] \n",
      "1 | layers     | Sequential       | 691    | train | [32, 16]           | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "883       Trainable params\n",
      "0         Non-trainable params\n",
      "883       Total params\n",
      "0.004     Total estimated model params size (MB)\n",
      "36        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22452.896484375, 'hp_metric': 22452.896484375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22722.826171875, 'hp_metric': 22722.826171875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3839.544921875, 'hp_metric': 3839.544921875}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3839.544921875 [----------] 3.74% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4479.22265625, 'hp_metric': 4479.22265625}\n",
      "In update_writer().\n",
      "No spot_writer available.\n",
      "spotpython tuning: 3839.544921875 [#---------] 7.33% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3642.4208984375, 'hp_metric': 3642.4208984375}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3642.4208984375 [#---------] 13.35% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3912.334716796875, 'hp_metric': 3912.334716796875}\n",
      "In update_writer().\n",
      "No spot_writer available.\n",
      "spotpython tuning: 3642.4208984375 [##--------] 19.57% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 5815.0966796875, 'hp_metric': 5815.0966796875}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3642.4208984375 [##--------] 23.66% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 8211.8828125, 'hp_metric': 8211.8828125}\n",
      "In update_writer().\n",
      "No spot_writer available.\n",
      "spotpython tuning: 3642.4208984375 [######----] 57.15% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 6238.09716796875, 'hp_metric': 6238.09716796875}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3642.4208984375 [######----] 61.22% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 18082.51953125, 'hp_metric': 18082.51953125}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3642.4208984375 [#########-] 92.54% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4545.3212890625, 'hp_metric': 4545.3212890625}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3642.4208984375 [##########] 99.59% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 6086.51220703125, 'hp_metric': 6086.51220703125}\n",
      "In update_writer().\n",
      "No spot_writer available.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3642.4208984375 [##########] 100.00% Done...\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "#| label: 608_cond_net_run\n",
    "spot_tuner = spot.Spot(fun=fun,fun_control=fun_control, design_control=design_control)\n",
    "res = spot_tuner.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cbdf4f6",
   "metadata": {},
   "source": [
    "## Looking at the Results\n",
    "\n",
    "### Tuning Progress\n",
    "\n",
    "After the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized with `spotpython`'s method `plot_progress`. The black points represent the performace values (score or metric) of  hyperparameter configurations from the initial design, whereas the red points represents the  hyperparameter configurations found by the surrogate model based optimization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "97e8fc83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 2700x1800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_progress()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34f4695c",
   "metadata": {},
   "source": [
    "### Tuned Hyperparameters and Their Importance\n",
    "\n",
    "Results can be printed in tabular form.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "255b5f2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | tuned             | transform             |   importance | stars   |\n",
      "|----------------|--------|-----------|---------|---------|-------------------|-----------------------|--------------|---------|\n",
      "| l1             | int    | 3         |     3.0 |     4.0 | 3.0               | transform_power_2_int |         0.23 | .       |\n",
      "| epochs         | int    | 4         |     3.0 |     7.0 | 7.0               | transform_power_2_int |         2.42 | *       |\n",
      "| batch_size     | int    | 4         |     4.0 |     5.0 | 4.0               | transform_power_2_int |         6.14 | *       |\n",
      "| act_fn         | factor | ReLU      |     0.0 |     5.0 | Swish             | None                  |         0.06 |         |\n",
      "| optimizer      | factor | SGD       |     0.0 |     2.0 | Adadelta          | None                  |         0.02 |         |\n",
      "| dropout_prob   | float  | 0.01      |     0.0 |   0.025 | 0.025             | None                  |         0.01 |         |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |    20.0 | 7.238064006094006 | None                  |        11.35 | *       |\n",
      "| patience       | int    | 2         |     2.0 |     3.0 | 2.0               | transform_power_2_int |        32.03 | *       |\n",
      "| batch_norm     | factor | 0         |     0.0 |     1.0 | 1                 | None                  |       100.00 | ***     |\n",
      "| initialization | factor | Default   |     0.0 |     4.0 | kaiming_uniform   | None                  |         0.00 |         |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.utils.eda import gen_design_table\n",
    "print(gen_design_table(fun_control=fun_control, spot=spot_tuner))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5e165e2",
   "metadata": {},
   "source": [
    "A histogram can be used to visualize the most important hyperparameters.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "acad1fa8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 1650x1050 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_importance(threshold=1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9aad8076",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l1:  0.23245802662720985\n",
      "epochs:  2.422982746690775\n",
      "batch_size:  6.137227352565651\n",
      "act_fn:  0.05726140228501812\n",
      "optimizer:  0.016375544662219414\n",
      "dropout_prob:  0.010887476187303657\n",
      "lr_mult:  11.35277138039679\n",
      "patience:  32.027368518765655\n",
      "batch_norm:  100.0\n",
      "initialization:  0.004143925147813915\n"
     ]
    },
    {
     "data": {
      "application/pdf": "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eCBbIC0xMDIxIC00NjMgMTc5NCAxMjMzIF0gL0ZvbnRNYXRyaXggWyAwLjAwMSAwIDAgMC4wMDEgMCAwIF0KL0NoYXJQcm9jcyAxNiAwIFIKL0VuY29kaW5nIDw8IC9UeXBlIC9FbmNvZGluZwovRGlmZmVyZW5jZXMgWyAzMiAvc3BhY2UgNDMgL3BsdXMgNDYgL3BlcmlvZCA0OCAvemVybyAvb25lIC90d28gL3RocmVlIC9mb3VyIC9maXZlIC9zaXgKL3NldmVuIC9laWdodCAvbmluZSAvY29sb24gOTUgL3VuZGVyc2NvcmUgOTcgL2EgL2IgL2MgMTAxIC9lIDEwNCAvaCAvaSAxMDkKL20gL24gL28gL3AgMTE0IC9yIDExNiAvdCAxMjAgL3ggXQo+PgovV2lkdGhzIDEzIDAgUiA+PgplbmRvYmoKMTQgMCBvYmoKPDwgL1R5cGUgL0ZvbnREZXNjcmlwdG9yIC9Gb250TmFtZSAvQk1RUURWK0RlamFWdVNhbnMgL0ZsYWdzIDMyCi9Gb250QkJveCBbIC0xMDIxIC00NjMgMTc5NCAxMjMzIF0gL0FzY2VudCA5MjkgL0Rlc2NlbnQgLTIzNiAvQ2FwSGVpZ2h0IDAKL1hIZWlnaHQgMCAvSXRhbGljQW5nbGUgMCAvU3RlbVYgMCAvTWF4V2lkdGggMTM0MiA+PgplbmRvYmoKMTMgMCBvYmoKWyA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMAo2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDMxOCA0MDEgNDYwIDgzOCA2MzYKOTUwIDc4MCAyNzUgMzkwIDM5MCA1MDAgODM4IDMxOCAzNjEgMzE4IDMzNyA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2CjYzNiA2MzYgMzM3IDMzNyA4MzggODM4IDgzOCA1MzEgMTAwMCA2ODQgNjg2IDY5OCA3NzAgNjMyIDU3NSA3NzUgNzUyIDI5NQoyOTUgNjU2IDU1NyA4NjMgNzQ4IDc4NyA2MDMgNzg3IDY5NSA2MzUgNjExIDczMiA2ODQgOTg5IDY4NSA2MTEgNjg1IDM5MCAzMzcKMzkwIDgzOCA1MDAgNTAwIDYxMyA2MzUgNTUwIDYzNSA2MTUgMzUyIDYzNSA2MzQgMjc4IDI3OCA1NzkgMjc4IDk3NCA2MzQgNjEyCjYzNSA2MzUgNDExIDUyMSAzOTIgNjM0IDU5MiA4MTggNTkyIDU5MiA1MjUgNjM2IDMzNyA2MzYgODM4IDYwMCA2MzYgNjAwIDMxOAozNTIgNTE4IDEwMDAgNTAwIDUwMCA1MDAgMTM0MiA2MzUgNDAwIDEwNzAgNjAwIDY4NSA2MDAgNjAwIDMxOCAzMTggNTE4IDUxOAo1OTAgNTAwIDEwMDAgNTAwIDEwMDAgNTIxIDQwMCAxMDIzIDYwMCA1MjUgNjExIDMxOCA0MDEgNjM2IDYzNiA2MzYgNjM2IDMzNwo1MDAgNTAwIDEwMDAgNDcxIDYxMiA4MzggMzYxIDEwMDAgNTAwIDUwMCA4MzggNDAxIDQwMSA1MDAgNjM2IDYzNiAzMTggNTAwCjQwMSA0NzEgNjEyIDk2OSA5NjkgOTY5IDUzMSA2ODQgNjg0IDY4NCA2ODQgNjg0IDY4NCA5NzQgNjk4IDYzMiA2MzIgNjMyIDYzMgoyOTUgMjk1IDI5NSAyOTUgNzc1IDc0OCA3ODcgNzg3IDc4NyA3ODcgNzg3IDgzOCA3ODcgNzMyIDczMiA3MzIgNzMyIDYxMSA2MDUKNjMwIDYxMyA2MTMgNjEzIDYxMyA2MTMgNjEzIDk4MiA1NTAgNjE1IDYxNSA2MTUgNjE1IDI3OCAyNzggMjc4IDI3OCA2MTIgNjM0CjYxMiA2MTIgNjEyIDYxMiA2MTIgODM4IDYxMiA2MzQgNjM0IDYzNCA2MzQgNTkyIDYzNSA1OTIgXQplbmRvYmoKMTYgMCBvYmoKPDwgL2EgMTcgMCBSIC9iIDE4IDAgUiAvYyAxOSAwIFIgL2NvbG9uIDIwIDAgUiAvZSAyMSAwIFIgL2VpZ2h0IDIyIDAgUgovZml2ZSAyMyAwIFIgL2ZvdXIgMjQgMCBSIC9oIDI1IDAgUiAvaSAyNiAwIFIgL20gMjcgMCBSIC9uIDI4IDAgUgovbmluZSAyOSAwIFIgL28gMzAgMCBSIC9vbmUgMzEgMCBSIC9wIDMyIDAgUiAvcGVyaW9kIDMzIDAgUiAvcGx1cyAzNCAwIFIKL3IgMzUgMCBSIC9zZXZlbiAzNiAwIFIgL3NpeCAzNyAwIFIgL3NwYWNlIDM4IDAgUiAvdCAzOSAwIFIgL3RocmVlIDQwIDAgUgovdHdvIDQxIDAgUiAvdW5kZXJzY29yZSA0MiAwIFIgL3ggNDMgMCBSIC96ZXJvIDQ0IDAgUiA+PgplbmRvYmoKMyAwIG9iago8PCAvRjEgMTUgMCBSID4+CmVuZG9iago0IDAgb2JqCjw8IC9BMSA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAwIC9jYSAxID4+Ci9BMiA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAxIC9jYSAxID4+Ci9BMyA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAwLjUgL2NhIDAuNSA+PgovQTQgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMSAvY2EgMC45ID4+ID4+CmVuZG9iago1IDAgb2JqCjw8ID4+CmVuZG9iago2IDAgb2JqCjw8ID4+CmVuZG9iago3IDAgb2JqCjw8ID4+CmVuZG9iagoyIDAgb2JqCjw8IC9UeXBlIC9QYWdlcyAvS2lkcyBbIDExIDAgUiBdIC9Db3VudCAxID4+CmVuZG9iago0NSAwIG9iago8PCAvQ3JlYXRvciAoTWF0cGxvdGxpYiB2My45LjIsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcpCi9Qcm9kdWNlciAoTWF0cGxvdGxpYiBwZGYgYmFja2VuZCB2My45LjIpCi9DcmVhdGlvbkRhdGUgKEQ6MjAyNDExMjIwMjE1MjcrMDInMDAnKSA+PgplbmRvYmoKeHJlZgowIDQ2CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAxNiAwMDAwMCBuIAowMDAwMDM5MTMxIDAwMDAwIG4gCjAwMDAwMzg4NTMgMDAwMDAgbiAKMDAwMDAzODg4NSAwMDAwMCBuIAowMDAwMDM5MDY4IDAwMDAwIG4gCjAwMDAwMzkwODkgMDAwMDAgbiAKMDAwMDAzOTExMCAwMDAwMCBuIAowMDAwMDAwMDY1IDAwMDAwIG4gCjAwMDAwMDAzNDYgMDAwMDAgbiAKMDAwMDAyOTU1MCAwMDAwMCBuIAowMDAwMDAwMjA4IDAwMDAwIG4gCjAwMDAwMjk1MjggMDAwMDAgbiAKMDAwMDAzNzQ0MyAwMDAwMCBuIAowMDAwMDM3MjM2IDAwMDAwIG4gCjAwMDAwMzY3NDggMDAwMDAgbiAKMDAwMDAzODQ5NiAwMDAwMCBuIAowMDAwMDI5NTcwIDAwMDAwIG4gCjAwMDAwMjk5NTAgMDAwMDAgbiAKMDAwMDAzMDI2NyAwMDAwMCBuIAowMDAwMDMwNTcyIDAwMDAwIG4gCjAwMDAwMzA3MTcgMDAwMDAgbiAKMDAwMDAzMTAzOSAwMDAwMCBuIAowMDAwMDMxNTA3IDAwMDAwIG4gCjAwMDAwMzE4MjkgMDAwMDAgbiAKMDAwMDAzMTk5NSAwMDAwMCBuIAowMDAwMDMyMjMyIDAwMDAwIG4gCjAwMDAwMzIzNzYgMDAwMDAgbiAKMDAwMDAzMjcwNyAwMDAwMCBuIAowMDAwMDMyOTQzIDAwMDAwIG4gCjAwMDAwMzMzMzggMDAwMDAgbiAKMDAwMDAzMzYyOSAwMDAwMCBuIAowMDAwMDMzNzg0IDAwMDAwIG4gCjAwMDAwMzQwOTYgMDAwMDAgbiAKMDAwMDAzNDIxOSAwMDAwMCBuIAowMDAwMDM0MzcyIDAwMDAwIG4gCjAwMDAwMzQ2MDUgMDAwMDAgbiAKMDAwMDAzNDc0NyAwMDAwMCBuIAowMDAwMDM1MTQwIDAwMDAwIG4gCjAwMDAwMzUyMzAgMDAwMDAgbiAKMDAwMDAzNTQzNiAwMDAwMCBuIAowMDAwMDM1ODQ5IDAwMDAwIG4gCjAwMDAwMzYxNzMgMDAwMDAgbiAKMDAwMDAzNjI5OSAwMDAwMCBuIAowMDAwMDM2NDYwIDAwMDAwIG4gCjAwMDAwMzkxOTEgMDAwMDAgbiAKdHJhaWxlcgo8PCAvU2l6ZSA0NiAvUm9vdCAxIDAgUiAvSW5mbyA0NSAwIFIgPj4Kc3RhcnR4cmVmCjM5MzQ4CiUlRU9GCg==",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "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RFYrRGVqYVZ1U2FucyAvRmxhZ3MgMzIKL0ZvbnRCQm94IFsgLTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvQXNjZW50IDkyOSAvRGVzY2VudCAtMjM2IC9DYXBIZWlnaHQgMAovWEhlaWdodCAwIC9JdGFsaWNBbmdsZSAwIC9TdGVtViAwIC9NYXhXaWR0aCAxMzQyID4+CmVuZG9iagoxMyAwIG9iagpbIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwCjYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgMzE4IDQwMSA0NjAgODM4IDYzNgo5NTAgNzgwIDI3NSAzOTAgMzkwIDUwMCA4MzggMzE4IDM2MSAzMTggMzM3IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYKNjM2IDYzNiAzMzcgMzM3IDgzOCA4MzggODM4IDUzMSAxMDAwIDY4NCA2ODYgNjk4IDc3MCA2MzIgNTc1IDc3NSA3NTIgMjk1CjI5NSA2NTYgNTU3IDg2MyA3NDggNzg3IDYwMyA3ODcgNjk1IDYzNSA2MTEgNzMyIDY4NCA5ODkgNjg1IDYxMSA2ODUgMzkwIDMzNwozOTAgODM4IDUwMCA1MDAgNjEzIDYzNSA1NTAgNjM1IDYxNSAzNTIgNjM1IDYzNCAyNzggMjc4IDU3OSAyNzggOTc0IDYzNCA2MTIKNjM1IDYzNSA0MTEgNTIxIDM5MiA2MzQgNTkyIDgxOCA1OTIgNTkyIDUyNSA2MzYgMzM3IDYzNiA4MzggNjAwIDYzNiA2MDAgMzE4CjM1MiA1MTggMTAwMCA1MDAgNTAwIDUwMCAxMzQyIDYzNSA0MDAgMTA3MCA2MDAgNjg1IDYwMCA2MDAgMzE4IDMxOCA1MTggNTE4CjU5MCA1MDAgMTAwMCA1MDAgMTAwMCA1MjEgNDAwIDEwMjMgNjAwIDUyNSA2MTEgMzE4IDQwMSA2MzYgNjM2IDYzNiA2MzYgMzM3CjUwMCA1MDAgMTAwMCA0NzEgNjEyIDgzOCAzNjEgMTAwMCA1MDAgNTAwIDgzOCA0MDEgNDAxIDUwMCA2MzYgNjM2IDMxOCA1MDAKNDAxIDQ3MSA2MTIgOTY5IDk2OSA5NjkgNTMxIDY4NCA2ODQgNjg0IDY4NCA2ODQgNjg0IDk3NCA2OTggNjMyIDYzMiA2MzIgNjMyCjI5NSAyOTUgMjk1IDI5NSA3NzUgNzQ4IDc4NyA3ODcgNzg3IDc4NyA3ODcgODM4IDc4NyA3MzIgNzMyIDczMiA3MzIgNjExIDYwNQo2MzAgNjEzIDYxMyA2MTMgNjEzIDYxMyA2MTMgOTgyIDU1MCA2MTUgNjE1IDYxNSA2MTUgMjc4IDI3OCAyNzggMjc4IDYxMiA2MzQKNjEyIDYxMiA2MTIgNjEyIDYxMiA4MzggNjEyIDYzNCA2MzQgNjM0IDYzNCA1OTIgNjM1IDU5MiBdCmVuZG9iagoxNiAwIG9iago8PCAvYSAxNyAwIFIgL2IgMTggMCBSIC9jIDE5IDAgUiAvY29sb24gMjAgMCBSIC9laWdodCAyMSAwIFIgL2ZpdmUgMjIgMCBSCi9mb3VyIDIzIDAgUiAvaCAyNCAwIFIgL2wgMjUgMCBSIC9tIDI2IDAgUiAvbiAyNyAwIFIgL25pbmUgMjggMCBSIC9vIDI5IDAgUgovb25lIDMwIDAgUiAvcGVyaW9kIDMxIDAgUiAvciAzMiAwIFIgL3NldmVuIDMzIDAgUiAvc2l4IDM0IDAgUgovc3BhY2UgMzUgMCBSIC90IDM2IDAgUiAvdHdvIDM3IDAgUiAvdSAzOCAwIFIgL3VuZGVyc2NvcmUgMzkgMCBSIC94IDQwIDAgUgovemVybyA0MSAwIFIgPj4KZW5kb2JqCjMgMCBvYmoKPDwgL0YxIDE1IDAgUiA+PgplbmRvYmoKNCAwIG9iago8PCAvQTEgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMCAvY2EgMSA+PgovQTIgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMSAvY2EgMSA+PgovQTMgPDwgL1R5cGUgL0V4dEdTdGF0ZSAvQ0EgMC41IC9jYSAwLjUgPj4KL0E0IDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDEgL2NhIDAuOSA+PiA+PgplbmRvYmoKNSAwIG9iago8PCA+PgplbmRvYmoKNiAwIG9iago8PCA+PgplbmRvYmoKNyAwIG9iago8PCA+PgplbmRvYmoKMiAwIG9iago8PCAvVHlwZSAvUGFnZXMgL0tpZHMgWyAxMSAwIFIgXSAvQ291bnQgMSA+PgplbmRvYmoKNDIgMCBvYmoKPDwgL0NyZWF0b3IgKE1hdHBsb3RsaWIgdjMuOS4yLCBodHRwczovL21hdHBsb3RsaWIub3JnKQovUHJvZHVjZXIgKE1hdHBsb3RsaWIgcGRmIGJhY2tlbmQgdjMuOS4yKQovQ3JlYXRpb25EYXRlIChEOjIwMjQxMTIyMDIxNTI3KzAyJzAwJykgPj4KZW5kb2JqCnhyZWYKMCA0MwowMDAwMDAwMDAwIDY1NTM1IGYgCjAwMDAwMDAwMTYgMDAwMDAgbiAKMDAwMDAzODcwOSAwMDAwMCBuIAowMDAwMDM4NDMxIDAwMDAwIG4gCjAwMDAwMzg0NjMgMDAwMDAgbiAKMDAwMDAzODY0NiAwMDAwMCBuIAowMDAwMDM4NjY3IDAwMDAwIG4gCjAwMDAwMzg2ODggMDAwMDAgbiAKMDAwMDAwMDA2NSAwMDAwMCBuIAowMDAwMDAwMzQ4IDAwMDAwIG4gCjAwMDAwMzAxNjMgMDAwMDAgbiAKMDAwMDAwMDIwOCAwMDAwMCBuIAowMDAwMDMwMTQxIDAwMDAwIG4gCjAwMDAwMzcwNTggMDAwMDAgbiAKMDAwMDAzNjg1MSAwMDAwMCBuIAowMDAwMDM2MzgzIDAwMDAwIG4gCjAwMDAwMzgxMTEgMDAwMDAgbiAKMDAwMDAzMDE4MyAwMDAwMCBuIAowMDAwMDMwNTYzIDAwMDAwIG4gCjAwMDAwMzA4ODAgMDAwMDAgbiAKMDAwMDAzMTE4NSAwMDAwMCBuIAowMDAwMDMxMzMwIDAwMDAwIG4gCjAwMDAwMzE3OTggMDAwMDAgbiAKMDAwMDAzMjEyMCAwMDAwMCBuIAowMDAwMDMyMjg2IDAwMDAwIG4gCjAwMDAwMzI1MjMgMDAwMDAgbiAKMDAwMDAzMjY0MiAwMDAwMCBuIAowMDAwMDMyOTczIDAwMDAwIG4gCjAwMDAwMzMyMDkgMDAwMDAgbiAKMDAwMDAzMzYwNCAwMDAwMCBuIAowMDAwMDMzODk1IDAwMDAwIG4gCjAwMDAwMzQwNTAgMDAwMDAgbiAKMDAwMDAzNDE3MyAwMDAwMCBuIAowMDAwMDM0NDA2IDAwMDAwIG4gCjAwMDAwMzQ1NDggMDAwMDAgbiAKMDAwMDAzNDk0MSAwMDAwMCBuIAowMDAwMDM1MDMxIDAwMDAwIG4gCjAwMDAwMzUyMzcgMDAwMDAgbiAKMDAwMDAzNTU2MSAwMDAwMCBuIAowMDAwMDM1ODA4IDAwMDAwIG4gCjAwMDAwMzU5MzQgMDAwMDAgbiAKMDAwMDAzNjA5NSAwMDAwMCBuIAowMDAwMDM4NzY5IDAwMDAwIG4gCnRyYWlsZXIKPDwgL1NpemUgNDMgL1Jvb3QgMSAwIFIgL0luZm8gNDIgMCBSID4+CnN0YXJ0eHJlZgozODkyNgolJUVPRgo=",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_important_hyperparameter_contour(max_imp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e4c131c",
   "metadata": {},
   "source": [
    "### Get the Tuned Architecture {#sec-get-spot-results-608}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1e46d1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'act_fn': Swish(),\n",
      " 'batch_norm': True,\n",
      " 'batch_size': 16,\n",
      " 'dropout_prob': 0.025,\n",
      " 'epochs': 128,\n",
      " 'initialization': 'kaiming_uniform',\n",
      " 'l1': 8,\n",
      " 'lr_mult': 7.238064006094006,\n",
      " 'optimizer': 'Adadelta',\n",
      " 'patience': 4}\n"
     ]
    }
   ],
   "source": [
    "import pprint\n",
    "from spotpython.hyperparameters.values import get_tuned_architecture\n",
    "config = get_tuned_architecture(spot_tuner, fun_control)\n",
    "pprint.pprint(config)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/bartz/miniforge3/envs/spot312/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
