{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3fd2020e",
   "metadata": {},
   "source": [
    "---\n",
    "execute:\n",
    "  cache: false\n",
    "  eval: true\n",
    "  echo: true\n",
    "  warning: false\n",
    "title: Hyperparameter Tuning with `spotpython` and `PyTorch` Lightning Using a CondNet Model\n",
    "jupyter: python3\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "user-user-imports",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| label: 608_user-user-imports\n",
    "#| echo: false\n",
    "import os\n",
    "from math import inf\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e6e992b",
   "metadata": {},
   "source": [
    "* We use the `Diabetes` dataset to illustrate the hyperparameter tuning process of a `CondNet` model using the `spotpython` package.\n",
    "* The CondNet model is a conditional neural network that can be used to model conditional distributions [[LINK]](https://sequential-parameter-optimization.github.io/spotPython/reference/spotpython/light/regression/nn_condnet_regressor/).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "cond_net_setup",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Seed set to 123\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "module_name: light\n",
      "submodule_name: regression\n",
      "model_name: NNCondNetRegressor\n",
      "| name           | type   | default   |   lower |   upper | transform             |\n",
      "|----------------|--------|-----------|---------|---------|-----------------------|\n",
      "| l1             | int    | 3         |     3   |   4     | transform_power_2_int |\n",
      "| epochs         | int    | 4         |     3   |   7     | transform_power_2_int |\n",
      "| batch_size     | int    | 4         |     4   |   5     | transform_power_2_int |\n",
      "| act_fn         | factor | ReLU      |     0   |   5     | None                  |\n",
      "| optimizer      | factor | SGD       |     0   |   2     | None                  |\n",
      "| dropout_prob   | float  | 0.01      |     0   |   0.025 | None                  |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |  20     | None                  |\n",
      "| patience       | int    | 2         |     2   |   3     | transform_power_2_int |\n",
      "| batch_norm     | factor | 0         |     0   |   1     | None                  |\n",
      "| initialization | factor | Default   |     0   |   4     | None                  |\n"
     ]
    }
   ],
   "source": [
    "#| label: 608_cond_net_setup\n",
    "from spotpython.data.diabetes import Diabetes\n",
    "from spotpython.hyperdict.light_hyper_dict import LightHyperDict\n",
    "from spotpython.fun.hyperlight import HyperLight\n",
    "from spotpython.utils.init import (fun_control_init, surrogate_control_init, design_control_init)\n",
    "from spotpython.utils.eda import gen_design_table\n",
    "from spotpython.spot import spot\n",
    "from spotpython.utils.file import get_experiment_filename\n",
    "from math import inf\n",
    "from spotpython.hyperparameters.values import set_hyperparameter\n",
    "\n",
    "PREFIX=\"CondNet_01\"\n",
    "\n",
    "data_set = Diabetes()\n",
    "input_dim = 10\n",
    "output_dim = 1\n",
    "cond_dim = 2\n",
    "\n",
    "fun_control = fun_control_init(\n",
    "    PREFIX=PREFIX,\n",
    "    fun_evals=inf,\n",
    "    max_time=1,\n",
    "    data_set = data_set,\n",
    "    core_model_name=\"light.regression.NNCondNetRegressor\",\n",
    "    hyperdict=LightHyperDict,\n",
    "    _L_in=input_dim - cond_dim,\n",
    "    _L_out=1,\n",
    "    _L_cond=cond_dim,)\n",
    "\n",
    "fun = HyperLight().fun\n",
    "\n",
    "\n",
    "set_hyperparameter(fun_control, \"optimizer\", [ \"Adadelta\", \"Adam\", \"Adamax\"])\n",
    "set_hyperparameter(fun_control, \"l1\", [3,4])\n",
    "set_hyperparameter(fun_control, \"epochs\", [3,7])\n",
    "set_hyperparameter(fun_control, \"batch_size\", [4,5])\n",
    "set_hyperparameter(fun_control, \"dropout_prob\", [0.0, 0.025])\n",
    "set_hyperparameter(fun_control, \"patience\", [2,3])\n",
    "set_hyperparameter(fun_control, \"lr_mult\", [0.1, 20.0])\n",
    "\n",
    "design_control = design_control_init(init_size=10)\n",
    "\n",
    "print(gen_design_table(fun_control))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cond_net_run",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[32, 8], [32, 2]] | [32, 16] \n",
      "1 | layers     | Sequential       | 587    | train | [32, 16]           | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "779       Trainable params\n",
      "0         Non-trainable params\n",
      "779       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "26        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 153    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "249       Trainable params\n",
      "0         Non-trainable params\n",
      "249       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "18        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 24158.83203125, 'hp_metric': 24158.83203125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[32, 8], [32, 2]] | [32, 16] \n",
      "1 | layers     | Sequential       | 691    | train | [32, 16]           | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "883       Trainable params\n",
      "0         Non-trainable params\n",
      "883       Total params\n",
      "0.004     Total estimated model params size (MB)\n",
      "36        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23447.546875, 'hp_metric': 23447.546875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[32, 8], [32, 2]] | [32, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [32, 8]            | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 6569.1787109375, 'hp_metric': 6569.1787109375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[16, 8], [16, 2]] | [16, 16] \n",
      "1 | layers     | Sequential       | 691    | train | [16, 16]           | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "883       Trainable params\n",
      "0         Non-trainable params\n",
      "883       Total params\n",
      "0.004     Total estimated model params size (MB)\n",
      "36        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23786.861328125, 'hp_metric': 23786.861328125}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[16, 8], [16, 2]] | [16, 16] \n",
      "1 | layers     | Sequential       | 587    | train | [16, 16]           | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "779       Trainable params\n",
      "0         Non-trainable params\n",
      "779       Total params\n",
      "0.003     Total estimated model params size (MB)\n",
      "26        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22773.521484375, 'hp_metric': 22773.521484375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=16` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[32, 8], [32, 2]] | [32, 8]  \n",
      "1 | layers     | Sequential       | 153    | train | [32, 8]            | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "249       Trainable params\n",
      "0         Non-trainable params\n",
      "249       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "18        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23846.84375, 'hp_metric': 23846.84375}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=8` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 23610.291015625, 'hp_metric': 23610.291015625}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 153    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "249       Trainable params\n",
      "0         Non-trainable params\n",
      "249       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "18        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4810.67529296875, 'hp_metric': 4810.67529296875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=32` reached.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 192    | train | [[32, 8], [32, 2]] | [32, 16] \n",
      "1 | layers     | Sequential       | 691    | train | [32, 16]           | [32, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "883       Trainable params\n",
      "0         Non-trainable params\n",
      "883       Total params\n",
      "0.004     Total estimated model params size (MB)\n",
      "36        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22452.896484375, 'hp_metric': 22452.896484375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 22722.826171875, 'hp_metric': 22722.826171875}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3379.564208984375, 'hp_metric': 3379.564208984375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3379.564208984375 [#---------] 5.11% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3803.593505859375, 'hp_metric': 3803.593505859375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3379.564208984375 [#---------] 11.05% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 5639.869140625, 'hp_metric': 5639.869140625}\n",
      "spotpython tuning: 3379.564208984375 [##--------] 15.42% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4009.330078125, 'hp_metric': 4009.330078125}\n",
      "spotpython tuning: 3379.564208984375 [##--------] 22.92% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 16601.693359375, 'hp_metric': 16601.693359375}\n",
      "spotpython tuning: 3379.564208984375 [######----] 57.93% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3047.930419921875, 'hp_metric': 3047.930419921875}\n",
      "spotpython tuning: 3047.930419921875 [######----] 63.20% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 4295.61474609375, 'hp_metric': 4295.61474609375}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3047.930419921875 [#######---] 70.31% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 11891.98828125, 'hp_metric': 11891.98828125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3047.930419921875 [#######---] 74.29% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 3924.72998046875, 'hp_metric': 3924.72998046875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3047.930419921875 [########--] 81.06% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 8727.1064453125, 'hp_metric': 8727.1064453125}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3047.930419921875 [#########-] 86.37% \r\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "GPU available: True (mps), used: True\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "TPU available: False, using: 0 TPU cores\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "HPU available: False, using: 0 HPUs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "  | Name       | Type             | Params | Mode  | In sizes           | Out sizes\n",
      "-----------------------------------------------------------------------------------------\n",
      "0 | cond_layer | ConditionalLayer | 96     | train | [[16, 8], [16, 2]] | [16, 8]  \n",
      "1 | layers     | Sequential       | 197    | train | [16, 8]            | [16, 1]  \n",
      "-----------------------------------------------------------------------------------------\n",
      "293       Trainable params\n",
      "0         Non-trainable params\n",
      "293       Total params\n",
      "0.001     Total estimated model params size (MB)\n",
      "24        Modules in train mode\n",
      "0         Modules in eval mode\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "`Trainer.fit` stopped: `max_epochs=128` reached.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_model result: {'val_loss': 16402.748046875, 'hp_metric': 16402.748046875}\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spotpython tuning: 3047.930419921875 [##########] 100.00% Done...\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "#| label: 608_cond_net_run\n",
    "spot_tuner = spot.Spot(fun=fun,fun_control=fun_control, design_control=design_control)\n",
    "res = spot_tuner.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37160b98",
   "metadata": {},
   "source": [
    "## Looking at the Results\n",
    "\n",
    "### Tuning Progress\n",
    "\n",
    "After the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized with `spotpython`'s method `plot_progress`. The black points represent the performace values (score or metric) of  hyperparameter configurations from the initial design, whereas the red points represents the  hyperparameter configurations found by the surrogate model based optimization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2dd08213",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 2700x1800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_progress()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc0bd5f5",
   "metadata": {},
   "source": [
    "### Tuned Hyperparameters and Their Importance\n",
    "\n",
    "Results can be printed in tabular form.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "32357b5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| name           | type   | default   |   lower |   upper | tuned                | transform             |   importance | stars   |\n",
      "|----------------|--------|-----------|---------|---------|----------------------|-----------------------|--------------|---------|\n",
      "| l1             | int    | 3         |     3.0 |     4.0 | 3.0                  | transform_power_2_int |         0.00 |         |\n",
      "| epochs         | int    | 4         |     3.0 |     7.0 | 7.0                  | transform_power_2_int |         3.02 | *       |\n",
      "| batch_size     | int    | 4         |     4.0 |     5.0 | 4.0                  | transform_power_2_int |         0.30 | .       |\n",
      "| act_fn         | factor | ReLU      |     0.0 |     5.0 | Swish                | None                  |         1.06 | *       |\n",
      "| optimizer      | factor | SGD       |     0.0 |     2.0 | Adadelta             | None                  |         0.24 | .       |\n",
      "| dropout_prob   | float  | 0.01      |     0.0 |   0.025 | 0.004236068728145715 | None                  |       100.00 | ***     |\n",
      "| lr_mult        | float  | 1.0       |     0.1 |    20.0 | 10.582297113853155   | None                  |       100.00 | ***     |\n",
      "| patience       | int    | 2         |     2.0 |     3.0 | 2.0                  | transform_power_2_int |         0.28 | .       |\n",
      "| batch_norm     | factor | 0         |     0.0 |     1.0 | 1                    | None                  |        22.64 | *       |\n",
      "| initialization | factor | Default   |     0.0 |     4.0 | kaiming_uniform      | None                  |         0.12 | .       |\n"
     ]
    }
   ],
   "source": [
    "from spotpython.utils.eda import gen_design_table\n",
    "print(gen_design_table(fun_control=fun_control, spot=spot_tuner))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e173c2e",
   "metadata": {},
   "source": [
    "A histogram can be used to visualize the most important hyperparameters.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a6ac2044",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 1650x1050 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_importance(threshold=1.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bb8eb4fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "l1:  0.004568092840972744\n",
      "epochs:  3.021962572615784\n",
      "batch_size:  0.30285401247150195\n",
      "act_fn:  1.0574846457605795\n",
      "optimizer:  0.24483808085411457\n",
      "dropout_prob:  100.0\n",
      "lr_mult:  100.0\n",
      "patience:  0.28378007201636485\n",
      "batch_norm:  22.638476316831866\n",
      "initialization:  0.12213563142280552\n"
     ]
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/pdf": "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yxgJE0UiPPmOptUT61o00jIS1MYRrGoDvDv9ME4AABNxywJkn0qUs+TEb7H0swZX+v4Bn0dUlgplbmRzdHJlYW0KZW5kb2JqCjE1IDAgb2JqCjw8IC9UeXBlIC9Gb250IC9CYXNlRm9udCAvQk1RUURWK0RlamFWdVNhbnMgL0ZpcnN0Q2hhciAwIC9MYXN0Q2hhciAyNTUKL0ZvbnREZXNjcmlwdG9yIDE0IDAgUiAvU3VidHlwZSAvVHlwZTMgL05hbWUgL0JNUVFEVitEZWphVnVTYW5zCi9Gb250QkJveCBbIC0xMDIxIC00NjMgMTc5NCAxMjMzIF0gL0ZvbnRNYXRyaXggWyAwLjAwMSAwIDAgMC4wMDEgMCAwIF0KL0NoYXJQcm9jcyAxNiAwIFIKL0VuY29kaW5nIDw8IC9UeXBlIC9FbmNvZGluZwovRGlmZmVyZW5jZXMgWyAzMiAvc3BhY2UgNDYgL3BlcmlvZCA0OCAvemVybyAvb25lIC90d28gL3RocmVlIC9mb3VyIC9maXZlIC9zaXggL3NldmVuCi9laWdodCA1OCAvY29sb24gOTUgL3VuZGVyc2NvcmUgOTcgL2EgL2IgL2MgMTA0IC9oIDEwOCAvbCAvbSAvbiAvbyAxMTQgL3IKMTE2IC90IC91IDEyMCAveCBdCj4+Ci9XaWR0aHMgMTMgMCBSID4+CmVuZG9iagoxNCAwIG9iago8PCAvVHlwZSAvRm9udERlc2NyaXB0b3IgL0ZvbnROYW1lIC9CTVFRRFYrRGVqYVZ1U2FucyAvRmxhZ3MgMzIKL0ZvbnRCQm94IFsgLTEwMjEgLTQ2MyAxNzk0IDEyMzMgXSAvQXNjZW50IDkyOSAvRGVzY2VudCAtMjM2IC9DYXBIZWlnaHQgMAovWEhlaWdodCAwIC9JdGFsaWNBbmdsZSAwIC9TdGVtViAwIC9NYXhXaWR0aCAxMzQyID4+CmVuZG9iagoxMyAwIG9iagpbIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwCjYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgNjAwIDYwMCA2MDAgMzE4IDQwMSA0NjAgODM4IDYzNgo5NTAgNzgwIDI3NSAzOTAgMzkwIDUwMCA4MzggMzE4IDM2MSAzMTggMzM3IDYzNiA2MzYgNjM2IDYzNiA2MzYgNjM2IDYzNiA2MzYKNjM2IDYzNiAzMzcgMzM3IDgzOCA4MzggODM4IDUzMSAxMDAwIDY4NCA2ODYgNjk4IDc3MCA2MzIgNTc1IDc3NSA3NTIgMjk1CjI5NSA2NTYgNTU3IDg2MyA3NDggNzg3IDYwMyA3ODcgNjk1IDYzNSA2MTEgNzMyIDY4NCA5ODkgNjg1IDYxMSA2ODUgMzkwIDMzNwozOTAgODM4IDUwMCA1MDAgNjEzIDYzNSA1NTAgNjM1IDYxNSAzNTIgNjM1IDYzNCAyNzggMjc4IDU3OSAyNzggOTc0IDYzNCA2MTIKNjM1IDYzNSA0MTEgNTIxIDM5MiA2MzQgNTkyIDgxOCA1OTIgNTkyIDUyNSA2MzYgMzM3IDYzNiA4MzggNjAwIDYzNiA2MDAgMzE4CjM1MiA1MTggMTAwMCA1MDAgNTAwIDUwMCAxMzQyIDYzNSA0MDAgMTA3MCA2MDAgNjg1IDYwMCA2MDAgMzE4IDMxOCA1MTggNTE4CjU5MCA1MDAgMTAwMCA1MDAgMTAwMCA1MjEgNDAwIDEwMjMgNjAwIDUyNSA2MTEgMzE4IDQwMSA2MzYgNjM2IDYzNiA2MzYgMzM3CjUwMCA1MDAgMTAwMCA0NzEgNjEyIDgzOCAzNjEgMTAwMCA1MDAgNTAwIDgzOCA0MDEgNDAxIDUwMCA2MzYgNjM2IDMxOCA1MDAKNDAxIDQ3MSA2MTIgOTY5IDk2OSA5NjkgNTMxIDY4NCA2ODQgNjg0IDY4NCA2ODQgNjg0IDk3NCA2OTggNjMyIDYzMiA2MzIgNjMyCjI5NSAyOTUgMjk1IDI5NSA3NzUgNzQ4IDc4NyA3ODcgNzg3IDc4NyA3ODcgODM4IDc4NyA3MzIgNzMyIDczMiA3MzIgNjExIDYwNQo2MzAgNjEzIDYxMyA2MTMgNjEzIDYxMyA2MTMgOTgyIDU1MCA2MTUgNjE1IDYxNSA2MTUgMjc4IDI3OCAyNzggMjc4IDYxMiA2MzQKNjEyIDYxMiA2MTIgNjEyIDYxMiA4MzggNjEyIDYzNCA2MzQgNjM0IDYzNCA1OTIgNjM1IDU5MiBdCmVuZG9iagoxNiAwIG9iago8PCAvYSAxNyAwIFIgL2IgMTggMCBSIC9jIDE5IDAgUiAvY29sb24gMjAgMCBSIC9laWdodCAyMSAwIFIgL2ZpdmUgMjIgMCBSCi9mb3VyIDIzIDAgUiAvaCAyNCAwIFIgL2wgMjUgMCBSIC9tIDI2IDAgUiAvbiAyNyAwIFIgL28gMjggMCBSIC9vbmUgMjkgMCBSCi9wZXJpb2QgMzAgMCBSIC9yIDMxIDAgUiAvc2V2ZW4gMzIgMCBSIC9zaXggMzMgMCBSIC9zcGFjZSAzNCAwIFIgL3QgMzUgMCBSCi90aHJlZSAzNiAwIFIgL3R3byAzNyAwIFIgL3UgMzggMCBSIC91bmRlcnNjb3JlIDM5IDAgUiAveCA0MCAwIFIKL3plcm8gNDEgMCBSID4+CmVuZG9iagozIDAgb2JqCjw8IC9GMSAxNSAwIFIgPj4KZW5kb2JqCjQgMCBvYmoKPDwgL0ExIDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDAgL2NhIDEgPj4KL0EyIDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDEgL2NhIDEgPj4KL0EzIDw8IC9UeXBlIC9FeHRHU3RhdGUgL0NBIDAuNSAvY2EgMC41ID4+Ci9BNCA8PCAvVHlwZSAvRXh0R1N0YXRlIC9DQSAxIC9jYSAwLjkgPj4gPj4KZW5kb2JqCjUgMCBvYmoKPDwgPj4KZW5kb2JqCjYgMCBvYmoKPDwgPj4KZW5kb2JqCjcgMCBvYmoKPDwgPj4KZW5kb2JqCjIgMCBvYmoKPDwgL1R5cGUgL1BhZ2VzIC9LaWRzIFsgMTEgMCBSIF0gL0NvdW50IDEgPj4KZW5kb2JqCjQyIDAgb2JqCjw8IC9DcmVhdG9yIChNYXRwbG90bGliIHYzLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZykKL1Byb2R1Y2VyIChNYXRwbG90bGliIHBkZiBiYWNrZW5kIHYzLjkuMikKL0NyZWF0aW9uRGF0ZSAoRDoyMDI0MTExNzEwNTMwMCswMicwMCcpID4+CmVuZG9iagp4cmVmCjAgNDMKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDE2IDAwMDAwIG4gCjAwMDAwNDAyMDEgMDAwMDAgbiAKMDAwMDAzOTkyMyAwMDAwMCBuIAowMDAwMDM5OTU1IDAwMDAwIG4gCjAwMDAwNDAxMzggMDAwMDAgbiAKMDAwMDA0MDE1OSAwMDAwMCBuIAowMDAwMDQwMTgwIDAwMDAwIG4gCjAwMDAwMDAwNjUgMDAwMDAgbiAKMDAwMDAwMDM0NyAwMDAwMCBuIAowMDAwMDMxNjM1IDAwMDAwIG4gCjAwMDAwMDAyMDggMDAwMDAgbiAKMDAwMDAzMTYxMyAwMDAwMCBuIAowMDAwMDM4NTQ5IDAwMDAwIG4gCjAwMDAwMzgzNDIgMDAwMDAgbiAKMDAwMDAzNzg3MyAwMDAwMCBuIAowMDAwMDM5NjAyIDAwMDAwIG4gCjAwMDAwMzE2NTUgMDAwMDAgbiAKMDAwMDAzMjAzNSAwMDAwMCBuIAowMDAwMDMyMzUyIDAwMDAwIG4gCjAwMDAwMzI2NTcgMDAwMDAgbiAKMDAwMDAzMjgwMiAwMDAwMCBuIAowMDAwMDMzMjcwIDAwMDAwIG4gCjAwMDAwMzM1OTIgMDAwMDAgbiAKMDAwMDAzMzc1OCAwMDAwMCBuIAowMDAwMDMzOTk1IDAwMDAwIG4gCjAwMDAwMzQxMTQgMDAwMDAgbiAKMDAwMDAzNDQ0NSAwMDAwMCBuIAowMDAwMDM0NjgxIDAwMDAwIG4gCjAwMDAwMzQ5NzIgMDAwMDAgbiAKMDAwMDAzNTEyNyAwMDAwMCBuIAowMDAwMDM1MjUwIDAwMDAwIG4gCjAwMDAwMzU0ODMgMDAwMDAgbiAKMDAwMDAzNTYyNSAwMDAwMCBuIAowMDAwMDM2MDE4IDAwMDAwIG4gCjAwMDAwMzYxMDggMDAwMDAgbiAKMDAwMDAzNjMxNCAwMDAwMCBuIAowMDAwMDM2NzI3IDAwMDAwIG4gCjAwMDAwMzcwNTEgMDAwMDAgbiAKMDAwMDAzNzI5OCAwMDAwMCBuIAowMDAwMDM3NDI0IDAwMDAwIG4gCjAwMDAwMzc1ODUgMDAwMDAgbiAKMDAwMDA0MDI2MSAwMDAwMCBuIAp0cmFpbGVyCjw8IC9TaXplIDQzIC9Sb290IDEgMCBSIC9JbmZvIDQyIDAgUiA+PgpzdGFydHhyZWYKNDA0MTgKJSVFT0YK",
      "text/plain": [
       "<Figure size 3600x1800 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "spot_tuner.plot_important_hyperparameter_contour(max_imp=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38aa2284",
   "metadata": {},
   "source": [
    "### Get the Tuned Architecture {#sec-get-spot-results-608}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b5527311",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'act_fn': Swish(),\n",
      " 'batch_norm': True,\n",
      " 'batch_size': 16,\n",
      " 'dropout_prob': 0.004236068728145715,\n",
      " 'epochs': 128,\n",
      " 'initialization': 'kaiming_uniform',\n",
      " 'l1': 8,\n",
      " 'lr_mult': 10.582297113853155,\n",
      " 'optimizer': 'Adadelta',\n",
      " 'patience': 4}\n"
     ]
    }
   ],
   "source": [
    "import pprint\n",
    "from spotpython.hyperparameters.values import get_tuned_architecture\n",
    "config = get_tuned_architecture(spot_tuner, fun_control)\n",
    "pprint.pprint(config)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3",
   "path": "/Users/bartz/miniforge3/envs/spot312/share/jupyter/kernels/python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
