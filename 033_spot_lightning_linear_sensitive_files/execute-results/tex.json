{
  "hash": "4d6e3361b04dd99a023847dfc689680d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nexecute:\n  cache: false\n  eval: true\n  echo: true\n  warning: false\ntitle: 'HPT PyTorch Lightning: User Specified Data Set and Regression Model'\n---\n\nIn this tutorial, we will show how `spotPython` can be integrated into the `PyTorch` Lightning\ntraining workflow for a regression task with a user specified data set and a user specified regression model.\n\nThis chapter describes the hyperparameter tuning of a `PyTorch Lightning` network on a user data set, which can be found in the subfolder of this notebook, `userData`.\nThe network can be found in the subfolder `userModel`.\n\n## Step 1: Setup {#sec-setup-33}\n\n* Before we consider the detailed experimental setup, we select the parameters that affect run time, initial design size, etc. \n* The parameter `MAX_TIME` specifies the maximum run time in seconds.\n* The parameter `INIT_SIZE` specifies the initial design size.\n* The parameter `WORKERS` specifies the number of workers. \n* The prefix `PREFIX` is used for the experiment name and the name of the log file.\n* The parameter `DEVICE` specifies the device to use for training.\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=1}\n``` {.python .cell-code}\nfrom spotPython.utils.device import getDevice\nfrom math import inf\n\nMAX_TIME = 1\nFUN_EVALS = inf\nFUN_REPEATS = 1\nOCBA_DELTA = 0\nREPEATS = 1\nINIT_SIZE = 3\nWORKERS = 0\nPREFIX=\"033\"\nDEVICE = getDevice()\nDEVICES = 1\nTEST_SIZE = 0.3\n```\n:::\n\n\n::: {.callout-caution}\n### Caution: Run time and initial design size should be increased for real experiments\n\n* `MAX_TIME` is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\n* `INIT_SIZE` is set to a small value for demonstration purposes. For real experiments, this should be increased to at least 10.\n* `WORKERS` is set to 0 for demonstration purposes. For real experiments, this should be increased. See the warnings that are printed when the number of workers is set to 0.\n\n:::\n\n::: {.callout-note}\n### Note: Device selection\n\n* Although there are no .cuda() or .to(device) calls required, because Lightning does these for you, see \n[LIGHTNINGMODULE](https://lightning.ai/docs/pytorch/stable/common/lightning_module.html), we would like to know which device is used. Threrefore, we imitate the LightningModule behaviour which selects the highest device. \n* The method `spotPython.utils.device.getDevice()` returns the device that is used by Lightning.\n:::\n\n\n## Step 2: Initialization of the `fun_control` Dictionary\n\n`spotPython` uses a Python dictionary for storing the information required for the hyperparameter tuning process.\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=2}\n``` {.python .cell-code}\nfrom spotPython.utils.init import fun_control_init\nimport numpy as np\nfun_control = fun_control_init(\n    _L_in=6,\n    _L_out=1,\n    PREFIX=PREFIX,\n    TENSORBOARD_CLEAN=True,\n    device=DEVICE,\n    enable_progress_bar=False,\n    fun_evals=FUN_EVALS,\n    fun_repeats=FUN_REPEATS,\n    log_level=50,\n    max_time=MAX_TIME,\n    num_workers=WORKERS,\n    ocba_delta = OCBA_DELTA,\n    show_progress=True,\n    test_size=TEST_SIZE,\n    tolerance_x=np.sqrt(np.spacing(1)),\n    verbosity=1,\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMoving TENSORBOARD_PATH: runs/ to TENSORBOARD_PATH_OLD: runs_OLD/runs_2024_02_27_03_28_02\nCreated spot_tensorboard_path: runs/spot_logs/033_p040025_2024-02-27_03-28-02 for SummaryWriter()\n```\n:::\n:::\n\n\n## Step 3: Loading the User Specified Data Set\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=3}\n``` {.python .cell-code}\n# from spotPython.hyperparameters.values import set_control_key_value\n# from spotPython.data.pkldataset import PKLDataset\n# import torch\n# dataset = PKLDataset(directory=\"./userData/\",\n#                      filename=\"data_sensitive.pkl\",\n#                      target_column='N',\n#                      feature_type=torch.float32,\n#                      target_type=torch.float32,\n#                      rmNA=True)\n# set_control_key_value(control_dict=fun_control,\n#                         key=\"data_set\",\n#                         value=dataset,\n#                         replace=True)\n# print(len(dataset))\n```\n:::\n\n\n::: {.callout-note}\n### Note: Data Set and Data Loader\n\n* As shown below, a DataLoader from `torch.utils.data` can be used to check the data.\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=4}\n``` {.python .cell-code}\n# if the package pyhcf is installed then print \"pyhcf is installed\" else print \"pyhcf is not installed\"\ntry:\n    import pyhcf\n    print(\"pyhcf is installed\")\n    from pyhcf.data.loadHcfData import load_hcf_data\n    dataset = load_hcf_data(A=True, H=True,\n                        param_list=['H', 'D', 'L', 'K', 'E', 'I', 'N'],\n                        target='N', rmNA=True, rmMF=True, scale_data=True, return_X_y=False)\nexcept ImportError:\n    print(\"pyhcf is not installed\")\n    from spotPython.data.pkldataset import PKLDataset\n    import torch\n    dataset = PKLDataset(directory=\"./userData/\",\n                        filename=\"data_sensitive.pkl\",\n                        target_column='N',\n                        feature_type=torch.float32,\n                        target_type=torch.float32,\n                        rmNA=True)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npyhcf is installed\nLoading data for ['H', 'D', 'L', 'K', 'E', 'I', 'N']...\n```\n:::\n:::\n\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=5}\n``` {.python .cell-code}\nfrom spotPython.hyperparameters.values import set_control_key_value\nset_control_key_value(control_dict=fun_control,\n                        key=\"data_set\",\n                        value=dataset,\n                        replace=True)\nprint(len(dataset))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n41837\n```\n:::\n:::\n\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=6}\n``` {.python .cell-code}\n# Set batch size for DataLoader\nbatch_size = 5\n# Create DataLoader\nfrom torch.utils.data import DataLoader\ndataloader = DataLoader(dataset, batch_size=batch_size, shuffle=False)\n \n# Iterate over the data in the DataLoader\nfor batch in dataloader:\n    inputs, targets = batch\n    print(f\"Batch Size: {inputs.size(0)}\")\n    print(f\"Inputs Shape: {inputs.shape}\")\n    print(f\"Targets Shape: {targets.shape}\")\n    print(\"---------------\")\n    print(f\"Inputs: {inputs}\")\n    print(f\"Targets: {targets}\")\n    break\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBatch Size: 5\nInputs Shape: torch.Size([5, 6])\nTargets Shape: torch.Size([5])\n---------------\nInputs: tensor([[0.0033, 0.4000, 0.0000, 0.7500, 1.0000, 0.1667],\n        [0.0246, 0.4000, 0.0435, 0.7500, 1.0000, 0.1667],\n        [0.0275, 0.4000, 0.0435, 0.7500, 1.0000, 0.1667],\n        [0.0285, 0.4000, 0.0435, 0.7500, 1.0000, 0.1667],\n        [0.0285, 0.4000, 0.0435, 0.7500, 1.0000, 0.1667]])\nTargets: tensor([4.5764, 4.9073, 6.2846, 5.5094, 5.6079])\n```\n:::\n:::\n\n\n:::\n## Step 4: Preprocessing {#sec-preprocessing-33}\n\nPreprocessing is handled by `Lightning` and `PyTorch`. It is described in the [LIGHTNINGDATAMODULE](https://lightning.ai/docs/pytorch/stable/data/datamodule.html) documentation. Here you can find information about the `transforms` methods.\n\n## Step 5: Select the Core Model (`algorithm`) and `core_model_hyper_dict` {#sec-selection-of-the-algorithm-33}\n\n`spotPython` includes the `NetLightRegression` class [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/light/netlightregression.py) for configurable neural networks. \nThe class is imported here. It inherits from the class `Lightning.LightningModule`, which is the base class for all models in `Lightning`. `Lightning.LightningModule` is a subclass of `torch.nn.Module` and provides additional functionality for the training and testing of neural networks. The class `Lightning.LightningModule` is described in the [Lightning documentation](https://lightning.ai/docs/pytorch/stable/common/lightning_module.html).\n\n* Here we simply add the NN Model to the fun_control dictionary by calling the function `add_core_model_to_fun_control`:\n\nWe can use aconfiguration from the `spotPython` package:\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=7}\n``` {.python .cell-code}\nfrom spotPython.light.regression.netlightregression import NetLightRegression\nfrom spotPython.hyperdict.light_hyper_dict import LightHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nadd_core_model_to_fun_control(fun_control=fun_control,\n                              core_model=NetLightRegression,\n                              hyper_dict=LightHyperDict)\n```\n:::\n\n\n* Alternatively, we can use a userr configuration from the subdirectory `userModel`:\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=8}\n``` {.python .cell-code}\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nimport sys\nsys.path.insert(0, './userModel')\nimport netlightregression\nimport light_hyper_dict\nadd_core_model_to_fun_control(fun_control=fun_control,\n                              core_model=netlightregression.NetLightRegression,\n                              hyper_dict=light_hyper_dict.LightHyperDict)\n```\n:::\n\n\nThe hyperparameters of the model are specified in the `core_model_hyper_dict` dictionary [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/hyperdict/light_hyper_dict.json).\n\n\n\n## Step 6: Modify `hyper_dict` Hyperparameters for the Selected Algorithm aka `core_model` {#sec-modification-of-hyperparameters-33}\n\n `spotPython` provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code. \n\n::: {.callout-caution}\n### Caution: Small number of epochs for demonstration purposes\n\n* `epochs` and `patience` are set to small values for demonstration purposes. These values are too small for a real application.\n* More resonable values are, e.g.:\n  * `set_control_hyperparameter_value(fun_control, \"epochs\", [7, 9])` and\n  * `set_control_hyperparameter_value(fun_control, \"patience\", [2, 7])`\n\n:::\n\n::: {.callout-note}\n#### Note: Pre-experimental Results\n\n* The following hyperparameters {@tbl-pre-experimental-results-33} have generated acceptable results (obtained in in pre-experimental runs):\n\n| Hyperparameter | Value |\n|----------------|-------|\n| `act_fn` | `LeakyReLU` |\n| `batch_size` | `16` |\n| `dropout_prob` | `0.01` |\n| `epochs` | `512` |\n| `initialization` | `Default` |\n| `l1` | `128` |\n| `lr_mult` | `0.5` |\n| `optimizer` | `Adagrad` |\n| `patience` | `16` |\n\n: Table 1: Pre-experimental results for the user specified data set. The test set size is 715, the train set size is 1167, and the batch size is 16. {#tbl-pre-experimental-results-33}\n\nTherefore, we will use these values as the starting poing for the hyperparameter tuning.\n\n:::\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=9}\n``` {.python .cell-code}\nfrom spotPython.hyperparameters.values import set_control_hyperparameter_value\n\nset_control_hyperparameter_value(fun_control, \"l1\", [3, 4])\nset_control_hyperparameter_value(fun_control, \"epochs\", [2, 4])\nset_control_hyperparameter_value(fun_control, \"batch_size\", [3, 6])\nset_control_hyperparameter_value(fun_control, \"optimizer\", [\n                \"Adadelta\",\n                \"Adamax\",\n                \"Adagrad\"\n            ])\nset_control_hyperparameter_value(fun_control, \"dropout_prob\", [0.005, 0.25])\nset_control_hyperparameter_value(fun_control, \"lr_mult\", [0.25, 5.0])\nset_control_hyperparameter_value(fun_control, \"patience\", [2, 3])\nset_control_hyperparameter_value(fun_control, \"act_fn\",[\n                \"ReLU\",\n                \"LeakyReLU\",\n            ] )\nset_control_hyperparameter_value(fun_control, \"initialization\",[\"Default\"] )\n```\n:::\n\n\nNow, the dictionary `fun_control` contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method `gen_design_table` [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/utils/eda.py) generates a design table as follows:\n\n::: {.cell fig-label='tbl-design-33' vscode='{\"languageId\":\"python\"}' execution_count=10}\n``` {.python .cell-code}\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n| name           | type   | default   |   lower |   upper | transform             |\n|----------------|--------|-----------|---------|---------|-----------------------|\n| l1             | int    | 3         |   3     |    4    | transform_power_2_int |\n| epochs         | int    | 4         |   2     |    4    | transform_power_2_int |\n| batch_size     | int    | 4         |   3     |    6    | transform_power_2_int |\n| act_fn         | factor | ReLU      |   0     |    1    | None                  |\n| optimizer      | factor | SGD       |   0     |    2    | None                  |\n| dropout_prob   | float  | 0.01      |   0.005 |    0.25 | None                  |\n| lr_mult        | float  | 1.0       |   0.25  |    5    | None                  |\n| patience       | int    | 2         |   2     |    3    | transform_power_2_int |\n| initialization | factor | Default   |   0     |    0    | None                  |\n```\n:::\n:::\n\n\nThis allows to check if all information is available and if the information is correct.\n\n::: {.callout-note}\n### Note: Hyperparameters of the Tuned Model and the `fun_control` Dictionary\nThe updated `fun_control` dictionary can be shown with the command `fun_control[\"core_model_hyper_dict\"]`.\n:::\n\n\n## Step 7: Data Splitting, the Objective (Loss) Function and the Metric\n\n### Evaluation  {#sec-selection-of-target-function-33}\n\nThe evaluation procedure requires the specification of two elements:\n\n1. the way how the data is split into a train and a test set\n2. the loss function (and a metric).\n\n::: {.callout-caution}\n### Caution: Data Splitting in Lightning\n\nThe data splitting is handled by `Lightning`.\n\n:::\n\n### Loss Function {#sec-loss-function-33}\n\nThe loss function is specified in the configurable network class [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/light/regression/netlightregression.py)\nWe will use MSE.\n\n### Metric {#sec-metric-33}\n\n* Similar to the loss function, the metric is specified in the configurable network class [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/light/regression/netlightregression.py).\n\n::: {.callout-caution}\n### Caution: Loss Function and Metric in Lightning\n\n* The loss function and the metric are not hyperparameters that can be tuned with `spotPython`.\n* They are handled by `Lightning`.\n\n:::\n\n\n## Step 8: Calling the SPOT Function\n\n### Preparing the SPOT Call {#sec-prepare-spot-call-33}\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=11}\n``` {.python .cell-code}\nfrom spotPython.utils.init import design_control_init, surrogate_control_init\ndesign_control = design_control_init(init_size=INIT_SIZE,\n                                     repeats=REPEATS,)\n\nsurrogate_control = surrogate_control_init(noise=True,\n                                            n_theta=2,\n                                            min_Lambda=1e-6,\n                                            max_Lambda=10,\n                                            log_level=50,)\n```\n:::\n\n\n::: {.callout-note}\n### Note: Modifying Values in the Control Dictionaries \n\n* The values in the control dictionaries can be modified with the function `set_control_key_value` [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/hyperparameters/values.py), for example:\n\n\n\n\n\n```{raw}\nset_control_key_value(control_dict=surrogate_control,\n                        key=\"noise\",\n                        value=True,\n                        replace=True)                       \nset_control_key_value(control_dict=surrogate_control,\n                        key=\"n_theta\",\n                        value=2,\n                        replace=True)      \n\n```\n\n\n\n\n:::\n\n### The Objective Function `fun` {#sec-the-objective-function-33}\n\nThe objective function `fun` from the class `HyperLight` [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/fun/hyperlight.py) is selected next. It implements an interface from `PyTorch`'s training, validation, and testing methods to `spotPython`.\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=12}\n``` {.python .cell-code}\nfrom spotPython.fun.hyperlight import HyperLight\nfun = HyperLight(log_level=50).fun\n```\n:::\n\n\n### Showing the fun_control Dictionary {#sec-show-fun-control-33}\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=13}\n``` {.python .cell-code}\nimport pprint\npprint.pprint(fun_control)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'CHECKPOINT_PATH': 'runs/saved_models/',\n 'DATASET_PATH': 'data/',\n 'PREFIX': '033',\n 'RESULTS_PATH': 'results/',\n 'TENSORBOARD_PATH': 'runs/',\n '_L_in': 6,\n '_L_out': 1,\n 'accelerator': 'auto',\n 'converters': None,\n 'core_model': <class 'netlightregression.NetLightRegression'>,\n 'core_model_hyper_dict': {'act_fn': {'class_name': 'spotPython.torch.activation',\n                                      'core_model_parameter_type': 'instance()',\n                                      'default': 'ReLU',\n                                      'levels': ['ReLU', 'LeakyReLU'],\n                                      'lower': 0,\n                                      'transform': 'None',\n                                      'type': 'factor',\n                                      'upper': 1},\n                           'batch_size': {'default': 4,\n                                          'lower': 3,\n                                          'transform': 'transform_power_2_int',\n                                          'type': 'int',\n                                          'upper': 6},\n                           'dropout_prob': {'default': 0.01,\n                                            'lower': 0.005,\n                                            'transform': 'None',\n                                            'type': 'float',\n                                            'upper': 0.25},\n                           'epochs': {'default': 4,\n                                      'lower': 2,\n                                      'transform': 'transform_power_2_int',\n                                      'type': 'int',\n                                      'upper': 4},\n                           'initialization': {'core_model_parameter_type': 'str',\n                                              'default': 'Default',\n                                              'levels': ['Default'],\n                                              'lower': 0,\n                                              'transform': 'None',\n                                              'type': 'factor',\n                                              'upper': 0},\n                           'l1': {'default': 3,\n                                  'lower': 3,\n                                  'transform': 'transform_power_2_int',\n                                  'type': 'int',\n                                  'upper': 4},\n                           'lr_mult': {'default': 1.0,\n                                       'lower': 0.25,\n                                       'transform': 'None',\n                                       'type': 'float',\n                                       'upper': 5.0},\n                           'optimizer': {'class_name': 'torch.optim',\n                                         'core_model_parameter_type': 'str',\n                                         'default': 'SGD',\n                                         'levels': ['Adadelta',\n                                                    'Adamax',\n                                                    'Adagrad'],\n                                         'lower': 0,\n                                         'transform': 'None',\n                                         'type': 'factor',\n                                         'upper': 2},\n                           'patience': {'default': 2,\n                                        'lower': 2,\n                                        'transform': 'transform_power_2_int',\n                                        'type': 'int',\n                                        'upper': 3}},\n 'counter': 0,\n 'data': None,\n 'data_dir': './data',\n 'data_module': None,\n 'data_set': <torch.utils.data.dataset.TensorDataset object at 0x2c77f3a90>,\n 'design': None,\n 'device': 'mps',\n 'devices': 1,\n 'enable_progress_bar': False,\n 'eval': None,\n 'fun_evals': inf,\n 'fun_repeats': 1,\n 'horizon': None,\n 'infill_criterion': 'y',\n 'k_folds': 3,\n 'log_graph': False,\n 'log_level': 50,\n 'loss_function': None,\n 'lower': array([3. , 4. , 1. , 0. , 0. , 0. , 0.1, 2. , 0. ]),\n 'max_time': 1,\n 'metric_params': {},\n 'metric_river': None,\n 'metric_sklearn': None,\n 'metric_torch': None,\n 'model_dict': {},\n 'n_points': 1,\n 'n_samples': None,\n 'noise': False,\n 'num_workers': 0,\n 'ocba_delta': 0,\n 'oml_grace_period': None,\n 'optimizer': None,\n 'path': None,\n 'prep_model': None,\n 'save_model': False,\n 'seed': 123,\n 'show_batch_interval': 1000000,\n 'show_models': False,\n 'show_progress': True,\n 'shuffle': None,\n 'sigma': 0.0,\n 'spot_tensorboard_path': 'runs/spot_logs/033_p040025_2024-02-27_03-28-02',\n 'spot_writer': <torch.utils.tensorboard.writer.SummaryWriter object at 0x2a8f77310>,\n 'target_column': None,\n 'task': None,\n 'test': None,\n 'test_seed': 1234,\n 'test_size': 0.3,\n 'tolerance_x': 1.4901161193847656e-08,\n 'train': None,\n 'upper': array([ 8.  ,  9.  ,  4.  ,  5.  , 11.  ,  0.25, 10.  ,  6.  ,  2.  ]),\n 'var_name': ['l1',\n              'epochs',\n              'batch_size',\n              'act_fn',\n              'optimizer',\n              'dropout_prob',\n              'lr_mult',\n              'patience',\n              'initialization'],\n 'var_type': ['int',\n              'int',\n              'int',\n              'factor',\n              'factor',\n              'float',\n              'float',\n              'int',\n              'factor'],\n 'verbosity': 1,\n 'weight_coeff': 0.0,\n 'weights': 1.0}\n```\n:::\n:::\n\n\n### Starting the Hyperparameter Tuning {#sec-call-the-hyperparameter-tuner-33}\n\nThe `spotPython` hyperparameter tuning is started by calling the `Spot` function [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/spot/spot.py).\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=14}\n``` {.python .cell-code}\nfrom spotPython.spot import spot\nspot_tuner = spot.Spot(fun=fun,\n                       fun_control=fun_control,\n                       design_control=design_control,\n                       surrogate_control=surrogate_control)\nspot_tuner.run()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nIn fun(): config:\n{'act_fn': LeakyReLU(),\n 'batch_size': 16,\n 'dropout_prob': 0.020345615289778483,\n 'epochs': 8,\n 'initialization': 'Default',\n 'l1': 16,\n 'lr_mult': 3.5380370864571606,\n 'optimizer': 'Adamax',\n 'patience': 8}\nLightDataModule: setup(). stage: None\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: setup(). stage: test\nLightDataModule: setup(). stage: predict\ntrain_model(): Test set size: 12552\ntrain_model(): Train set size: 20501\ntrain_model(): Batch size: 16\nLightDataModule: setup(). stage: TrainerFn.FITTING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: val_dataloader(). Training set size: 8785\nLightDataModule: val_dataloader(). batch_size: 16\nLightDataModule: val_dataloader(). num_workers: 0\nLightDataModule: train_dataloader(). Training set size: 20501\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\nLightDataModule: setup(). stage: TrainerFn.VALIDATING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: val_dataloader(). Training set size: 8785\nLightDataModule: val_dataloader(). batch_size: 16\nLightDataModule: val_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 27.36409568786621, 'hp_metric': 27.36409568786621}\n\nIn fun(): config:\n{'act_fn': ReLU(),\n 'batch_size': 16,\n 'dropout_prob': 0.23254269132436722,\n 'epochs': 4,\n 'initialization': 'Default',\n 'l1': 8,\n 'lr_mult': 0.6593438339617097,\n 'optimizer': 'Adadelta',\n 'patience': 4}\nLightDataModule: setup(). stage: None\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: setup(). stage: test\nLightDataModule: setup(). stage: predict\ntrain_model(): Test set size: 12552\ntrain_model(): Train set size: 20501\ntrain_model(): Batch size: 16\nLightDataModule: setup(). stage: TrainerFn.FITTING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: val_dataloader(). Training set size: 8785\nLightDataModule: val_dataloader(). batch_size: 16\nLightDataModule: val_dataloader(). num_workers: 0\nLightDataModule: train_dataloader(). Training set size: 20501\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\nLightDataModule: setup(). stage: TrainerFn.VALIDATING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: val_dataloader(). Training set size: 8785\nLightDataModule: val_dataloader(). batch_size: 16\nLightDataModule: val_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 29.57465171813965, 'hp_metric': 29.57465171813965}\n\nIn fun(): config:\n{'act_fn': LeakyReLU(),\n 'batch_size': 32,\n 'dropout_prob': 0.15478450721867254,\n 'epochs': 16,\n 'initialization': 'Default',\n 'l1': 8,\n 'lr_mult': 2.628500799878493,\n 'optimizer': 'Adagrad',\n 'patience': 8}\nLightDataModule: setup(). stage: None\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: setup(). stage: test\nLightDataModule: setup(). stage: predict\ntrain_model(): Test set size: 12552\ntrain_model(): Train set size: 20501\ntrain_model(): Batch size: 32\nLightDataModule: setup(). stage: TrainerFn.FITTING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: val_dataloader(). Training set size: 8785\nLightDataModule: val_dataloader(). batch_size: 32\nLightDataModule: val_dataloader(). num_workers: 0\nLightDataModule: train_dataloader(). Training set size: 20501\nLightDataModule: train_dataloader(). batch_size: 32\nLightDataModule: train_dataloader(). num_workers: 0\nLightDataModule: setup(). stage: TrainerFn.VALIDATING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: val_dataloader(). Training set size: 8785\nLightDataModule: val_dataloader(). batch_size: 32\nLightDataModule: val_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 29.49106788635254, 'hp_metric': 29.49106788635254}\n\nIn fun(): config:\n{'act_fn': LeakyReLU(),\n 'batch_size': 16,\n 'dropout_prob': 0.019641823176285617,\n 'epochs': 8,\n 'initialization': 'Default',\n 'l1': 16,\n 'lr_mult': 3.537067177180294,\n 'optimizer': 'Adamax',\n 'patience': 8}\nLightDataModule: setup(). stage: None\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: setup(). stage: test\nLightDataModule: setup(). stage: predict\ntrain_model(): Test set size: 12552\ntrain_model(): Train set size: 20501\ntrain_model(): Batch size: 16\nLightDataModule: setup(). stage: TrainerFn.FITTING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: val_dataloader(). Training set size: 8785\nLightDataModule: val_dataloader(). batch_size: 16\nLightDataModule: val_dataloader(). num_workers: 0\nLightDataModule: train_dataloader(). Training set size: 20501\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\nLightDataModule: setup(). stage: TrainerFn.VALIDATING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: val_dataloader(). Training set size: 8785\nLightDataModule: val_dataloader(). batch_size: 16\nLightDataModule: val_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 26.50702667236328, 'hp_metric': 26.50702667236328}\nspotPython tuning: 26.50702667236328 [##########] 100.00% Done...\r\n\r\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     27.36409568786621     │\n│         val_loss          │     27.36409568786621     │\n└───────────────────────────┴───────────────────────────┘\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     29.57465171813965     │\n│         val_loss          │     29.57465171813965     │\n└───────────────────────────┴───────────────────────────┘\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     29.49106788635254     │\n│         val_loss          │     29.49106788635254     │\n└───────────────────────────┴───────────────────────────┘\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     26.50702667236328     │\n│         val_loss          │     26.50702667236328     │\n└───────────────────────────┴───────────────────────────┘\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<spotPython.spot.spot.Spot at 0x2dc92f590>\n```\n:::\n:::\n\n\n## Step 9: Tensorboard {#sec-tensorboard-33}\n\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard.\n\n\n\n\n\n```{raw}\ntensorboard --logdir=\"runs/\"\n```\n\n\n\n\n\nFurther information can be found in the [PyTorch Lightning documentation](https://lightning.ai/docs/pytorch/stable/api/lightning.pytorch.loggers.tensorboard.html) for Tensorboard.\n\n\n\n## Step 10: Results {#sec-results-33}\n\nAfter the hyperparameter tuning run is finished, the results can be analyzed.\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=15}\n``` {.python .cell-code}\nif spot_tuner.noise:\n    print(spot_tuner.min_mean_X)\n    print(spot_tuner.min_mean_y)\nelse:\n    print(spot_tuner.min_X)\n    print(spot_tuner.min_y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[4.         3.         4.         1.         1.         0.01964182\n 3.53706718 3.        ]\n26.50702667236328\n```\n:::\n:::\n\n\n::: {.cell fig-label='fig-progress-33' vscode='{\"languageId\":\"python\"}' execution_count=16}\n``` {.python .cell-code}\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + PREFIX +\"_progress.png\")\n```\n\n::: {.cell-output .cell-output-display}\n![Progress plot. *Black* dots denote results from the initial design. *Red* dots  illustrate the improvement found by the surrogate model based optimization.](033_spot_lightning_linear_sensitive_files/figure-pdf/cell-17-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell fig-label='tbl-results-33' vscode='{\"languageId\":\"python\"}' execution_count=17}\n``` {.python .cell-code}\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n| name           | type   | default   |   lower |   upper | tuned                | transform             |   importance | stars   |\n|----------------|--------|-----------|---------|---------|----------------------|-----------------------|--------------|---------|\n| l1             | int    | 3         |     3.0 |     4.0 | 4.0                  | transform_power_2_int |       100.00 | ***     |\n| epochs         | int    | 4         |     2.0 |     4.0 | 3.0                  | transform_power_2_int |         0.00 |         |\n| batch_size     | int    | 4         |     3.0 |     6.0 | 4.0                  | transform_power_2_int |         0.00 |         |\n| act_fn         | factor | ReLU      |     0.0 |     1.0 | LeakyReLU            | None                  |         0.05 |         |\n| optimizer      | factor | SGD       |     0.0 |     2.0 | Adamax               | None                  |         0.04 |         |\n| dropout_prob   | float  | 0.01      |   0.005 |    0.25 | 0.019641823176285617 | None                  |         0.01 |         |\n| lr_mult        | float  | 1.0       |    0.25 |     5.0 | 3.537067177180294    | None                  |         0.00 |         |\n| patience       | int    | 2         |     2.0 |     3.0 | 3.0                  | transform_power_2_int |         0.00 |         |\n| initialization | factor | Default   |     0.0 |     0.0 | Default              | None                  |         0.00 |         |\n```\n:::\n:::\n\n\n::: {.cell fig-label='fig-importance-33' vscode='{\"languageId\":\"python\"}' execution_count=18}\n``` {.python .cell-code}\nspot_tuner.plot_importance(threshold=0.025,\n    filename=\"./figures/\" + PREFIX + \"_importance.png\")\n```\n\n::: {.cell-output .cell-output-display}\n![Variable importance plot, threshold 0.025.](033_spot_lightning_linear_sensitive_files/figure-pdf/cell-19-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n### Get the Tuned Architecture {#sec-get-spot-results-33}\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=19}\n``` {.python .cell-code}\nfrom spotPython.hyperparameters.values import get_tuned_architecture\nconfig = get_tuned_architecture(spot_tuner, fun_control)\nprint(config)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'l1': 16, 'epochs': 8, 'batch_size': 16, 'act_fn': LeakyReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.019641823176285617, 'lr_mult': 3.537067177180294, 'patience': 8, 'initialization': 'Default'}\n```\n:::\n:::\n\n\n* Test on the full data set\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=20}\n``` {.python .cell-code}\nfrom spotPython.light.testmodel import test_model\ntest_model(config, fun_control)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLightDataModule: setup(). stage: None\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: setup(). stage: test\nLightDataModule: setup(). stage: predict\nLightDataModule: setup(). stage: TrainerFn.FITTING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: fit\nLightDataModule: val_dataloader(). Training set size: 8785\nLightDataModule: val_dataloader(). batch_size: 16\nLightDataModule: val_dataloader(). num_workers: 0\nLightDataModule: train_dataloader(). Training set size: 20501\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\nLightDataModule: setup(). stage: TrainerFn.TESTING\nLightDataModule setup(): full_train_size: 0.7\nLightDataModule setup(): val_size: 0.21\nLightDataModule setup(): train_size: 0.49\nLightDataModule setup(): test_size: 0.3\nLightDataModule: setup(). stage: test\nLightDataModule: test_dataloader(). Test set size: 12552\nLightDataModule: test_dataloader(). batch_size: 16\nLightDataModule: test_dataloader(). num_workers: 0\ntest_model result: {'val_loss': 25.852802276611328, 'hp_metric': 25.852802276611328}\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃        Test metric        ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    25.852802276611328     │\n│         val_loss          │    25.852802276611328     │\n└───────────────────────────┴───────────────────────────┘\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n(25.852802276611328, 25.852802276611328)\n```\n:::\n:::\n\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=21}\n``` {.python .cell-code}\nfrom spotPython.light.loadmodel import load_light_from_checkpoint\n\nmodel_loaded = load_light_from_checkpoint(config, fun_control)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nconfig: {'l1': 16, 'epochs': 8, 'batch_size': 16, 'act_fn': LeakyReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.019641823176285617, 'lr_mult': 3.537067177180294, 'patience': 8, 'initialization': 'Default'}\nLoading model with 16_8_16_LeakyReLU_Adamax_0.0196_3.5371_8_Default_TEST from runs/saved_models/16_8_16_LeakyReLU_Adamax_0.0196_3.5371_8_Default_TEST/last.ckpt\nModel: NetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=6, out_features=16, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.019641823176285617, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.019641823176285617, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.019641823176285617, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.019641823176285617, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n```\n:::\n:::\n\n\n::: {.cell fig-label='fig-contour-33' vscode='{\"languageId\":\"python\"}' execution_count=22}\n``` {.python .cell-code}\nfilename = \"./figures/\" + PREFIX\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nl1:  100.0\nact_fn:  0.05127949950884306\noptimizer:  0.036389675225087334\nimpo: [['l1', 100.0], ['epochs', 0.0014423222599760528], ['batch_size', 0.0014423222599760528], ['act_fn', 0.05127949950884306], ['optimizer', 0.036389675225087334], ['dropout_prob', 0.00872039378947158], ['lr_mult', 0.0014423222599760528], ['patience', 0.0014423222599760528]]\nimpo after select: [['l1', 100.0], ['epochs', 0.0014423222599760528], ['batch_size', 0.0014423222599760528], ['act_fn', 0.05127949950884306], ['optimizer', 0.036389675225087334], ['dropout_prob', 0.00872039378947158], ['lr_mult', 0.0014423222599760528], ['patience', 0.0014423222599760528]]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![Contour plots.](033_spot_lightning_linear_sensitive_files/figure-pdf/cell-23-output-2.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](033_spot_lightning_linear_sensitive_files/figure-pdf/cell-23-output-3.pdf){fig-pos='H'}\n:::\n\n::: {.cell-output .cell-output-display}\n![](033_spot_lightning_linear_sensitive_files/figure-pdf/cell-23-output-4.pdf){fig-pos='H'}\n:::\n:::\n\n\n### Parallel Coordinates Plot\n\n::: {.cell fig-label='fig-parallel-33' vscode='{\"languageId\":\"python\"}' execution_count=23}\n``` {.python .cell-code}\nspot_tuner.parallel_plot()\n```\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n\nParallel coordinates plots\n:::\n\n::: {.cell-output .cell-output-display}\n```\nUnable to display output for mime type(s): text/html\n```\n:::\n:::\n\n\n### Cross Validation With Lightning\n\n* The `KFold` class from `sklearn.model_selection` is used to generate the folds for cross-validation.\n* These mechanism is used to generate the folds for the final evaluation of the model.\n* The `CrossValidationDataModule` class [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/data/lightcrossvalidationdatamodule.py) is used to generate the folds for the hyperparameter tuning process.\n* It is called from the `cv_model` function [[SOURCE]](https://github.com/sequential-parameter-optimization/spotPython/blob/main/src/spotPython/light/cvmodel.py).\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=24}\n``` {.python .cell-code}\nfrom spotPython.light.cvmodel import cv_model\nset_control_key_value(control_dict=fun_control,\n                        key=\"k_folds\",\n                        value=2,\n                        replace=True)\nset_control_key_value(control_dict=fun_control,\n                        key=\"test_size\",\n                        value=0.6,\n                        replace=True)\ncv_model(config, fun_control)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nk: 0\nTrain Dataset Size: 20918\nVal Dataset Size: 20919\ntrain_model result: {'val_loss': 27.558460235595703, 'hp_metric': 27.558460235595703}\nk: 1\nTrain Dataset Size: 20919\nVal Dataset Size: 20918\ntrain_model result: {'val_loss': 27.35320281982422, 'hp_metric': 27.35320281982422}\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │    27.558460235595703     │\n│         val_loss          │    27.558460235595703     │\n└───────────────────────────┴───────────────────────────┘\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     27.35320281982422     │\n│         val_loss          │     27.35320281982422     │\n└───────────────────────────┴───────────────────────────┘\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n27.45583152770996\n```\n:::\n:::\n\n\n### Plot all Combinations of Hyperparameters\n\n* Warning: this may take a while.\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=25}\n``` {.python .cell-code}\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)\n```\n:::\n\n\n### Visualizing the Activation Distribution (Under Development)\n\n::: {.callout-note}\n### Reference:\n\n* The following code is based on [[PyTorch Lightning TUTORIAL 2: ACTIVATION FUNCTIONS]](https://lightning.ai/docs/pytorch/stable/notebooks/course_UvA-DL/02-activation-functions.html), Author: Phillip Lippe, License: [[CC BY-SA]](https://creativecommons.org/licenses/by-sa/3.0/), Generated: 2023-03-15T09:52:39.179933.\n\n:::\n\nAfter we have trained the models, we can look at the actual activation values that find inside the model. For instance, how many neurons are set to zero in ReLU? Where do we find most values in Tanh? To answer these questions, we can write a simple function which takes a trained model, applies it to a batch of images, and plots the histogram of the activations inside the network:\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=26}\n``` {.python .cell-code}\nfrom spotPython.torch.activation import Sigmoid, Tanh, ReLU, LeakyReLU, ELU, Swish\nact_fn_by_name = {\"sigmoid\": Sigmoid, \"tanh\": Tanh, \"relu\": ReLU, \"leakyrelu\": LeakyReLU, \"elu\": ELU, \"swish\": Swish}\n```\n:::\n\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=27}\n``` {.python .cell-code}\nfrom spotPython.hyperparameters.values import get_one_config_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nconfig = get_one_config_from_X(X, fun_control)\nmodel = fun_control[\"core_model\"](**config, _L_in=64, _L_out=11)\nmodel\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nNetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=16, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.019641823176285617, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.019641823176285617, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.019641823176285617, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.019641823176285617, inplace=False)\n    (12): Linear(in_features=4, out_features=11, bias=True)\n  )\n)\n```\n:::\n:::\n\n\n::: {.cell vscode='{\"languageId\":\"python\"}' execution_count=28}\n``` {.python .cell-code}\n# from spotPython.utils.eda import visualize_activations\n# visualize_activations(model, color=f\"C{0}\")\n```\n:::\n\n\n",
    "supporting": [
      "033_spot_lightning_linear_sensitive_files/figure-pdf"
    ],
    "filters": []
  }
}