[
  {
    "objectID": "601_spot_hpt_light_diabetes.html",
    "href": "601_spot_hpt_light_diabetes.html",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "",
    "text": "26.1 General Experiment Setup\nTo keep track of the different experiments, we use a PREFIX for the experiment name. The PREFIX is used to create a unique experiment name. The PREFIX is also used to create a unique TensorBoard folder, which is used to store the TensorBoard log files.\nspotpython allows the specification of two different types of stopping criteria: first, the number of function evaluations (fun_evals), and second, the maximum run time in seconds (max_time). Here, we will set the number of function evaluations to infinity and the maximum run time to one minute.\nFurthermore, we set the initial design size (init_size) to 10. The initial design is used to train the surrogate model. The surrogate model is used to predict the performance of the hyperparameter configurations. The initial design is also used to train the first model. Since the init_size belongs to the experimental design, it is set in the design_control dictionary, see [SOURCE].\nmax_time is set to one minute for demonstration purposes and init_size is set to 10 for demonstration purposes. For real experiments, these values should be increased. Note, the total run time may exceed the specified max_time, because the initial design is always evaluated, even if this takes longer than max_time.\nThe following parameters are used to specify the general experiment setup:\nPREFIX = \"601\"\nfun_evals = inf\nmax_time = 1\ninit_size = 10",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#sec-general-experiment-setup-601",
    "href": "601_spot_hpt_light_diabetes.html#sec-general-experiment-setup-601",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "",
    "text": "26.1.1 Data Preprocessing\nPreprocessing is handled by Lightning and PyTorch. It is described in the LIGHTNINGDATAMODULE documentation. Here you can find information about the transforms methods.\n\n\n26.1.2 Data Splitting\nThe data splitting is handled by Lightning.\n\n\n26.1.3 Loss Function\nThe loss function is specified in the configurable network class [SOURCE]. We will use the mean squared error (MSE) as the loss function. i.e., from torchmetrics the function mean_squared_error, see [SOURCE]. The user can specify any of the loss functions from torchmetrics via the argument _torchmetric in the fun_control dictionary, see [SOURCE].\nA detailed description of the loss functions (torchmetrics) is presented in Section 26.11.1.\n\n\n26.1.4 The Objective Function fun\nThe objective function fun from the class HyperLight [SOURCE] is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotpython.\n\nfrom spotpython.fun.hyperlight import HyperLight\nfun = HyperLight().fun\n\n\n\n26.1.5 Model Setup\nBy using core_model_name = \"light.regression.NNLinearRegressor\", the spotpython model class NetLightRegression [SOURCE] from the light.regression module is selected. For a given core_model_name, the corresponding hyperparameters are automatically loaded from the associated dictionary, which is stored as a JSON file. The JSON file contains hyperparameter type information, names, and bounds. For spotpython models, the hyperparameters are stored in the LightHyperDict, see [SOURCE] Alternatively, you can load a local hyper_dict. The hyperdict uses the default hyperparameter settings. These can be modified as described in Section D.15.1.\nThe following parameters are used for the model setup:\n\nfrom spotpython.hyperdict.light_hyper_dict import LightHyperDict\ncore_model_name = \"light.regression.NNLinearRegressor\"\nhyperdict = LightHyperDict\n_L_in=10\n_L_out=1\n\n\n\n26.1.6 Surrogate Model Setup\nThe default surrogate model is the Kriging model, see [SOURCE]. We specify noise as True to include noise in the model. An anisotropic kernel is used, which allows different length scales for each dimension, by setting n_theta = 2. Furthermore, the interval for the Lambda value is set to [1e-3, 1e2].\nThese parameters are set in the surrogate_control dictionary and therefore passed to the surrogate_control_init function [SOURCE].\n\nnoise = True\nn_theta = 2\nmin_Lambda = 1e-3\nmax_Lambda = 10\n\n\n\n26.1.7 Summary: Setting up the Experiment\nAt this stage, all required information is available to set up the dictionaries for the hyperparameter tuning. The class Spot [SOURCE] is the hyperparameter tuning workhorse. It is initialized with the following parameters, which were specified above.\n\nfun: the objective function\nfun_control: the dictionary with the control parameters for the objective function\ndesign_control: the dictionary with the control parameters for the experimental design\nsurrogate_control: the dictionary with the control parameters for the surrogate model\noptimizer_control: the dictionary with the control parameters for the optimizer\n\nspotpython allows maximum flexibility in the definition of the hyperparameter tuning setup. Alternative surrogate models, optimizers, and experimental designs can be used. Thus, interfaces for the surrogate model, experimental design, and optimizer are provided. The default surrogate model is the kriging model, the default optimizer is the differential evolution, and default experimental design is the Latin hypercube design.\n\n\n26.1.8 Checking the Experimental Design\n\nfrom spotpython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name           | type   | default   |   lower |   upper | transform             |\n|----------------|--------|-----------|---------|---------|-----------------------|\n| l1             | int    | 3         |     3   |    8    | transform_power_2_int |\n| epochs         | int    | 4         |     4   |    9    | transform_power_2_int |\n| batch_size     | int    | 4         |     1   |    4    | transform_power_2_int |\n| act_fn         | factor | ReLU      |     0   |    5    | None                  |\n| optimizer      | factor | SGD       |     0   |    5    | None                  |\n| dropout_prob   | float  | 0.01      |     0   |    0.25 | None                  |\n| lr_mult        | float  | 1.0       |     0.1 |   10    | None                  |\n| patience       | int    | 2         |     2   |    6    | transform_power_2_int |\n| initialization | factor | Default   |     0   |    0    | None                  |\n\n\n\nfrom spotpython.hyperparameters.values import set_hyperparameter\nset_hyperparameter(fun_control, \"initialization\", [\"Default\"])\nprint(gen_design_table(fun_control))",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#sec-tensorboard-601",
    "href": "601_spot_hpt_light_diabetes.html#sec-tensorboard-601",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.2 Tensorboard",
    "text": "26.2 Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard.\ntensorboard --logdir=\"runs/\"\nFurther information can be found in the PyTorch Lightning documentation for Tensorboard.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#running-the-hyperparameter-tuning-experiment",
    "href": "601_spot_hpt_light_diabetes.html#running-the-hyperparameter-tuning-experiment",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.3 Running the Hyperparameter Tuning Experiment",
    "text": "26.3 Running the Hyperparameter Tuning Experiment\n\nfrom spotpython.spot import spot\nspot_tuner = spot.Spot(\n    fun=fun,\n    fun_control=fun_control,\n    surrogate_control=surrogate_control,\n)\nres = spot_tuner.run()",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#using-the-spotgui",
    "href": "601_spot_hpt_light_diabetes.html#using-the-spotgui",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.4 Using the spotgui",
    "text": "26.4 Using the spotgui\nThe spotgui [github] provides a convenient way to interact with the hyperparameter tuning process. To obtain the settings from Section 26.1.7, the spotgui can be started as shown in Figure 26.1.\n\n\n\n\n\n\nFigure 26.1: spotgui",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#results",
    "href": "601_spot_hpt_light_diabetes.html#results",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.5 Results",
    "text": "26.5 Results\n\n26.5.1 Progress Plot\nAfter the hyperparameter tuning run is finished, the progress of the hyperparameter tuning can be visualized with spotpython’s method plot_progress. The black points represent the performace values (score or metric) of hyperparameter configurations from the initial design, whereas the red points represents the hyperparameter configurations found by the surrogate model based optimization.\n\nspot_tuner.plot_progress(log_y=True, filename=None)\n\n\n\n\n\n\n\n\n\n\n26.5.2 Tuned Hyperparameters and Their Importance\nResults can be printed in tabular form.\n\nfrom spotpython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name           | type   | default   |   lower |   upper | tuned               | transform             |   importance | stars   |\n|----------------|--------|-----------|---------|---------|---------------------|-----------------------|--------------|---------|\n| l1             | int    | 3         |     3.0 |     8.0 | 4.0                 | transform_power_2_int |         2.89 | *       |\n| epochs         | int    | 4         |     4.0 |     9.0 | 6.0                 | transform_power_2_int |         0.01 |         |\n| batch_size     | int    | 4         |     1.0 |     4.0 | 4.0                 | transform_power_2_int |       100.00 | ***     |\n| act_fn         | factor | ReLU      |     0.0 |     5.0 | Swish               | None                  |         0.01 |         |\n| optimizer      | factor | SGD       |     0.0 |     5.0 | Adamax              | None                  |         0.01 |         |\n| dropout_prob   | float  | 0.01      |     0.0 |    0.25 | 0.20469763733360566 | None                  |         0.01 |         |\n| lr_mult        | float  | 1.0       |     0.1 |    10.0 | 9.085888451953213   | None                  |         0.01 |         |\n| patience       | int    | 2         |     2.0 |     6.0 | 2.0                 | transform_power_2_int |         0.01 |         |\n| initialization | factor | Default   |     0.0 |     0.0 | Default             | None                  |         0.00 |         |\n\n\nA histogram can be used to visualize the most important hyperparameters.\n\nspot_tuner.plot_importance(threshold=10.0)\n\n\n\n\n\n\n\n\n\n\n26.5.3 Detailed Hyperparameter Plots\n\nspot_tuner.plot_important_hyperparameter_contour(max_imp=3)\n\nl1:  2.8865921627583586\nepochs:  0.007105698344777786\nbatch_size:  100.0\nact_fn:  0.007105698344777786\noptimizer:  0.007105698344777786\ndropout_prob:  0.007105698344777786\nlr_mult:  0.007105698344777786\npatience:  0.007105698344777786\nimpo: [['l1', 2.8865921627583586], ['epochs', 0.007105698344777786], ['batch_size', 100.0], ['act_fn', 0.007105698344777786], ['optimizer', 0.007105698344777786], ['dropout_prob', 0.007105698344777786], ['lr_mult', 0.007105698344777786], ['patience', 0.007105698344777786]]\nindices: [2, 0, 1, 3, 4, 5, 6, 7]\nindices after max_imp selection: [2, 0, 1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n26.5.4 Parallel Coordinates Plots\n\nspot_tuner.parallel_plot()",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#load-the-saved-experiment-and-get-the-hyperparameters-tuned-architecture",
    "href": "601_spot_hpt_light_diabetes.html#load-the-saved-experiment-and-get-the-hyperparameters-tuned-architecture",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.6 Load the saved experiment and get the hyperparameters (tuned architecture)",
    "text": "26.6 Load the saved experiment and get the hyperparameters (tuned architecture)\n\nfrom spotpython.utils.file import get_experiment_from_PREFIX\nconfig = get_experiment_from_PREFIX(\"601\")[\"config\"]\nconfig\n\n{'l1': 16,\n 'epochs': 64,\n 'batch_size': 16,\n 'act_fn': Swish(),\n 'optimizer': 'Adamax',\n 'dropout_prob': 0.20469763733360566,\n 'lr_mult': 9.085888451953213,\n 'patience': 4,\n 'initialization': 'Default'}\n\n\n\n26.6.1 Cross Validation With Lightning\n\nThe KFold class from sklearn.model_selection is used to generate the folds for cross-validation.\nThese mechanism is used to generate the folds for the final evaluation of the model.\nThe CrossValidationDataModule class [SOURCE] is used to generate the folds for the hyperparameter tuning process.\nIt is called from the cv_model function [SOURCE].\n\n\nfrom spotpython.light.cvmodel import cv_model\nfrom spotpython.hyperparameters.values import set_control_key_value\nset_control_key_value(control_dict=fun_control,\n                        key=\"k_folds\",\n                        value=2,\n                        replace=True)\nset_control_key_value(control_dict=fun_control,\n                        key=\"test_size\",\n                        value=0.6,\n                        replace=True)\ncv_model(config, fun_control)\n\nk: 0\nTrain Dataset Size: 221\nVal Dataset Size: 221\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     5415.60595703125      │\n│         val_loss          │     5415.60595703125      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 5415.60595703125, 'hp_metric': 5415.60595703125}\nk: 1\nTrain Dataset Size: 221\nVal Dataset Size: 221\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      4692.576171875       │\n│         val_loss          │      4692.576171875       │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 4692.576171875, 'hp_metric': 4692.576171875}\n\n\n5054.091064453125",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#test-on-the-full-data-set",
    "href": "601_spot_hpt_light_diabetes.html#test-on-the-full-data-set",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.7 Test on the full data set",
    "text": "26.7 Test on the full data set\n\nfrom spotpython.light.testmodel import test_model\ntest_model(config, fun_control)\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.16, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 71\n\n\nLightDataModule.setup(): stage: TrainerFn.TESTING\ntest_size: 0.6 used for test dataset.\nLightDataModule.test_dataloader(). Test set size: 266\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃        Test metric        ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     5702.96240234375      │\n│         val_loss          │     5702.96240234375      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntest_model result: {'val_loss': 5702.96240234375, 'hp_metric': 5702.96240234375}\n\n\n(5702.96240234375, 5702.96240234375)",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#load-the-last-model",
    "href": "601_spot_hpt_light_diabetes.html#load-the-last-model",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.8 Load the last model",
    "text": "26.8 Load the last model\n\nfrom spotpython.light.loadmodel import load_light_from_checkpoint\nmodel_loaded = load_light_from_checkpoint(config, fun_control)\n\nconfig: {'l1': 16, 'epochs': 64, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'Adamax', 'dropout_prob': 0.20469763733360566, 'lr_mult': 9.085888451953213, 'patience': 4, 'initialization': 'Default'}\nLoading model with 16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TEST from runs/saved_models/16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TEST/last.ckpt\nModel: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n\n\n\nfrom spotpython.utils.init import get_feature_names\nget_feature_names(fun_control)\n\n['age',\n 'sex',\n 'bmi',\n 'bp',\n 's1_tc',\n 's2_ldl',\n 's3_hdl',\n 's4_tch',\n 's5_ltg',\n 's6_glu']\n\n\n\n26.8.1 Integrated Gradients\n\nfrom spotpython.plot.xai import get_attributions, plot_attributions\ndf = get_attributions(spot_tuner, fun_control, attr_method=\"IntegratedGradients\")\nprint(df)\nplot_attributions(df)\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.16, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 71\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      6307.9716796875      │\n│         val_loss          │      6307.9716796875      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 6307.9716796875, 'hp_metric': 6307.9716796875}\nconfig: {'l1': 16, 'epochs': 64, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'Adamax', 'dropout_prob': 0.20469763733360566, 'lr_mult': 9.085888451953213, 'patience': 4, 'initialization': 'Default'}\nLoading model with 16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN from runs/saved_models/16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN/last.ckpt\nModel: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n   Feature Index Feature  IntegratedGradientsAttribution\n0              9  s6_glu                       -1.246092\n1              8  s5_ltg                       -0.685618\n2              7  s4_tch                       -0.629278\n3              2     bmi                       -0.454860\n4              6  s3_hdl                        0.291762\n\n\n\n\n\n\n\n\n\n\n\n26.8.2 Deep Lift\n\ndf = get_attributions(spot_tuner, fun_control, attr_method=\"DeepLift\")\nprint(df)\nplot_attributions(df,  attr_method=\"DeepLift\")\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.16, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 71\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     6311.51513671875      │\n│         val_loss          │     6311.51513671875      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 6311.51513671875, 'hp_metric': 6311.51513671875}\nconfig: {'l1': 16, 'epochs': 64, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'Adamax', 'dropout_prob': 0.20469763733360566, 'lr_mult': 9.085888451953213, 'patience': 4, 'initialization': 'Default'}\nLoading model with 16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN from runs/saved_models/16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN/last.ckpt\nModel: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n   Feature Index Feature  DeepLiftAttribution\n0              9  s6_glu            -2.190735\n1              8  s5_ltg            -1.836963\n2              2     bmi            -1.686463\n3              7  s4_tch            -1.548452\n4              3      bp            -0.799438\n\n\n\n\n\n\n\n\n\n\n\n26.8.3 Feature Ablation\n\ndf = get_attributions(spot_tuner, fun_control, attr_method=\"FeatureAblation\")\nprint(df)\nplot_attributions(df, attr_method=\"FeatureAblation\")\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.16, val_size: 0.24 used for train & val data.\n\n\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 71\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     6767.90283203125      │\n│         val_loss          │     6767.90283203125      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 6767.90283203125, 'hp_metric': 6767.90283203125}\nconfig: {'l1': 16, 'epochs': 64, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'Adamax', 'dropout_prob': 0.20469763733360566, 'lr_mult': 9.085888451953213, 'patience': 4, 'initialization': 'Default'}\nLoading model with 16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN from runs/saved_models/16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN/last.ckpt\nModel: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n   Feature Index Feature  FeatureAblationAttribution\n0              9  s6_glu                   -1.859456\n1              8  s5_ltg                   -1.457012\n2              7  s4_tch                   -1.313134\n3              2     bmi                   -1.180918\n4              3      bp                   -0.546113",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#visualizing-the-activations-weights-and-gradients",
    "href": "601_spot_hpt_light_diabetes.html#visualizing-the-activations-weights-and-gradients",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.9 Visualizing the Activations, Weights, and Gradients",
    "text": "26.9 Visualizing the Activations, Weights, and Gradients\nIn neural networks, activations, weights, and gradients are fundamental concepts that play different.\n\nActivations:\nActivations refer to the outputs of neurons after applying an activation function. In neural networks, the input passes through each neuron of the network layers, where each unit calculates a weighted sum of its inputs and then applies a non-linear activation function (such as ReLU, Sigmoid, or Tanh). These activation functions help introduce non-linearity into the model, enabling the neural network to learn complex relationships between the input data and the predictions. In short, activations are the outputs that are forwarded by the neurons after applying the activation function.\nWeights:\nWeights are parameters within a neural network that control the strength of the connection between two neurons in successive layers. They are adjusted during the training process to enable the neural network to perform the desired task as well as possible. Each input is multiplied by a weight, and the neural network learns by adjusting these weights based on the error between the predictions and the actual values. Adjusting the weights allows the network to recognize patterns and relationships in the input data and use them for predictions or classifications.\nGradients:\nIn the context of machine learning and specifically in neural networks, gradients are a measure of the rate of change or the slope of the loss function (a function that measures how well the network performs in predicting the desired output) with respect to the weights. During the training process, the goal is to minimize the value of the loss function to improve the model’s performance. The gradients indicate the direction and size of the steps that need to be taken to adjust the weights in a way that minimizes the loss (known as gradient descent). By repeatedly adjusting the weights in the opposite direction of the gradient, the network can be effectively trained to improve its prediction accuracy.\n\n\n\n\n\n\n\nReference:\n\n\n\n\nThe following code is based on [PyTorch Lightning TUTORIAL 2: ACTIVATION FUNCTIONS], Author: Phillip Lippe, License: [CC BY-SA], Generated: 2023-03-15T09:52:39.179933.\n\n\n\nAfter we have trained the models, we can look at the actual activation values that find inside the model. For instance, how many neurons are set to zero in ReLU? Where do we find most values in Tanh? To answer these questions, we can write a simple function which takes a trained model, applies it to a batch of images, and plots the histogram of the activations inside the network:\n\nfrom spotpython.plot.xai import (get_activations, get_gradients, get_weights, plot_nn_values_hist, plot_nn_values_scatter, visualize_weights, visualize_gradients, visualize_activations, visualize_activations_distributions, visualize_gradient_distributions, visualize_weights_distributions)\nimport pprint\n\n\nfrom spotpython.utils.file import get_experiment_from_PREFIX\nget_experiment_from_PREFIX(\"601\", return_dict=False)\npprint.pprint(config)\nbatch_size = config[\"batch_size\"]\nprint(batch_size)\n\n{'act_fn': Swish(),\n 'batch_size': 16,\n 'dropout_prob': 0.20469763733360566,\n 'epochs': 64,\n 'initialization': 'Default',\n 'l1': 16,\n 'lr_mult': 9.085888451953213,\n 'optimizer': 'Adamax',\n 'patience': 4}\n16\n\n\n\nfrom spotpython.light.loadmodel import load_light_from_checkpoint\nmodel_loaded = load_light_from_checkpoint(config, fun_control)\nmodel = model_loaded.to(\"cpu\")\n\nconfig: {'l1': 16, 'epochs': 64, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'Adamax', 'dropout_prob': 0.20469763733360566, 'lr_mult': 9.085888451953213, 'patience': 4, 'initialization': 'Default'}\nLoading model with 16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TEST from runs/saved_models/16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TEST/last.ckpt\nModel: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n\n\n\n26.9.1 Weights\n\nweights, index = get_weights(model, return_index=True)\nprint(index)\n\n[0, 3, 6, 9, 12]\n\n\n\nvisualize_weights(model, absolute=True, cmap=\"gray\", figsize=(6, 6))\n\n160 values in Layer Layer 0.\n9 padding values added.\n169 values now in Layer Layer 0.\n\n\n\n\n\n\n\n\n\n128 values in Layer Layer 3.\n16 padding values added.\n144 values now in Layer Layer 3.\n\n\n\n\n\n\n\n\n\n64 values in Layer Layer 6.\n64 values now in Layer Layer 6.\n\n\n\n\n\n\n\n\n\n32 values in Layer Layer 9.\n4 padding values added.\n36 values now in Layer Layer 9.\n\n\n\n\n\n\n\n\n\n4 values in Layer Layer 12.\n4 values now in Layer Layer 12.\n\n\n\n\n\n\n\n\n\n\nvisualize_weights_distributions(model, color=f\"C{0}\")\n\nn:5\n\n\n\n\n\n\n\n\n\n\n\n26.9.2 Activations\n\nactivations = get_activations(model, fun_control=fun_control, batch_size=batch_size, device = \"cpu\")\n\nnet: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n\n\n\nvisualize_activations(model, fun_control=fun_control, batch_size=batch_size, device = \"cpu\", cmap=\"BlueWhiteRed\", absolute=False)\n\nnet: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n256 values in Layer 0.\n256 values now in Layer 0.\n\n\n\n\n\n\n\n\n\n128 values in Layer 3.\n16 padding values added.\n144 values now in Layer 3.\n\n\n\n\n\n\n\n\n\n128 values in Layer 6.\n16 padding values added.\n144 values now in Layer 6.\n\n\n\n\n\n\n\n\n\n64 values in Layer 9.\n64 values now in Layer 9.\n\n\n\n\n\n\n\n\n\n16 values in Layer 12.\n16 values now in Layer 12.\n\n\n\n\n\n\n\n\n\n\nAbsolute values of the activations are plotted:\n\n\nvisualize_activations(model, fun_control=fun_control, batch_size=batch_size, device = \"cpu\", absolute=True)\n\nnet: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n256 values in Layer 0.\n256 values now in Layer 0.\n\n\n\n\n\n\n\n\n\n128 values in Layer 3.\n16 padding values added.\n144 values now in Layer 3.\n\n\n\n\n\n\n\n\n\n128 values in Layer 6.\n16 padding values added.\n144 values now in Layer 6.\n\n\n\n\n\n\n\n\n\n64 values in Layer 9.\n64 values now in Layer 9.\n\n\n\n\n\n\n\n\n\n16 values in Layer 12.\n16 values now in Layer 12.\n\n\n\n\n\n\n\n\n\n\nvisualize_activations_distributions(net=model, fun_control=fun_control, batch_size=batch_size, device=\"cpu\", color=\"C0\", columns=2)\n\nnet: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\nn:5\n\n\n\n\n\n\n\n\n\n\n\n26.9.3 Gradients\n\ngradients = get_gradients(model, fun_control, batch_size, device=\"cpu\")\n\n\nvisualize_gradients(model, fun_control, batch_size, absolute=True, cmap=\"BlueWhiteRed\", figsize=(6, 6))\n\n160 values in Layer layers.0.weight.\n9 padding values added.\n169 values now in Layer layers.0.weight.\n\n\n\n\n\n\n\n\n\n128 values in Layer layers.3.weight.\n16 padding values added.\n144 values now in Layer layers.3.weight.\n\n\n\n\n\n\n\n\n\n64 values in Layer layers.6.weight.\n64 values now in Layer layers.6.weight.\n\n\n\n\n\n\n\n\n\n32 values in Layer layers.9.weight.\n4 padding values added.\n36 values now in Layer layers.9.weight.\n\n\n\n\n\n\n\n\n\n4 values in Layer layers.12.weight.\n4 values now in Layer layers.12.weight.\n\n\n\n\n\n\n\n\n\n\nvisualize_gradient_distributions(model, fun_control, batch_size=batch_size, color=f\"C{0}\")\n\nn:5",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#layer-conductance",
    "href": "601_spot_hpt_light_diabetes.html#layer-conductance",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.10 Layer Conductance",
    "text": "26.10 Layer Conductance\n\nfrom spotpython.plot.xai import get_weights_conductance_last_layer, plot_conductance_last_layer\nw, c = get_weights_conductance_last_layer(spot_tuner, fun_control)\nplot_conductance_last_layer(w,c)\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.16, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 71\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     6518.95556640625      │\n│         val_loss          │     6518.95556640625      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 6518.95556640625, 'hp_metric': 6518.95556640625}\nconfig: {'l1': 16, 'epochs': 64, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'Adamax', 'dropout_prob': 0.20469763733360566, 'lr_mult': 9.085888451953213, 'patience': 4, 'initialization': 'Default'}\nLoading model with 16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN from runs/saved_models/16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN/last.ckpt\nModel: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.16, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 71\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      7127.080078125       │\n│         val_loss          │      7127.080078125       │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 7127.080078125, 'hp_metric': 7127.080078125}\nconfig: {'l1': 16, 'epochs': 64, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'Adamax', 'dropout_prob': 0.20469763733360566, 'lr_mult': 9.085888451953213, 'patience': 4, 'initialization': 'Default'}\nLoading model with 16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN from runs/saved_models/16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TRAIN/last.ckpt\nModel: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\nConductance analysis for layer:  Linear(in_features=4, out_features=1, bias=True)",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#details-of-the-implementation",
    "href": "601_spot_hpt_light_diabetes.html#details-of-the-implementation",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.11 Details of the Implementation",
    "text": "26.11 Details of the Implementation\n\n26.11.1 Loss Function\nThe parameter _torchmetric is used to specify the metric. Any metric from the torchmetrics library can be used. Currently, the following metrics are provided, see [LINK]:\n\nconcordance_corrcoef\ncosine_similarity\ncritical_success_index\nexplained_variance\nkendall_rank_corrcoef\nkl_divergence\nlog_cosh_error\nmean_squared_log_error\nmean_absolute_error\nmean_squared_error\npearson_corrcoef\nmean_absolute_percentage_error\nmean_absolute_percentage_error\nminkowski_distance\nr2_score\nrelative_squared_error\nspearman_corrcoef\nsymmetric_mean_absolute_percentage_error\ntweedie_deviance_score\nweighted_mean_absolute_percentage_error\n\nThe metric is used in the training, validation, and testing steps of the model.\nNNLightRegressor implements a loss function as follows:\n    def _calculate_loss(self, batch):\n        \"\"\"\n        Calculate the loss for the given batch.\n\n        Args:\n            batch (tuple): A tuple containing a batch of input data and labels.\n            mode (str, optional): The mode of the model. Defaults to \"train\".\n\n        Returns:\n            torch.Tensor: A tensor containing the loss for this batch.\n\n        \"\"\"\n        x, y = batch\n        y = y.view(len(y), 1)\n        y_hat = self(x)\n        loss = self.metric(y_hat, y)\n        return loss\nThe loss function is used in the training, validation, and testing steps of the model.\n\n\n26.11.2 Data Handling\nAs shown below, a DataLoader from torch.utils.data can be used to check the data. spotpython implements a DataModule class, which is used to load the data. The DataModule class is called from the fun function. The DataModule class is used to load the data and to split the data into training, validation, and test sets.\n\nfrom spotpython.data.diabetes import Diabetes\nimport torch\ndata_set = Diabetes(target_type=torch.float)\nprint(len(data_set))\n# Set batch size for DataLoader\nbatch_size = 5\n# Create DataLoader\nfrom torch.utils.data import DataLoader\ndataloader = DataLoader(data_set, batch_size=batch_size, shuffle=False)\n\n# Iterate over the data in the DataLoader\nfor batch in dataloader:\n    inputs, targets = batch\n    print(f\"Batch Size: {inputs.size(0)}\")\n    print(f\"Inputs Shape: {inputs.shape}\")\n    print(f\"Targets Shape: {targets.shape}\")\n    print(\"---------------\")\n    print(f\"Inputs: {inputs}\")\n    print(f\"Targets: {targets}\")\n    break\n\n442\nBatch Size: 5\nInputs Shape: torch.Size([5, 10])\nTargets Shape: torch.Size([5])\n---------------\nInputs: tensor([[ 0.0381,  0.0507,  0.0617,  0.0219, -0.0442, -0.0348, -0.0434, -0.0026,\n          0.0199, -0.0176],\n        [-0.0019, -0.0446, -0.0515, -0.0263, -0.0084, -0.0192,  0.0744, -0.0395,\n         -0.0683, -0.0922],\n        [ 0.0853,  0.0507,  0.0445, -0.0057, -0.0456, -0.0342, -0.0324, -0.0026,\n          0.0029, -0.0259],\n        [-0.0891, -0.0446, -0.0116, -0.0367,  0.0122,  0.0250, -0.0360,  0.0343,\n          0.0227, -0.0094],\n        [ 0.0054, -0.0446, -0.0364,  0.0219,  0.0039,  0.0156,  0.0081, -0.0026,\n         -0.0320, -0.0466]])\nTargets: tensor([151.,  75., 141., 206., 135.])\n\n\nInformation related to the data is set in the fun_control dictionary, see [SOURCE]. Specifically, the following parameters are set:\n\ndata_set: the data set\nnum_workers: the number of workers\ntest_size: the size of the test set\ntest_seed: the seed for the test set\n\n\nfrom spotpython.utils.init import fun_control_init\nfrom spotpython.data.diabetes import Diabetes\ndata_set = Diabetes(target_type=torch.float)\nfun_control = fun_control_init(\n    data_set=data_set,\n    device=\"cpu\",\n    enable_progress_bar=False,\n    num_workers=0,\n    show_progress=True,\n    test_size=0.4,\n    test_seed=42,\n    )\n\n\n\n26.11.3 spotpython’s LightDataModule Class\nThe values from the fun_control dictionary are used to set up the LightDataModule class, see [SOURCE]. The parameter batch_size is a hyperparameter that can be tuned and therefore not set in the fun_control dictionary.\n\nfrom spotpython.data.lightdatamodule import LightDataModule\ndm = LightDataModule(\n    dataset=fun_control[\"data_set\"],\n    batch_size=5,\n    num_workers=fun_control[\"num_workers\"],\n    test_size=fun_control[\"test_size\"],\n    test_seed=fun_control[\"test_seed\"],\n)\ndm.setup()\nprint(f\"train_model(): Test set size: {len(dm.data_test)}\")\nprint(f\"train_model(): Train set size: {len(dm.data_train)}\")\n\nLightDataModule.setup(): stage: None\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\ntest_size: 0.4 used for test dataset.\ntest_size: 0.4 used for predict dataset.\ntrain_model(): Test set size: 177\ntrain_model(): Train set size: 160\n\n\nThe steps described above are handled by the LightDataModule class. This class is used to create the data loaders for the training, validation, and test sets. The LightDataModule class is part of the spotpython package. The LightDataModule class provides the following methods:\n\nprepare_data(): This method is used to prepare the data set.\nsetup(): This method is used to create the data loaders for the training, validation, and test sets.\ntrain_dataloader(): This method is used to return the data loader for the training set.\nval_dataloader(): This method is used to return the data loader for the validation set.\ntest_dataloader(): This method is used to return the data loader for the test set.\npredict_dataloader(): This method is used to return the data loader for the prediction set.\n\nDetails of the implementation can be found in Chapter 25.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#hyperlight-interfacing-the-optimizer-spotpython-with-the-data-the-loss-function-and-the-model",
    "href": "601_spot_hpt_light_diabetes.html#hyperlight-interfacing-the-optimizer-spotpython-with-the-data-the-loss-function-and-the-model",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.12 HyperLight: Interfacing the Optimizer spotpython with the Data, the Loss Function, and the Model",
    "text": "26.12 HyperLight: Interfacing the Optimizer spotpython with the Data, the Loss Function, and the Model\n\n26.12.1 The HyperLight Class Method fun()\nThe class Hyperlight implements the method fun(), which passes the hyperparameter tuning parametrizations to the neural network and the configurations to the DataModule. The fun() method passes one configuration to the train_model() method, which trains the model and returns the performance value. The performance value is then returned to the optimizer.\ndf_eval = train_model(config, fun_control)\n\n\n26.12.2 The Method train_model\ntrain_model trains a model using the given configuration and function control parameters. It extracts the information from the configuration and the function control parameters and trains the model using the Lightning framework. A simplified version of the train_model method is shown below:\n\ndef train_model(config: dict, fun_control: dict, timestamp: bool = True) -&gt; float:\n    _L_in = fun_control[\"_L_in\"]\n    _L_out = fun_control[\"_L_out\"]\n    _torchmetric = fun_control[\"_torchmetric\"]\n    model = fun_control[\"core_model\"](**config, _L_in=_L_in, _L_out=_L_out, _torchmetric=_torchmetric)\n    dm = LightDataModule(\n        dataset=fun_control[\"data_set\"],\n        batch_size=config[\"batch_size\"],\n        num_workers=fun_control[\"num_workers\"],\n        test_size=fun_control[\"test_size\"],\n        test_seed=fun_control[\"test_seed\"],\n        scaler=fun_control[\"scaler\"],\n    )\n    trainer = L.Trainer()\n    trainer.fit(model=model, datamodule=dm)\n    # Test best model on validation set\n    result = trainer.validate(model=model, datamodule=dm)\n    result = result[0]\n    return result[\"val_loss\"]",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#summary-of-the-lightning-training-process-in-spotpython",
    "href": "601_spot_hpt_light_diabetes.html#summary-of-the-lightning-training-process-in-spotpython",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.13 Summary of the Lightning Training Process in spotpython",
    "text": "26.13 Summary of the Lightning Training Process in spotpython\nThe following code exemplifies the workflow and shows how to combine the elements discussed so far:\n\nFirst, results from the tuning experiment (“601”) are loaded.\nA LightDataModule object is created and the setup() method is called.\nThen, the Trainer is initialized.\nLoad the NN model from the last checkpoint.\nNext, the fit() method is called to train the model.\nFinally, the validate() method is called to validate the model. The validate() method returns the validation loss.\n\n\n# Load results from the experiment 601\nfrom spotpython.utils.file import get_experiment_from_PREFIX\nconfig, fun_control, design_control, surrogate_control, optimizer_control = get_experiment_from_PREFIX(\"601\",return_dict=False)\n\n\n# Create a LightDataModule object\nfrom spotpython.data.lightdatamodule import LightDataModule\ndm = LightDataModule(\n    dataset=fun_control[\"data_set\"],\n    batch_size=config[\"batch_size\"],\n    num_workers=fun_control[\"num_workers\"],\n    test_size=fun_control[\"test_size\"],\n    test_seed=fun_control[\"test_seed\"],\n)\ndm.setup()\n\nLightDataModule.setup(): stage: None\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\ntest_size: 0.4 used for test dataset.\ntest_size: 0.4 used for predict dataset.\n\n\n\n# Initialize the Trainer\nimport lightning as L\ntrainer = L.Trainer(enable_progress_bar=False)\n\n\n# Load the model from the checkpoint\nfrom spotpython.light.loadmodel import load_light_from_checkpoint\nmodel_loaded = load_light_from_checkpoint(config, fun_control)\nmodel = model_loaded.to(\"cpu\")\n\nconfig: {'l1': 16, 'epochs': 64, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'Adamax', 'dropout_prob': 0.20469763733360566, 'lr_mult': 9.085888451953213, 'patience': 4, 'initialization': 'Default'}\nLoading model with 16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TEST from runs/saved_models/16_64_16_Swish_Adamax_0.2047_9.0859_4_Default_TEST/last.ckpt\nModel: NNLinearRegressor(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=16, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.20469763733360566, inplace=False)\n    (3): Linear(in_features=16, out_features=8, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.20469763733360566, inplace=False)\n    (6): Linear(in_features=8, out_features=8, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.20469763733360566, inplace=False)\n    (9): Linear(in_features=8, out_features=4, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.20469763733360566, inplace=False)\n    (12): Linear(in_features=4, out_features=1, bias=True)\n  )\n)\n\n\n\n# Fit (train) the model\ntrainer.fit(model=model, datamodule=dm)\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\n\n# Validation: Test best model on validation set\nresult = trainer.validate(model=model, datamodule=dm)\n# unlist the result (from a list of one dict)\nresult = result[0]\nprint(result[\"val_loss\"])\n\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      5085.517578125       │\n│         val_loss          │      5085.517578125       │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n5085.517578125",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#loading-a-user-specified-data-set",
    "href": "601_spot_hpt_light_diabetes.html#loading-a-user-specified-data-set",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.14 Loading a User Specified Data Set",
    "text": "26.14 Loading a User Specified Data Set\nUsing a user-specified data set is straightforward. The user simply needs to provide a data set and loads is as a spotpython CVSDataset() class by specifying the path, filename, and target column as follows:\n\nfrom spotpython.data.csvdataset import CSVDataset\nimport torch\ndata_set = CSVDataset(directory=\"./userData/\",\n                     filename=\"data.csv\",\n                     target_column='target',\n                     feature_type=torch.float32,\n                     target_type=torch.float32,\n                     rmNA=True)\nprint(len(data_set))\n# Set batch size for DataLoader\nbatch_size = 5\n# Create DataLoader\nfrom torch.utils.data import DataLoader\ndataloader = DataLoader(data_set, batch_size=batch_size, shuffle=False)\n\n# Iterate over the data in the DataLoader\nfor batch in dataloader:\n    inputs, targets = batch\n    print(f\"Batch Size: {inputs.size(0)}\")\n    print(f\"Inputs Shape: {inputs.shape}\")\n    print(f\"Targets Shape: {targets.shape}\")\n    print(\"---------------\")\n    print(f\"Inputs: {inputs}\")\n    print(f\"Targets: {targets}\")\n    break\n\n442\nBatch Size: 5\nInputs Shape: torch.Size([5, 10])\nTargets Shape: torch.Size([5])\n---------------\nInputs: tensor([[ 0.0381,  0.0507,  0.0617,  0.0219, -0.0442, -0.0348, -0.0434, -0.0026,\n          0.0199, -0.0176],\n        [-0.0019, -0.0446, -0.0515, -0.0263, -0.0084, -0.0192,  0.0744, -0.0395,\n         -0.0683, -0.0922],\n        [ 0.0853,  0.0507,  0.0445, -0.0057, -0.0456, -0.0342, -0.0324, -0.0026,\n          0.0029, -0.0259],\n        [-0.0891, -0.0446, -0.0116, -0.0367,  0.0122,  0.0250, -0.0360,  0.0343,\n          0.0227, -0.0094],\n        [ 0.0054, -0.0446, -0.0364,  0.0219,  0.0039,  0.0156,  0.0081, -0.0026,\n         -0.0320, -0.0466]])\nTargets: tensor([151.,  75., 141., 206., 135.])",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "601_spot_hpt_light_diabetes.html#using-a-user-specified-model",
    "href": "601_spot_hpt_light_diabetes.html#using-a-user-specified-model",
    "title": "26  Pytorch Lightning: Hyperparameter Tuning with Diabetes Data",
    "section": "26.15 Using a User Specified Model",
    "text": "26.15 Using a User Specified Model\nAs templates, we provide the following three files that allow the user to specify a model in the /userModel directory: * my_regressor.py * my_hyperdict.json * my_hyperdict.py\nThe my_regressor.py file contains the model class, which is a subclass of nn.Module. The my_hyperdict.json file contains the hyperparameter settings as a dictionary, which are loaded via the my_hyperdict.py file.\n\nfrom spotpython.hyperparameters.values import add_core_model_to_fun_control\nimport sys\nsys.path.insert(0, './userModel')\nimport my_regressor\nimport my_hyper_dict\nadd_core_model_to_fun_control(fun_control=fun_control,\n                              core_model=my_regressor.MyRegressor,\n                              hyper_dict=my_hyper_dict.MyHyperDict)",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Pytorch Lightning: Hyperparameter Tuning with Diabetes Data</span>"
    ]
  },
  {
    "objectID": "602_spot_lightning_xai.html",
    "href": "602_spot_lightning_xai.html",
    "title": "27  Explainable AI with SpotPython and Pytorch",
    "section": "",
    "text": "from torch.utils.data import DataLoader\nfrom spotpython.utils.init import fun_control_init\nfrom spotpython.hyperparameters.values import set_control_key_value\nfrom spotpython.data.diabetes import Diabetes\nfrom spotpython.light.regression.netlightregression import NetLightRegression\nfrom spotpython.hyperdict.light_hyper_dict import LightHyperDict\nfrom spotpython.hyperparameters.values import add_core_model_to_fun_control\nfrom spotpython.hyperparameters.values import (\n        get_default_hyperparameters_as_array, get_one_config_from_X)\nfrom spotpython.hyperparameters.values import set_control_key_value\nfrom spotpython.plot.xai import (get_activations, get_gradients, get_weights, plot_nn_values_hist, plot_nn_values_scatter, visualize_weights, visualize_gradients, visualize_activations, visualize_gradient_distributions, visualize_weights_distributions)\nfun_control = fun_control_init(\n    _L_in=10, # 10: diabetes\n    _L_out=1,\n    _torchmetric=\"mean_squared_error\",\n    )\ndataset = Diabetes()\nset_control_key_value(control_dict=fun_control,\n                        key=\"data_set\",\n                        value=dataset,\n                        replace=True)\nadd_core_model_to_fun_control(fun_control=fun_control,\n                              core_model=NetLightRegression,\n                              hyper_dict=LightHyperDict)\nX = get_default_hyperparameters_as_array(fun_control)\nconfig = get_one_config_from_X(X, fun_control)\n_L_in = fun_control[\"_L_in\"]\n_L_out = fun_control[\"_L_out\"]\n_torchmetric = fun_control[\"_torchmetric\"]\nmodel = fun_control[\"core_model\"](**config, _L_in=_L_in, _L_out=_L_out, _torchmetric=_torchmetric)\nbatch_size= config[\"batch_size\"]\ndataloader = DataLoader(dataset, batch_size=batch_size, shuffle=False)\n\n\nget_activations(model, fun_control=fun_control, batch_size=batch_size, device = \"cpu\")\n\nnet: NetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=8, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.01, inplace=False)\n    (3): Linear(in_features=8, out_features=4, bias=True)\n    (4): ReLU()\n    (5): Dropout(p=0.01, inplace=False)\n    (6): Linear(in_features=4, out_features=4, bias=True)\n    (7): ReLU()\n    (8): Dropout(p=0.01, inplace=False)\n    (9): Linear(in_features=4, out_features=2, bias=True)\n    (10): ReLU()\n    (11): Dropout(p=0.01, inplace=False)\n    (12): Linear(in_features=2, out_features=1, bias=True)\n  )\n)\n\n\n{0: array([ 1.43207282e-01,  6.29712082e-03,  1.04200497e-01, -3.79188173e-03,\n        -1.74976081e-01, -7.97475874e-02, -2.00860098e-01,  2.48444736e-01,\n         1.42530382e-01, -2.86847632e-03,  3.61538231e-02, -5.21567538e-02,\n        -2.15294853e-01, -1.26742452e-01, -1.79230243e-01,  2.73077697e-01,\n         1.36738747e-01,  8.57900176e-03,  1.01677164e-01,  3.27536091e-03,\n        -1.92429125e-01, -7.95854479e-02, -1.84092522e-01,  2.72164375e-01,\n         1.51459932e-01,  3.70034538e-02,  4.94864434e-02, -6.36564642e-02,\n        -1.63678646e-01, -1.26617596e-01, -2.05547154e-01,  2.25242063e-01,\n         1.54910132e-01,  4.92912624e-03,  6.90693632e-02, -3.28048877e-02,\n        -1.77523270e-01, -1.17699921e-01, -1.95609123e-01,  2.50784487e-01,\n         1.66618377e-01,  1.22015951e-02,  2.58807316e-02, -8.16192776e-02,\n        -2.00623482e-01, -1.17052853e-01, -1.86843857e-01,  2.40996510e-01,\n         1.80479109e-01,  3.72159854e-02,  3.55244167e-02, -3.60636115e-02,\n        -2.09616780e-01, -1.19843856e-01, -1.44335642e-01,  2.73970902e-01,\n         1.46006003e-01, -1.83095373e-02,  8.83664042e-02,  2.28608586e-02,\n        -1.77115664e-01, -1.37761638e-01, -1.90622538e-01,  2.85049856e-01,\n         1.44436464e-01,  1.36893094e-02,  6.65568933e-02, -2.01083720e-04,\n        -1.99043870e-01, -1.11171007e-01, -1.76820531e-01,  2.78549373e-01,\n         1.31597325e-01,  1.31126186e-02,  5.92438355e-02, -6.50760308e-02,\n        -1.55642599e-01, -1.12090096e-01, -2.32182071e-01,  2.25448400e-01,\n         2.09733546e-01,  4.48576249e-02,  1.76887661e-02, -7.26176351e-02,\n        -1.81560591e-01, -1.18118793e-01, -1.55840069e-01,  2.45131850e-01,\n         1.57539800e-01,  4.57477495e-02,  8.64019692e-02,  1.06538832e-02,\n        -2.25713193e-01, -8.36062431e-02, -1.51326194e-01,  2.42097050e-01,\n         1.46130219e-01, -6.08363096e-03,  4.69235368e-02, -4.06553932e-02,\n        -1.90215483e-01, -1.30105391e-01, -1.91207454e-01,  2.75829703e-01,\n         1.37035578e-01,  1.32784406e-02,  8.11730623e-02, -2.83420049e-02,\n        -1.72134370e-01, -1.05717532e-01, -1.93411276e-01,  2.68321246e-01,\n         1.24822736e-01, -2.49985531e-02,  5.46513572e-02, -3.76938097e-02,\n        -2.02080101e-01, -1.29510283e-01, -1.99880868e-01,  2.84415126e-01,\n         1.36025175e-01,  2.10405551e-02,  1.25923336e-01, -1.76883545e-02,\n        -1.46617338e-01, -1.00234658e-01, -2.21794963e-01,  2.05139250e-01],\n       dtype=float32),\n 3: array([-0.09106569,  0.15831017,  0.29874575, -0.05709065, -0.07168067,\n         0.13238071,  0.29310873, -0.04537551, -0.08868651,  0.15093939,\n         0.29576218, -0.0508837 , -0.07256822,  0.15756649,  0.29804155,\n        -0.06024086, -0.07925774,  0.15159754,  0.29655144, -0.05204485,\n        -0.06510481,  0.14707124,  0.2955585 , -0.05045141, -0.05945833,\n         0.15397519,  0.28643152, -0.03937227, -0.0780265 ,  0.1443048 ,\n         0.2993904 , -0.04338943, -0.07745007,  0.1438258 ,  0.29152495,\n        -0.04569358, -0.08201659,  0.14775375,  0.3020632 , -0.06361471,\n        -0.05014775,  0.16657498,  0.28808075, -0.04191205, -0.07614301,\n         0.16806594,  0.29809946, -0.05615523, -0.07369395,  0.13612927,\n         0.2925982 , -0.04455032, -0.08367015,  0.14735378,  0.29441217,\n        -0.05101945, -0.07929114,  0.12925598,  0.29300398, -0.04631315,\n        -0.09977546,  0.1741175 ,  0.30642375, -0.07330882], dtype=float32),\n 6: array([ 0.02894721, -0.15329668,  0.0478624 ,  0.5073338 ,  0.03414171,\n        -0.1624101 ,  0.0582981 ,  0.5058923 ,  0.0301194 , -0.15560818,\n         0.05099656,  0.5068564 ,  0.02897662, -0.15344843,  0.04822758,\n         0.5072659 ,  0.03012998, -0.15550745,  0.05065323,  0.5069246 ,\n         0.03103478, -0.1570965 ,  0.05247599,  0.50667256,  0.02730933,\n        -0.15252227,  0.0509877 ,  0.5065358 ,  0.03256607, -0.15896471,\n         0.05305116,  0.5067359 ,  0.03095146, -0.15756464,  0.05418621,\n         0.5063291 ,  0.03229896, -0.1581411 ,  0.05142961,  0.50702184,\n         0.02454497, -0.14787357,  0.04604906,  0.50718296,  0.02638294,\n        -0.14930864,  0.04427201,  0.5077407 ,  0.03309863, -0.16082475,\n         0.05695035,  0.50603575,  0.03071198, -0.15675312,  0.05250891,\n         0.5066291 ,  0.03489432, -0.16362445,  0.05948593,  0.50574666,\n         0.02671532, -0.14859803,  0.04098557,  0.5084204 ], dtype=float32),\n 9: array([0.04397329, 0.23183572, 0.04112439, 0.22675759, 0.0430866 ,\n        0.23046201, 0.04386139, 0.2317175 , 0.04319487, 0.23055825,\n        0.04269706, 0.22967225, 0.04286424, 0.23156166, 0.04263979,\n        0.2289063 , 0.0421553 , 0.2292049 , 0.04312573, 0.22948454,\n        0.04418794, 0.23408437, 0.04489119, 0.23388621, 0.0414625 ,\n        0.22755873, 0.0426609 , 0.22978865, 0.04081305, 0.22611658,\n        0.04594607, 0.23471704], dtype=float32),\n 12: array([-0.30635476, -0.30988604, -0.3073418 , -0.30644947, -0.30726004,\n        -0.30787635, -0.306807  , -0.308307  , -0.3082779 , -0.3078606 ,\n        -0.30507785, -0.3049926 , -0.30935943, -0.30782318, -0.3103186 ,\n        -0.30425358], dtype=float32)}\n\n\n\nget_gradients(model, fun_control=fun_control, batch_size=batch_size, device = \"cpu\")\n\n{'layers.0.weight': array([ 0.10417589, -0.04161514,  0.10597268,  0.02180895,  0.12001497,\n         0.0289035 ,  0.01146171,  0.08183315,  0.2495192 ,  0.5108763 ,\n         0.14668097, -0.07902835,  0.00912531,  0.02640062,  0.14108549,\n         0.06816658,  0.14256881, -0.00347908,  0.07373644,  0.23171763,\n         0.08313344, -0.0332093 ,  0.08456729,  0.01740377,  0.09577318,\n         0.0230653 ,  0.00914656,  0.0653037 ,  0.1991189 ,  0.4076846 ,\n         0.04405227,  0.03805925,  0.015035  ,  0.0069457 ,  0.0094994 ,\n         0.03021198, -0.01876849,  0.02160799, -0.03238906, -0.02050959,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n        -0.05415884,  0.02163483, -0.05509295, -0.01133801, -0.06239325,\n        -0.01502632, -0.0059587 , -0.04254333, -0.12971975, -0.2655938 ],\n       dtype=float32),\n 'layers.3.weight': array([ 0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\n        -5.8896484e+00, -6.3058013e-01, -2.5641673e+00, -8.9936234e-02,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00, -1.0009734e+01,\n         5.1539743e-01,  5.5181440e-02,  2.2438775e-01,  7.8702327e-03,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  8.7594193e-01,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,\n         0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00],\n       dtype=float32),\n 'layers.6.weight': array([ 0.       ,  7.6445217, 15.007772 ,  0.       ,  0.       ,\n         0.       ,  0.       ,  0.       ,  0.       , 11.027901 ,\n        21.650045 ,  0.       ,  0.       ,  3.458755 ,  6.7902493,\n         0.       ], dtype=float32),\n 'layers.9.weight': array([ -2.3285942,   0.       ,  -3.9471323, -39.11015  ,  -4.6057286,\n          0.       ,  -7.8070364, -77.35598  ], dtype=float32),\n 'layers.12.weight': array([-12.126856, -64.91129 ], dtype=float32)}\n\n\n\nget_weights(model)\n\n{'Layer 0': array([-0.12895013,  0.01047491, -0.15705723,  0.11925378, -0.26944348,\n         0.23180884, -0.22984707, -0.25141433, -0.19982024,  0.1432175 ,\n        -0.11684369,  0.11833665, -0.2683918 , -0.19186287, -0.11611126,\n        -0.06214499, -0.24123858,  0.20706302, -0.07457636,  0.10150522,\n         0.22361842,  0.05891513,  0.08647271,  0.3052416 , -0.1426217 ,\n         0.10016554, -0.14069483,  0.22599207,  0.25255734, -0.29155323,\n         0.26994652,  0.1510033 ,  0.13780165,  0.13018303,  0.26287985,\n        -0.04175457, -0.26743335, -0.09074122, -0.2227112 ,  0.02090477,\n        -0.05904209, -0.16961981, -0.02875187,  0.2995954 , -0.0249426 ,\n         0.01004026, -0.04931906,  0.04971322,  0.28176296,  0.19337103,\n         0.11224869,  0.06871963,  0.07456426,  0.12216929, -0.04086405,\n        -0.29390487, -0.19555901,  0.2699275 ,  0.01890202, -0.25616774,\n         0.04987781,  0.26129004, -0.29883513, -0.21289697, -0.12594265,\n         0.0126926 , -0.07375361, -0.03475064, -0.30828732,  0.14808287,\n         0.2775668 ,  0.19329055, -0.22393112, -0.25491226,  0.13131432,\n         0.00710202,  0.12963155, -0.3090024 , -0.01885445,  0.22301763],\n       dtype=float32),\n 'Layer 3': array([ 0.19455571,  0.12364562, -0.2711233 ,  0.2728095 ,  0.11085409,\n         0.24458633, -0.13908438,  0.07495222,  0.34520328,  0.23782092,\n         0.28354865, -0.07424083,  0.26936427, -0.2769144 ,  0.03057847,\n        -0.19906998, -0.08245403, -0.09054411,  0.02645254,  0.32178298,\n         0.17503859, -0.00149773,  0.2509683 , -0.1811804 ,  0.18221132,\n        -0.03278595, -0.06152213,  0.0413917 , -0.27085608,  0.04085568,\n         0.11887809,  0.302264  ], dtype=float32),\n 'Layer 6': array([ 0.4752962 , -0.24824601,  0.22039747,  0.19587505,  0.13966405,\n         0.39540154, -0.20208222,  0.13140953,  0.00280607, -0.3760708 ,\n        -0.12140697, -0.33391154,  0.22107768,  0.04494798,  0.04898232,\n        -0.15168536], dtype=float32),\n 'Layer 9': array([ 0.07573527, -0.22145915, -0.30541402,  0.03821951, -0.3709231 ,\n        -0.3758251 , -0.3254385 , -0.1698224 ], dtype=float32),\n 'Layer 12': array([0.2738903, 0.5417278], dtype=float32)}\n\n\n\nvisualize_activations(model, fun_control=fun_control, batch_size=batch_size, device = \"cpu\", cmap=\"BlueWhiteRed\", absolute=False)\n\nnet: NetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=8, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.01, inplace=False)\n    (3): Linear(in_features=8, out_features=4, bias=True)\n    (4): ReLU()\n    (5): Dropout(p=0.01, inplace=False)\n    (6): Linear(in_features=4, out_features=4, bias=True)\n    (7): ReLU()\n    (8): Dropout(p=0.01, inplace=False)\n    (9): Linear(in_features=4, out_features=2, bias=True)\n    (10): ReLU()\n    (11): Dropout(p=0.01, inplace=False)\n    (12): Linear(in_features=2, out_features=1, bias=True)\n  )\n)\n128 values in Layer 0.\n16 padding values added.\n144 values now in Layer 0.\n\n\n\n\n\n\n\n\n\n64 values in Layer 3.\n64 values now in Layer 3.\n\n\n\n\n\n\n\n\n\n64 values in Layer 6.\n64 values now in Layer 6.\n\n\n\n\n\n\n\n\n\n32 values in Layer 9.\n4 padding values added.\n36 values now in Layer 9.\n\n\n\n\n\n\n\n\n\n16 values in Layer 12.\n16 values now in Layer 12.\n\n\n\n\n\n\n\n\n\n\nvisualize_weights_distributions(model, color=f\"C{0}\")\n\nn:5\n\n\n\n\n\n\n\n\n\n\nvisualize_gradient_distributions(model, fun_control, batch_size=batch_size, color=f\"C{0}\")\n\nn:5\n\n\n\n\n\n\n\n\n\n\nvisualize_weights(model, absolute=True, cmap=\"gray\", figsize=(6, 6))\n\n80 values in Layer Layer 0.\n1 padding values added.\n81 values now in Layer Layer 0.\n\n\n\n\n\n\n\n\n\n32 values in Layer Layer 3.\n4 padding values added.\n36 values now in Layer Layer 3.\n\n\n\n\n\n\n\n\n\n16 values in Layer Layer 6.\n16 values now in Layer Layer 6.\n\n\n\n\n\n\n\n\n\n8 values in Layer Layer 9.\n1 padding values added.\n9 values now in Layer Layer 9.\n\n\n\n\n\n\n\n\n\n2 values in Layer Layer 12.\n2 padding values added.\n4 values now in Layer Layer 12.\n\n\n\n\n\n\n\n\n\n\nvisualize_gradients(model, fun_control, batch_size, absolute=True, cmap=\"BlueWhiteRed\", figsize=(6, 6))\n\n80 values in Layer layers.0.weight.\n1 padding values added.\n81 values now in Layer layers.0.weight.\n\n\n\n\n\n\n\n\n\n32 values in Layer layers.3.weight.\n4 padding values added.\n36 values now in Layer layers.3.weight.\n\n\n\n\n\n\n\n\n\n16 values in Layer layers.6.weight.\n16 values now in Layer layers.6.weight.\n\n\n\n\n\n\n\n\n\n8 values in Layer layers.9.weight.\n1 padding values added.\n9 values now in Layer layers.9.weight.\n\n\n\n\n\n\n\n\n\n2 values in Layer layers.12.weight.\n2 padding values added.\n4 values now in Layer layers.12.weight.\n\n\n\n\n\n\n\n\n\n\nvisualize_activations(model, fun_control=fun_control, batch_size=batch_size, device = \"cpu\")\n\nnet: NetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=8, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.01, inplace=False)\n    (3): Linear(in_features=8, out_features=4, bias=True)\n    (4): ReLU()\n    (5): Dropout(p=0.01, inplace=False)\n    (6): Linear(in_features=4, out_features=4, bias=True)\n    (7): ReLU()\n    (8): Dropout(p=0.01, inplace=False)\n    (9): Linear(in_features=4, out_features=2, bias=True)\n    (10): ReLU()\n    (11): Dropout(p=0.01, inplace=False)\n    (12): Linear(in_features=2, out_features=1, bias=True)\n  )\n)\n128 values in Layer 0.\n16 padding values added.\n144 values now in Layer 0.\n\n\n\n\n\n\n\n\n\n64 values in Layer 3.\n64 values now in Layer 3.\n\n\n\n\n\n\n\n\n\n64 values in Layer 6.\n64 values now in Layer 6.\n\n\n\n\n\n\n\n\n\n32 values in Layer 9.\n4 padding values added.\n36 values now in Layer 9.\n\n\n\n\n\n\n\n\n\n16 values in Layer 12.\n16 values now in Layer 12.\n\n\n\n\n\n\n\n\n\n\nvisualize_activations(model, fun_control=fun_control, batch_size=batch_size, device = \"cpu\")\n\nnet: NetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=8, bias=True)\n    (1): ReLU()\n    (2): Dropout(p=0.01, inplace=False)\n    (3): Linear(in_features=8, out_features=4, bias=True)\n    (4): ReLU()\n    (5): Dropout(p=0.01, inplace=False)\n    (6): Linear(in_features=4, out_features=4, bias=True)\n    (7): ReLU()\n    (8): Dropout(p=0.01, inplace=False)\n    (9): Linear(in_features=4, out_features=2, bias=True)\n    (10): ReLU()\n    (11): Dropout(p=0.01, inplace=False)\n    (12): Linear(in_features=2, out_features=1, bias=True)\n  )\n)\n128 values in Layer 0.\n16 padding values added.\n144 values now in Layer 0.\n\n\n\n\n\n\n\n\n\n64 values in Layer 3.\n64 values now in Layer 3.\n\n\n\n\n\n\n\n\n\n64 values in Layer 6.\n64 values now in Layer 6.\n\n\n\n\n\n\n\n\n\n32 values in Layer 9.\n4 padding values added.\n36 values now in Layer 9.\n\n\n\n\n\n\n\n\n\n16 values in Layer 12.\n16 values now in Layer 12.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Explainable AI with SpotPython and Pytorch</span>"
    ]
  },
  {
    "objectID": "603_spot_lightning_transformer_introduction.html",
    "href": "603_spot_lightning_transformer_introduction.html",
    "title": "28  HPT PyTorch Lightning Transformer: Introduction",
    "section": "",
    "text": "28.1 Transformer Basics",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>HPT PyTorch Lightning Transformer: Introduction</span>"
    ]
  },
  {
    "objectID": "603_spot_lightning_transformer_introduction.html#sec-transformer-basics",
    "href": "603_spot_lightning_transformer_introduction.html#sec-transformer-basics",
    "title": "28  HPT PyTorch Lightning Transformer: Introduction",
    "section": "",
    "text": "28.1.1 Embedding\nWord embedding is a technique where words or phrases (so-called tokens) from the vocabulary are mapped to vectors of real numbers. These vectors capture the semantic properties of the words. Words that are similar in meaning are mapped to vectors that are close to each other in the vector space, and words that are dissimilar are mapped to vectors that are far apart. Word embeddings are needed for transformers for several reasons:\n\nDimensionality Reduction: Word embeddings reduce the dimensionality of the data. Instead of dealing with high-dimensional sparse vectors (like one-hot encoded vectors), we deal with dense vectors of much lower dimensionality.\nCapturing Semantic Similarities: Word embeddings capture semantic similarities between words. This is crucial for tasks like text classification, sentiment analysis, etc., where the meaning of the words is important.\nHandling Unknown Words: If a word is not present in the training data but appears in the test data, one-hot encoding cannot handle it. But word embeddings can handle such situations by mapping the unknown word to a vector that is similar to known words.\nInput to Neural Networks: Transformers, like other neural networks, work with numerical data. Word embeddings provide a way to convert text data into numerical form that can be fed into these networks.\n\nIn the context of transformers, word embeddings are used as the initial input representation. The transformer then learns more complex representations by considering the context in which each token appears.\n\n28.1.1.1 Neural Network for Embeddings\nIdea for word embeddings: use a relatively simple NN that has one input for every token (word, symbol) in the vocabulary. The output of the NN is a vector of a fixed size, which is the word embedding. The network that is used in this chapter is visualized in Figure 28.1. For simplicity, a 2-dimensional output vector is used in this visualization. The weights of the NN are randomly initialized, and are learned during training.\n\n\n\n\n\n\nFigure 28.1: Transformer. Computation of the self attention. In this example, we consider two inputs, i.e., (1,0) and (0,1). For each input, there are two values, which results in a \\(2 \\times 2\\) matrix. In general, when there are \\(T\\) inputs, a \\(T \\times T\\) matrix will be generated. Figure credits: Starmer, Josh: Decoder-Only Transformers, ChatGPTs specific Transformer, Clearly Explained.\n\n\n\nAll tokens are embedded in this way. For each token there are two numerical values, the embedding vector. The same network is used for embedding all tokens. If a longer input is added, it can be embedded with the same net.\n\n\n28.1.1.2 Positional Encoding for the Embeddings\nPositional encoding is added to the input embeddings to give the model some information about the relative or absolute position of the tokens in the sequence. The positional encodings have the same dimension as the embeddings so that the two can be summed.\nIf a token occurs several times, it is embedded several times and receives different embedding vectors, as the position is taken into account by the positional encoding.\n\n\n\n28.1.2 Attention\nAttention describes how similar is each token to itself and to all other tokens in the input, e.g., in a sentence. The attention mechanism can be implemented as a set of layers in neural networks. There are a lot of different possible definitions of “attention” in the literature, but the one we will use here is the following: the attention mechanism describes a weighted average of (sequence) elements with the weights dynamically computed based on an input query and elements’ keys (Lippe 2022).\nThe goal is to take an average over the features of multiple elements. However, instead of weighting each element equally, we want to weight them depending on their actual values. In other words, we want to dynamically decide on which inputs we want to “attend” more than others.\nCalculation of the self-attention:\n\nQueries: Calculate two new values from the (two) values of the embedding vector using an NN, which are referred to as query values.\nKeys: Calculate two new values, called key values, from the (two) values of the embedding vector using an NN.\nDot product: Calculate the dot product of the query values and the key values. This is a measure of the similarity of the query and key values.\nSoftmax: Apply the softmax function to the outputs from the dot product. This is a measure of the attention that a token pays to other tokens.\nValues: Calculate two new values from the (two) values of the embedding vector using an NN, which are referred to as value values.\nThe values are multiplied (weighted) by the values of the softmax function.\nThe weighted values are summed. Now we have the self attention value for the token.\n\n\n\n28.1.3 Self-Attention\nMost attention mechanisms differ in terms of what queries they use, how the key and value vectors are defined, and what score function is used. The attention applied inside the Transformer architecture is called “self-attention”. In self-attention, each sequence element provides a key, value, and query. For each element, we perform an attention layer where based on its query, we check the similarity of the all sequence elements’ keys, and returned a different, averaged value vector for each element.\n\n\n28.1.4 Masked Self-Attention\nMasked self-attention is a variant of the self-attention method described in Section 28.1.3. It asks the question: How similar is each token to itself and to all preceding tokens in the input (sentence)? Masked self-attention is an autoregressive mechanism, which means that the attention mechanism is only allowed to look at the tokens that have already been processed. Calculation of the mask self-attention is identical to the self-attention, but the attention is only calculated for the tokens that have already been processed. If the masked self-attention method is applied to the first token, the masked self-attention value is exactly the value of the first token, as it only takes itself into account. For the other tokens, the masked self-attention value is a weighted sum of the values of the previous tokens. The weighting is determined by the similarity of the query values and the key values (dot product and softmax).\n\n\n28.1.5 Generation of Outputs\nTo calculate the output, we use a residual connector that adds the output of the neural network and the output of the masked self-attention method. We thus obtain the residual connection values. The residual connector is used to facilitate training.\nTo generate the next token, we use another neural network that calculates the output from the (two) residual connection values. The input layer of the neural network has the size of the residual connection values, the output layer has the number of tokens in the vocabulary as a dimension.\nIf we now enter the residual connection value of the first token, we receive the token (or the probabilities using Softmax) that is to come next as the output of the neural network. This makes sense even if we already know the second token (as with the first token): We can use it to calculate the error of the neural network and train the network. In addition, the decoder-transformer uses the masked self-attention method to calculate the output, i.e. the encoding and generation of new tokens is done with exactly the same elements of the network.\nNote: ChatGPT does not use a new neural network, but the same network that was already used to calculate the embedding. The network is therefore used for embedding, masked self-attention and calculating the output. In the last calculation, the network is inverted, i.e. it is run in the opposite direction to obtain the tokens and not the embeddings as in the original run.\n\n\n28.1.6 End-Of-Sequence-Token\nThe end-of-sequence token is used to signal the end of the input and also to start generating new tokens after the input. The EOS token recognizes all other tokens, as it comes after all tokens. When generating tokens, it is important to consider the relationships between the input tokens and the generation of new tokens.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>HPT PyTorch Lightning Transformer: Introduction</span>"
    ]
  },
  {
    "objectID": "603_spot_lightning_transformer_introduction.html#sec-details-implementation",
    "href": "603_spot_lightning_transformer_introduction.html#sec-details-implementation",
    "title": "28  HPT PyTorch Lightning Transformer: Introduction",
    "section": "28.2 Details of the Implementation",
    "text": "28.2 Details of the Implementation\nWe will now go into a bit more detail by first looking at the specific implementation of the attention mechanism which is in the Transformer case the (scaled) dot product attention. The variables shown in Table 28.1 are used in the Transformer architecture.\n\n\n\nTable 28.1: Variables used in the Transformer architecture.\n\n\n\n\n\n\n\n\n\n\nSymbol\nVariable\nDescription\n\n\n\n\n\\(Q\\)\nquery\nThe query vectors.\n\n\n\\(K\\)\nkey\nThe key vectors.\n\n\n\\(V\\)\nvalue\nThe value vectors.\n\n\n\\(d_{\\text{model}}\\)\nd_model\nThe dimensionality of the input and output features of the Transformer.\n\n\n\\(d_k\\)\nd_k\nThe hidden dimensionality of the key and query vectors.\n\n\n\\(d_v\\)\nd_v\nThe hidden dimensionality of the value vectors.\n\n\n\\(h\\)\nnum_heads\nThe number of heads in the Multi-Head Attention layer.\n\n\n\\(B\\)\nbatch_size\nThe batch size.\n\n\n\\(T\\)\nseq_length\nThe sequence length.\n\n\n\\(X\\)\nx\nThe input features (input elements in the sequence).\n\n\n\\(W^{Q}\\)\nqkv_proj\nThe weight matrix to transform the input to the query vectors.\n\n\n\\(W^{K}\\)\nqkv_proj\nThe weight matrix to transform the input to the key vectors.\n\n\n\\(W^{V}\\)\nqkv_proj\nThe weight matrix to transform the input to the value vectors.\n\n\n\\(W^{O}\\)\no_proj\nThe weight matrix to transform the concatenated output of the Multi-Head Attention layer to the final output.\n\n\n\\(N\\)\nnum_layers\nThe number of layers in the Transformer.\n\n\n\\(PE_{(pos,i)}\\)\npositional_encoding\nThe positional encoding for position \\(pos\\) and hidden dimensionality \\(i\\).\n\n\n\n\n\n\nSummarizing the ideas from Section 28.1, an attention mechanism has usually four parts we need to specify (Lippe 2022):\n\nQuery: The query is a feature vector that describes what we are looking for in the sequence, i.e., what would we maybe want to pay attention to.\nKeys: For each input element, we have a key which is again a feature vector. This feature vector roughly describes what the element is “offering”, or when it might be important. The keys should be designed such that we can identify the elements we want to pay attention to based on the query.\nScore function: To rate which elements we want to pay attention to, we need to specify a score function \\(f_{attn}\\). The score function takes the query and a key as input, and output the score/attention weight of the query-key pair. It is usually implemented by simple similarity metrics like a dot product, or a small MLP.\nValues: For each input element, we also have a value vector. This feature vector is the one we want to average over.\n\nThe weights of the average are calculated by a softmax over all score function outputs. Hence, we assign those value vectors a higher weight whose corresponding key is most similar to the query. If we try to describe it with pseudo-math, we can write:\n\\[\n\\alpha_i = \\frac{\\exp\\left(f_{attn}\\left(\\text{key}_i, \\text{query}\\right)\\right)}{\\sum_j \\exp\\left(f_{attn}\\left(\\text{key}_j, \\text{query}\\right)\\right)}, \\hspace{5mm} \\text{out} = \\sum_i \\alpha_i \\cdot \\text{value}_i\n\\]\nVisually, we can show the attention over a sequence of words as follows:\n\n\n\nAttention over a sequence of words. For every word, we have one key and one value vector. The query is compared to all keys with a score function (in this case the dot product) to determine the weights. The softmax is not visualized for simplicity. Finally, the value vectors of all words are averaged using the attention weights. Figure taken from Lippe (2022)\n\n\n\n28.2.1 Dot Product Attention\nOur goal is to have an attention mechanism with which any element in a sequence can attend to any other while still being efficient to compute. The dot product attention takes as input a set of queries \\(Q\\in\\mathbb{R}^{T\\times d_k}\\), keys \\(K\\in\\mathbb{R}^{T\\times d_k}\\) and values \\(V\\in\\mathbb{R}^{T\\times d_v}\\) where \\(T\\) is the sequence length, and \\(d_k\\) and \\(d_v\\) are the hidden dimensionality for queries/keys and values respectively. For simplicity, we neglect the batch dimension for now. The attention value from element \\(i\\) to \\(j\\) is based on its similarity of the query \\(Q_i\\) and key \\(K_j\\), using the dot product as the similarity metric (in Figure 28.1, we considered \\(Q_2\\) and \\(K_1\\) as well as \\(Q_2\\) and \\(K_2\\)). The dot product attention is calculated as follows:\n\\[\n\\text{Attention}(Q,K,V)=\\text{softmax}\\left(QK^T\\right) V\n\\tag{28.1}\\]\nThe matrix multiplication \\(QK^T\\) performs the dot product for every possible pair of queries and keys, resulting in a matrix of the shape \\(T\\times T\\). Each row represents the attention logits for a specific element \\(i\\) to all other elements in the sequence. On these, we apply a softmax and multiply with the value vector to obtain a weighted mean (the weights being determined by the attention).\n\n\n28.2.2 Scaled Dot Product Attention\nAn additional aspect is the scaling of the dot product using a scaling factor of \\(1/\\sqrt{d_k}\\). This scaling factor is crucial to maintain an appropriate variance of attention values after initialization. We initialize our layers with the intention of having equal variance throughout the model, and hence, \\(Q\\) and \\(K\\) might also have a variance close to \\(1\\). However, performing a dot product over two vectors with a variance \\(\\sigma^2\\) results in a scalar having \\(d_k\\)-times higher variance:\n\\[\nq_i \\sim \\mathcal{N}(0,\\sigma^2), k_i \\sim \\mathcal{N}(0,\\sigma^2) \\to \\text{Var}\\left(\\sum_{i=1}^{d_k} q_i\\cdot k_i\\right) = \\sigma^4\\cdot d_k\n\\]\nIf we do not scale down the variance back to \\(\\sim\\sigma^2\\), the softmax over the logits will already saturate to \\(1\\) for one random element and \\(0\\) for all others. The gradients through the softmax will be close to zero so that we can’t learn the parameters appropriately. Note that the extra factor of \\(\\sigma^2\\), i.e., having \\(\\sigma^4\\) instead of \\(\\sigma^2\\), is usually not an issue, since we keep the original variance \\(\\sigma^2\\) close to \\(1\\) anyways. Equation 28.1 can be modified as follows to calculate the dot product attention:\n\\[\n\\text{Attention}(Q,K,V)=\\text{softmax}\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right) V.\n\\]\nAnother perspective on this scaled dot product attention mechanism offers the computation graph which is visualized in Figure 28.2.\n\n\n\n\n\n\nFigure 28.2: Scaled dot product attention. Figure credit Vaswani et al. (2017)\n\n\n\nThe block Mask (opt.) in the diagram above represents the optional masking of specific entries in the attention matrix. This is for instance used if we stack multiple sequences with different lengths into a batch. To still benefit from parallelization in PyTorch, we pad the sentences to the same length and mask out the padding tokens during the calculation of the attention values. This is usually done by setting the respective attention logits to a very low value.\nAfter we have discussed the details of the scaled dot product attention block, we can write a function below which computes the output features given the triple of queries, keys, and values:",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>HPT PyTorch Lightning Transformer: Introduction</span>"
    ]
  },
  {
    "objectID": "603_spot_lightning_transformer_introduction.html#sec-transformer-in-lightning",
    "href": "603_spot_lightning_transformer_introduction.html#sec-transformer-in-lightning",
    "title": "28  HPT PyTorch Lightning Transformer: Introduction",
    "section": "28.3 Example: Transformer in Lightning",
    "text": "28.3 Example: Transformer in Lightning\nThe following code is based on https://github.com/phlippe/uvadlc_notebooks/tree/master (Author: Phillip Lippe)\nFirst, we import the necessary libraries and download the pretrained models.\n\nimport os\nimport numpy as np\nimport random\nimport math\nimport json\nfrom functools import partial\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import to_rgb\nimport matplotlib\nimport seaborn as sns\n\n## tqdm for loading bars\nfrom tqdm.notebook import tqdm\n\n## PyTorch\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.utils.data as data\nimport torch.optim as optim\n\n# PyTorch Lightning\nimport pytorch_lightning as pl\nfrom pytorch_lightning.callbacks import LearningRateMonitor, ModelCheckpoint\n\n\n# Path to the folder where the pretrained models are saved\nCHECKPOINT_PATH = \"../saved_models/tutorial6\"\n\n# Ensure that all operations are deterministic on GPU (if used) for reproducibility\ntorch.backends.cudnn.deterministic = True\ntorch.backends.cudnn.benchmark = False\n\n\nfrom spotpython.utils.device import getDevice\ndevice = getDevice()\nprint(\"Device:\", device)\n\nDevice: mps\n\n\n\n# Setting the seed\npl.seed_everything(42)\n\n42\n\n\nTwo pre-trained models are downloaded below. Make sure to have adjusted your CHECKPOINT_PATH before running this code if not already done.\n\nimport urllib.request\nfrom urllib.error import HTTPError\n# Github URL where saved models are stored for this tutorial\nbase_url = \"https://raw.githubusercontent.com/phlippe/saved_models/main/tutorial6/\"\n# Files to download\npretrained_files = [\"ReverseTask.ckpt\", \"SetAnomalyTask.ckpt\"]\n\n# Create checkpoint path if it doesn't exist yet\nos.makedirs(CHECKPOINT_PATH, exist_ok=True)\n\n\n28.3.1 Downloading the Pretrained Models\n\n# For each file, check whether it already exists. If not, try downloading it.\nfor file_name in pretrained_files:\n    file_path = os.path.join(CHECKPOINT_PATH, file_name)\n    if \"/\" in file_name:\n        os.makedirs(file_path.rsplit(\"/\",1)[0], exist_ok=True)\n    if not os.path.isfile(file_path):\n        file_url = base_url + file_name\n        print(f\"Downloading {file_url}...\")\n        try:\n            urllib.request.urlretrieve(file_url, file_path)\n        except HTTPError as e:\n            print(\"Error:\\n\", e)\n\n\n\n28.3.2 The Transformer Architecture\nWe will implement the Transformer architecture by hand. As the architecture is so popular, there already exists a Pytorch module nn.Transformer (documentation) and a tutorial on how to use it for next token prediction. However, we will implement it here ourselves, to get through to the smallest details.\n\n\n28.3.3 Attention Mechanism\n\ndef scaled_dot_product(q, k, v, mask=None):\n    \"\"\"\n    Compute scaled dot product attention.\n    Args:\n        q: Queries\n        k: Keys\n        v: Values\n        mask: Mask to apply to the attention logits\n\n    Returns:\n        Tuple of (Values, Attention weights)\n\n    Examples:\n    &gt;&gt;&gt; seq_len, d_k = 1, 2\n        pl.seed_everything(42)\n        q = torch.randn(seq_len, d_k)\n        k = torch.randn(seq_len, d_k)\n        v = torch.randn(seq_len, d_k)\n        values, attention = scaled_dot_product(q, k, v)\n        print(\"Q\\n\", q)\n        print(\"K\\n\", k)\n        print(\"V\\n\", v)\n        print(\"Values\\n\", values)\n        print(\"Attention\\n\", attention)\n    \"\"\"\n    d_k = q.size()[-1]\n    attn_logits = torch.matmul(q, k.transpose(-2, -1))\n    attn_logits = attn_logits / math.sqrt(d_k)\n    if mask is not None:\n        attn_logits = attn_logits.masked_fill(mask == 0, -9e15)\n    attention = F.softmax(attn_logits, dim=-1)\n    values = torch.matmul(attention, v)\n    return values, attention\n\nNote that our code above supports any additional dimensionality in front of the sequence length so that we can also use it for batches. However, for a better understanding, let’s generate a few random queries, keys, and value vectors, and calculate the attention outputs:\n\nseq_len, d_k = 1, 2\npl.seed_everything(42)\nq = torch.randn(seq_len, d_k)\nk = torch.randn(seq_len, d_k)\nv = torch.randn(seq_len, d_k)\nvalues, attention = scaled_dot_product(q, k, v)\nprint(\"Q\\n\", q)\nprint(\"K\\n\", k)\nprint(\"V\\n\", v)\nprint(\"Values\\n\", values)\nprint(\"Attention\\n\", attention)\n\nQ\n tensor([[0.3367, 0.1288]])\nK\n tensor([[0.2345, 0.2303]])\nV\n tensor([[-1.1229, -0.1863]])\nValues\n tensor([[-1.1229, -0.1863]])\nAttention\n tensor([[1.]])\n\n\n\n\n28.3.4 Multi-Head Attention\nThe scaled dot product attention allows a network to attend over a sequence. However, often there are multiple different aspects a sequence element wants to attend to, and a single weighted average is not a good option for it. This is why we extend the attention mechanisms to multiple heads, i.e. multiple different query-key-value triplets on the same features. Specifically, given a query, key, and value matrix, we transform those into \\(h\\) sub-queries, sub-keys, and sub-values, which we pass through the scaled dot product attention independently. Afterward, we concatenate the heads and combine them with a final weight matrix. Mathematically, we can express this operation as:\n\\[\n\\begin{split}\n    \\text{Multihead}(Q,K,V) & = \\text{Concat}(\\text{head}_1,...,\\text{head}_h)W^{O}\\\\\n    \\text{where } \\text{head}_i & = \\text{Attention}(QW_i^Q,KW_i^K, VW_i^V)\n\\end{split}\n\\]\nWe refer to this as Multi-Head Attention layer with the learnable parameters \\(W_{1...h}^{Q}\\in\\mathbb{R}^{D\\times d_k}\\), \\(W_{1...h}^{K}\\in\\mathbb{R}^{D\\times d_k}\\), \\(W_{1...h}^{V}\\in\\mathbb{R}^{D\\times d_v}\\), and \\(W^{O}\\in\\mathbb{R}^{h\\cdot d_v\\times d_{out}}\\) (\\(D\\) being the input dimensionality). Expressed in a computational graph, we can visualize it as in Figure 28.3.\n\n\n\n\n\n\nFigure 28.3: Multi-Head Attention. Figure taken from Vaswani et al. (2017)\n\n\n\nHow are we applying a Multi-Head Attention layer in a neural network, where we do not have an arbitrary query, key, and value vector as input? Looking at the computation graph in Figure 28.3, a simple but effective implementation is to set the current feature map in a NN, \\(X\\in\\mathbb{R}^{B\\times T\\times d_{\\text{model}}}\\), as \\(Q\\), \\(K\\) and \\(V\\) (\\(B\\) being the batch size, \\(T\\) the sequence length, \\(d_{\\text{model}}\\) the hidden dimensionality of \\(X\\)). The consecutive weight matrices \\(W^{Q}\\), \\(W^{K}\\), and \\(W^{V}\\) can transform \\(X\\) to the corresponding feature vectors that represent the queries, keys, and values of the input. Using this approach, we can implement the Multi-Head Attention module below.\nAs a consequence, if the embedding dimension is 4, then 1, 2 or 4 heads can be used, but not 3. If 4 heads are used, then the dimension of the query, key and value vectors is 1. If 2 heads are used, then the dimension of the query, key and value vectors is \\(D=2\\). If 1 head is used, then the dimension of the query, key and value vectors is \\(D=4\\). The number of heads is a hyperparameter that can be adjusted. The number of heads is usually 8 or 16.\n\n# Helper function to support different mask shapes.\n# Output shape supports (batch_size, number of heads, seq length, seq length)\n# If 2D: broadcasted over batch size and number of heads\n# If 3D: broadcasted over number of heads\n# If 4D: leave as is\ndef expand_mask(mask):\n    assert mask.ndim &gt;= 2, \"Mask must be &gt;= 2-dim. with seq_length x seq_length\"\n    if mask.ndim == 3:\n        mask = mask.unsqueeze(1)\n    while mask.ndim &lt; 4:\n        mask = mask.unsqueeze(0)\n    return mask\n\n\nclass MultiheadAttention(nn.Module):\n    \n    def __init__(self, input_dim, embed_dim, num_heads):\n        super().__init__()\n        assert embed_dim % num_heads == 0, \"Embedding dim. must be 0 modulo number of heads.\"\n        \n        self.embed_dim = embed_dim\n        self.num_heads = num_heads\n        self.head_dim = embed_dim // num_heads\n        \n        # Stack all weight matrices 1...h together for efficiency\n        # Note that in many implementations you see \"bias=False\" which is optional\n        self.qkv_proj = nn.Linear(input_dim, 3*embed_dim)\n        self.o_proj = nn.Linear(embed_dim, embed_dim)\n        \n        self._reset_parameters()\n\n    def _reset_parameters(self):\n        # Original Transformer initialization, see PyTorch documentation\n        nn.init.xavier_uniform_(self.qkv_proj.weight)\n        self.qkv_proj.bias.data.fill_(0)\n        nn.init.xavier_uniform_(self.o_proj.weight)\n        self.o_proj.bias.data.fill_(0)\n\n    def forward(self, x, mask=None, return_attention=False):\n        batch_size, seq_length, _ = x.size()\n        if mask is not None:\n            mask = expand_mask(mask)\n        qkv = self.qkv_proj(x)\n        \n        # Separate Q, K, V from linear output\n        qkv = qkv.reshape(batch_size, seq_length, self.num_heads, 3*self.head_dim)\n        qkv = qkv.permute(0, 2, 1, 3) # [Batch, Head, SeqLen, Dims]\n        q, k, v = qkv.chunk(3, dim=-1)\n        \n        # Determine value outputs\n        values, attention = scaled_dot_product(q, k, v, mask=mask)\n        values = values.permute(0, 2, 1, 3) # [Batch, SeqLen, Head, Dims]\n        values = values.reshape(batch_size, seq_length, self.embed_dim)\n        o = self.o_proj(values)\n        \n        if return_attention:\n            return o, attention\n        else:\n            return o\n\n\n\n28.3.5 Permutation Equivariance\nOne crucial characteristic of the multi-head attention is that it is permutation-equivariant with respect to its inputs. This means that if we switch two input elements in the sequence, e.g. \\(X_1\\leftrightarrow X_2\\) (neglecting the batch dimension for now), the output is exactly the same besides the elements 1 and 2 switched. Hence, the multi-head attention is actually looking at the input not as a sequence, but as a set of elements. This property makes the multi-head attention block and the Transformer architecture so powerful and widely applicable! But what if the order of the input is actually important for solving the task, like language modeling? The answer is to encode the position in the input features, which we will take a closer look in Section 28.3.8.\n\n\n28.3.6 Transformer Encoder\nNext, we will look at how to apply the multi-head attention block inside the Transformer architecture. Originally, the Transformer model was designed for machine translation. Hence, it got an encoder-decoder structure where the encoder takes as input the sentence in the original language and generates an attention-based representation. On the other hand, the decoder attends over the encoded information and generates the translated sentence in an autoregressive manner, as in a standard RNN. While this structure is extremely useful for Sequence-to-Sequence tasks with the necessity of autoregressive decoding, we will focus here on the encoder part. Many advances in NLP have been made using pure encoder-based Transformer models (if interested, models include the BERT-family (Devlin et al. 2018), the Vision Transformer (Dosovitskiy et al. 2020), and more). We will also mainly focus on the encoder part. If you have understood the encoder architecture, the decoder is a very small step to implement as well. The full Transformer architecture looks as shown in Figure 28.4.\n\n\n\n\n\n\nFigure 28.4: Transformer architecture. Figure credit: Vaswani et al. (2017)\n\n\n\nThe encoder consists of \\(N\\) identical blocks that are applied in sequence. Taking as input \\(x\\), it is first passed through a Multi-Head Attention block as we have implemented above. The output is added to the original input using a residual connection, and we apply a consecutive Layer Normalization on the sum. Overall, it calculates \\[\n\\text{LayerNorm}(x+\\text{Multihead}(x,x,x))\n\\] (\\(x\\) being \\(Q\\), \\(K\\) and \\(V\\) input to the attention layer). The residual connection is crucial in the Transformer architecture for two reasons:\n\nSimilar to ResNets, Transformers are designed to be very deep. Some models contain more than 24 blocks in the encoder. Hence, the residual connections are crucial for enabling a smooth gradient flow through the model.\nWithout the residual connection, the information about the original sequence is lost. Remember that the Multi-Head Attention layer ignores the position of elements in a sequence, and can only learn it based on the input features. Removing the residual connections would mean that this information is lost after the first attention layer (after initialization), and with a randomly initialized query and key vector, the output vectors for position \\(i\\) has no relation to its original input. All outputs of the attention are likely to represent similar/same information, and there is no chance for the model to distinguish which information came from which input element. An alternative option to residual connection would be to fix at least one head to focus on its original input, but this is very inefficient and does not have the benefit of the improved gradient flow.\n\n\n\n28.3.7 Layer Normalization and Feed-Forward Network\nThe Layer Normalization also plays an important role in the Transformer architecture as it enables faster training and provides small regularization. Additionally, it ensures that the features are in a similar magnitude among the elements in the sequence.\nWe are not using Batch Normalization because it depends on the batch size which is often small with Transformers (they require a lot of GPU memory), and BatchNorm has shown to perform particularly bad in language as the features of words tend to have a much higher variance (there are many, very rare words which need to be considered for a good distribution estimate).\nAdditionally to the Multi-Head Attention, a small fully connected feed-forward network is added to the model, which is applied to each position separately and identically. Specifically, the model uses a Linear\\(\\to\\)ReLU\\(\\to\\)Linear MLP. The full transformation including the residual connection can be expressed as:\n\\[\n\\begin{split}\n    \\text{FFN}(x) & = \\max(0, xW_1+b_1)W_2 + b_2\\\\\n    x & = \\text{LayerNorm}(x + \\text{FFN}(x))\n\\end{split}\n\\]\nThis MLP adds extra complexity to the model and allows transformations on each sequence element separately. You can imagine as this allows the model to “post-process” the new information added by the previous Multi-Head Attention, and prepare it for the next attention block. Usually, the inner dimensionality of the MLP is 2-8\\(\\times\\) larger than \\(d_{\\text{model}}\\), i.e. the dimensionality of the original input \\(x\\). The general advantage of a wider layer instead of a narrow, multi-layer MLP is the faster, parallelizable execution.\nFinally, after looking at all parts of the encoder architecture, we can start implementing it below. We first start by implementing a single encoder block. Additionally to the layers described above, we will add dropout layers in the MLP and on the output of the MLP and Multi-Head Attention for regularization.\n\nclass EncoderBlock(nn.Module):\n    \n    def __init__(self, input_dim, num_heads, dim_feedforward, dropout=0.0):\n        \"\"\"\n        Inputs:\n            input_dim - Dimensionality of the input\n            num_heads - Number of heads to use in the attention block\n            dim_feedforward - Dimensionality of the hidden layer in the MLP\n            dropout - Dropout probability to use in the dropout layers\n        \"\"\"\n        super().__init__()\n        \n        # Attention layer\n        self.self_attn = MultiheadAttention(input_dim, input_dim, num_heads)\n        \n        # Two-layer MLP\n        self.linear_net = nn.Sequential(\n            nn.Linear(input_dim, dim_feedforward),\n            nn.Dropout(dropout),\n            nn.ReLU(inplace=True),\n            nn.Linear(dim_feedforward, input_dim)\n        )\n        \n        # Layers to apply in between the main layers\n        self.norm1 = nn.LayerNorm(input_dim)\n        self.norm2 = nn.LayerNorm(input_dim)\n        self.dropout = nn.Dropout(dropout)\n\n    def forward(self, x, mask=None):\n        # Attention part\n        attn_out = self.self_attn(x, mask=mask)\n        x = x + self.dropout(attn_out)\n        x = self.norm1(x)\n        \n        # MLP part\n        linear_out = self.linear_net(x)\n        x = x + self.dropout(linear_out)\n        x = self.norm2(x)\n        \n        return x\n\nBased on this block, we can implement a module for the full Transformer encoder. Additionally to a forward function that iterates through the sequence of encoder blocks, we also provide a function called get_attention_maps. The idea of this function is to return the attention probabilities for all Multi-Head Attention blocks in the encoder. This helps us in understanding, and in a sense, explaining the model. However, the attention probabilities should be interpreted with a grain of salt as it does not necessarily reflect the true interpretation of the model (there is a series of papers about this, including Jain and Wallace (2019) and Wiegreffe and Pinter (2019)).\n\nclass TransformerEncoder(nn.Module):\n    \n    def __init__(self, num_layers, **block_args):\n        super().__init__()\n        self.layers = nn.ModuleList(\n            [EncoderBlock(**block_args) for _ in range(num_layers)])\n\n    def forward(self, x, mask=None):\n        for l in self.layers:\n            x = l(x, mask=mask)\n        return x\n\n    def get_attention_maps(self, x, mask=None):\n        attention_maps = []\n        for l in self.layers:\n            _, attn_map = l.self_attn(x, mask=mask, return_attention=True)\n            attention_maps.append(attn_map)\n            x = l(x)\n        return attention_maps\n\n\n\n28.3.8 Positional Encoding\nWe have discussed before that the Multi-Head Attention block is permutation-equivariant, and cannot distinguish whether an input comes before another one in the sequence or not. In tasks like language understanding, however, the position is important for interpreting the input words. The position information can therefore be added via the input features. We could learn a embedding for every possible position, but this would not generalize to a dynamical input sequence length. Hence, the better option is to use feature patterns that the network can identify from the features and potentially generalize to larger sequences. The specific pattern chosen by Vaswani et al. (2017) are sine and cosine functions of different frequencies, as follows:\n\\[\nPE_{(pos,i)} = \\begin{cases}\n    \\sin\\left(\\frac{pos}{10000^{i/d_{\\text{model}}}}\\right) & \\text{if}\\hspace{3mm} i \\text{ mod } 2=0\\\\\n    \\cos\\left(\\frac{pos}{10000^{(i-1)/d_{\\text{model}}}}\\right) & \\text{otherwise}\\\\\n\\end{cases}\n\\]\n\\(PE_{(pos,i)}\\) represents the position encoding at position \\(pos\\) in the sequence, and hidden dimensionality \\(i\\). These values, concatenated for all hidden dimensions, are added to the original input features (in the Transformer visualization above, see “Positional encoding”), and constitute the position information. We distinguish between even (\\(i \\text{ mod } 2=0\\)) and uneven (\\(i \\text{ mod } 2=1\\)) hidden dimensionalities where we apply a sine/cosine respectively. The intuition behind this encoding is that you can represent \\(PE_{(pos+k,:)}\\) as a linear function of \\(PE_{(pos,:)}\\), which might allow the model to easily attend to relative positions. The wavelengths in different dimensions range from \\(2\\pi\\) to \\(10000\\cdot 2\\pi\\).\nThe positional encoding is implemented below. The code is taken from the PyTorch tutorial https://pytorch.org/tutorials/beginner/transformer_tutorial.html#define-the-model about Transformers on NLP and adjusted for our purposes.\n\nclass PositionalEncoding(nn.Module):\n\n    def __init__(self, d_model, max_len=5000):\n        \"\"\"\n        Inputs\n            d_model - Hidden dimensionality of the input.\n            max_len - Maximum length of a sequence to expect.\n        \"\"\"\n        super().__init__()\n\n        # Create matrix of [SeqLen, HiddenDim] representing \n        # the positional encoding for max_len inputs\n        pe = torch.zeros(max_len, d_model)\n        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))\n        pe[:, 0::2] = torch.sin(position * div_term)\n        pe[:, 1::2] = torch.cos(position * div_term)\n        pe = pe.unsqueeze(0)\n        \n        # register_buffer =&gt; Tensor which is not a parameter,\n        # but should be part of the modules state.\n        # Used for tensors that need to be on the same device as the module.\n        # persistent=False tells PyTorch to not add the buffer to the \n        # state dict (e.g. when we save the model) \n        self.register_buffer('pe', pe, persistent=False)\n\n    def forward(self, x):\n        x = x + self.pe[:, :x.size(1)]\n        return x\n\nTo understand the positional encoding, we can visualize it below. We will generate an image of the positional encoding over hidden dimensionality and position in a sequence. Each pixel, therefore, represents the change of the input feature we perform to encode the specific position. Let’s do it below.\n\nmatplotlib.rcParams['lines.linewidth'] = 2.0\nplt.set_cmap('cividis')\nencod_block = PositionalEncoding(d_model=48, max_len=96)\npe = encod_block.pe.squeeze().T.cpu().numpy()\n\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(8,3))\npos = ax.imshow(pe, cmap=\"RdGy\", extent=(1,pe.shape[1]+1,pe.shape[0]+1,1))\nfig.colorbar(pos, ax=ax)\nax.set_xlabel(\"Position in sequence\")\nax.set_ylabel(\"Hidden dimension\")\nax.set_title(\"Positional encoding over hidden dimensions\")\nax.set_xticks([1]+[i*10 for i in range(1,1+pe.shape[1]//10)])\nax.set_yticks([1]+[i*10 for i in range(1,1+pe.shape[0]//10)])\nplt.show()\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\nYou can clearly see the sine and cosine waves with different wavelengths that encode the position in the hidden dimensions. Specifically, we can look at the sine/cosine wave for each hidden dimension separately, to get a better intuition of the pattern. Below we visualize the positional encoding for the hidden dimensions \\(1\\), \\(2\\), \\(3\\) and \\(4\\).\n\nsns.set_theme()\nfig, ax = plt.subplots(2, 2, figsize=(12,4))\nax = [a for a_list in ax for a in a_list]\nfor i in range(len(ax)):\n    ax[i].plot(np.arange(1,17), pe[i,:16], color=f'C{i}', marker=\"o\",\n                markersize=6, markeredgecolor=\"black\")\n    ax[i].set_title(f\"Encoding in hidden dimension {i+1}\")\n    ax[i].set_xlabel(\"Position in sequence\", fontsize=10)\n    ax[i].set_ylabel(\"Positional encoding\", fontsize=10)\n    ax[i].set_xticks(np.arange(1,17))\n    ax[i].tick_params(axis='both', which='major', labelsize=10)\n    ax[i].tick_params(axis='both', which='minor', labelsize=8)\n    ax[i].set_ylim(-1.2, 1.2)\nfig.subplots_adjust(hspace=0.8)\nsns.reset_orig()\nplt.show()\n\n\n\n\n\n\n\n\nAs we can see, the patterns between the hidden dimension \\(1\\) and \\(2\\) only differ in the starting angle. The wavelength is \\(2\\pi\\), hence the repetition after position \\(6\\). The hidden dimensions \\(2\\) and \\(3\\) have about twice the wavelength.\n\n\n28.3.9 Learning Rate Warm-up\nOne commonly used technique for training a Transformer is learning rate warm-up. This means that we gradually increase the learning rate from 0 on to our originally specified learning rate in the first few iterations. Thus, we slowly start learning instead of taking very large steps from the beginning. In fact, training a deep Transformer without learning rate warm-up can make the model diverge and achieve a much worse performance on training and testing. Take for instance the following plot by Liu et al. (2019) comparing Adam-vanilla (i.e. Adam without warm-up) vs Adam with a warm-up:\n\n\n\nWarm-up comparison. Figure taken from Liu et al. (2019)\n\n\nClearly, the warm-up is a crucial hyperparameter in the Transformer architecture. Why is it so important? There are currently two common explanations. Firstly, Adam uses the bias correction factors which however can lead to a higher variance in the adaptive learning rate during the first iterations. Improved optimizers like RAdam have been shown to overcome this issue, not requiring warm-up for training Transformers. Secondly, the iteratively applied Layer Normalization across layers can lead to very high gradients during the first iterations, which can be solved by using Pre-Layer Normalization (similar to Pre-Activation ResNet), or replacing Layer Normalization by other techniques (Adaptive Normalization, Power Normalization).\nNevertheless, many applications and papers still use the original Transformer architecture with Adam, because warm-up is a simple, yet effective way of solving the gradient problem in the first iterations. There are many different schedulers we could use. For instance, the original Transformer paper used an exponential decay scheduler with a warm-up. However, the currently most popular scheduler is the cosine warm-up scheduler, which combines warm-up with a cosine-shaped learning rate decay. We can implement it below, and visualize the learning rate factor over epochs.\n\nclass CosineWarmupScheduler(optim.lr_scheduler._LRScheduler):\n    \n    def __init__(self, optimizer, warmup, max_iters):\n        self.warmup = warmup\n        self.max_num_iters = max_iters\n        super().__init__(optimizer)\n        \n    def get_lr(self):\n        lr_factor = self.get_lr_factor(epoch=self.last_epoch)\n        return [base_lr * lr_factor for base_lr in self.base_lrs]\n    \n    def get_lr_factor(self, epoch):\n        lr_factor = 0.5 * (1 + np.cos(np.pi * epoch / self.max_num_iters))\n        if epoch &lt;= self.warmup:\n            lr_factor *= epoch * 1.0 / self.warmup\n        return lr_factor\n\n\n# Needed for initializing the lr scheduler\np = nn.Parameter(torch.empty(4,4))\noptimizer = optim.Adam([p], lr=1e-3)\nlr_scheduler = CosineWarmupScheduler(optimizer=optimizer, warmup=100, max_iters=2000)\n\n# Plotting\nepochs = list(range(2000))\nsns.set()\nplt.figure(figsize=(8,3))\nplt.plot(epochs, [lr_scheduler.get_lr_factor(e) for e in epochs])\nplt.ylabel(\"Learning rate factor\")\nplt.xlabel(\"Iterations (in batches)\")\nplt.title(\"Cosine Warm-up Learning Rate Scheduler\")\nplt.show()\nsns.reset_orig()\n\n\n\n\n\n\n\n\nIn the first 100 iterations, we increase the learning rate factor from 0 to 1, whereas for all later iterations, we decay it using the cosine wave. Pre-implementations of this scheduler can be found in the popular NLP Transformer library huggingface.\n\n\n28.3.10 PyTorch Lightning Module\nFinally, we can embed the Transformer architecture into a PyTorch lightning module. PyTorch Lightning simplifies our training and test code, as well as structures the code nicely in separate functions. We will implement a template for a classifier based on the Transformer encoder. Thereby, we have a prediction output per sequence element. If we would need a classifier over the whole sequence, the common approach is to add an additional [CLS] token to the sequence (CLS stands for classification, i.e., the first token of every sequence is always a special classification token, CLS). However, here we focus on tasks where we have an output per element.\nAdditionally to the Transformer architecture, we add a small input network (maps input dimensions to model dimensions), the positional encoding, and an output network (transforms output encodings to predictions). We also add the learning rate scheduler, which takes a step each iteration instead of once per epoch. This is needed for the warmup and the smooth cosine decay. The training, validation, and test step is left empty for now and will be filled for our task-specific models.\n\nclass TransformerPredictor(pl.LightningModule):\n\n    def __init__(self, input_dim, model_dim, num_classes, num_heads, num_layers, lr, warmup, max_iters, dropout=0.0, input_dropout=0.0):\n        \"\"\"\n        Inputs:\n            input_dim - Hidden dimensionality of the input\n            model_dim - Hidden dimensionality to use inside the Transformer\n            num_classes - Number of classes to predict per sequence element\n            num_heads - Number of heads to use in the Multi-Head Attention blocks\n            num_layers - Number of encoder blocks to use.\n            lr - Learning rate in the optimizer\n            warmup - Number of warmup steps. Usually between 50 and 500\n            max_iters - Number of maximum iterations the model is trained for. This is needed for the CosineWarmup scheduler\n            dropout - Dropout to apply inside the model\n            input_dropout - Dropout to apply on the input features\n        \"\"\"\n        super().__init__()\n        self.save_hyperparameters()\n        self._create_model()\n\n    def _create_model(self):\n        # Input dim -&gt; Model dim\n        self.input_net = nn.Sequential(\n            nn.Dropout(self.hparams.input_dropout),\n            nn.Linear(self.hparams.input_dim, self.hparams.model_dim)\n        )\n        # Positional encoding for sequences\n        self.positional_encoding = PositionalEncoding(d_model=self.hparams.model_dim)\n        # Transformer\n        self.transformer = TransformerEncoder(num_layers=self.hparams.num_layers,\n                                              input_dim=self.hparams.model_dim,\n                                              dim_feedforward=2*self.hparams.model_dim,\n                                              num_heads=self.hparams.num_heads,\n                                              dropout=self.hparams.dropout)\n        # Output classifier per sequence lement\n        self.output_net = nn.Sequential(\n            nn.Linear(self.hparams.model_dim, self.hparams.model_dim),\n            nn.LayerNorm(self.hparams.model_dim),\n            nn.ReLU(inplace=True),\n            nn.Dropout(self.hparams.dropout),\n            nn.Linear(self.hparams.model_dim, self.hparams.num_classes)\n        ) \n\n    def forward(self, x, mask=None, add_positional_encoding=True):\n        \"\"\"\n        Inputs:\n            x - Input features of shape [Batch, SeqLen, input_dim]\n            mask - Mask to apply on the attention outputs (optional)\n            add_positional_encoding - If True, we add the positional encoding to the input.\n                                      Might not be desired for some tasks.\n        \"\"\"\n        x = self.input_net(x)\n        if add_positional_encoding:\n            x = self.positional_encoding(x)\n        x = self.transformer(x, mask=mask)\n        x = self.output_net(x)\n        return x\n\n    @torch.no_grad()\n    def get_attention_maps(self, x, mask=None, add_positional_encoding=True):\n        \"\"\"\n        Function for extracting the attention matrices of the whole Transformer for a single batch.\n        Input arguments same as the forward pass.\n        \"\"\"\n        x = self.input_net(x)\n        if add_positional_encoding:\n            x = self.positional_encoding(x)\n        attention_maps = self.transformer.get_attention_maps(x, mask=mask)\n        return attention_maps\n\n    def configure_optimizers(self):\n        optimizer = optim.Adam(self.parameters(), lr=self.hparams.lr)\n        \n        # Apply lr scheduler per step\n        lr_scheduler = CosineWarmupScheduler(optimizer, \n                                             warmup=self.hparams.warmup, \n                                             max_iters=self.hparams.max_iters)\n        return [optimizer], [{'scheduler': lr_scheduler, 'interval': 'step'}]\n\n    def training_step(self, batch, batch_idx):\n        raise NotImplementedError\n\n    def validation_step(self, batch, batch_idx):\n        raise NotImplementedError    \n\n    def test_step(self, batch, batch_idx):\n        raise NotImplementedError",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>HPT PyTorch Lightning Transformer: Introduction</span>"
    ]
  },
  {
    "objectID": "603_spot_lightning_transformer_introduction.html#experiment-sequence-to-sequence",
    "href": "603_spot_lightning_transformer_introduction.html#experiment-sequence-to-sequence",
    "title": "28  HPT PyTorch Lightning Transformer: Introduction",
    "section": "28.4 Experiment: Sequence to Sequence",
    "text": "28.4 Experiment: Sequence to Sequence\nAfter having finished the implementation of the Transformer architecture, we can start experimenting and apply it to various tasks. We will focus on parallel Sequence-to-Sequence.\nA Sequence-to-Sequence task represents a task where the input and the output is a sequence, not necessarily of the same length. Popular tasks in this domain include machine translation and summarization. For this, we usually have a Transformer encoder for interpreting the input sequence, and a decoder for generating the output in an autoregressive manner. Here, however, we will go back to a much simpler example task and use only the encoder. Given a sequence of \\(N\\) numbers between \\(0\\) and \\(M\\), the task is to reverse the input sequence. In Numpy notation, if our input is \\(x\\), the output should be \\(x\\)[::-1]. Although this task sounds very simple, RNNs can have issues with such because the task requires long-term dependencies. Transformers are built to support such, and hence, we expect it to perform very well.\n\n28.4.1 Dataset and Data Loaders\nFirst, let’s create a dataset class below.\n\nclass ReverseDataset(data.Dataset):\n\n    def __init__(self, num_categories, seq_len, size):\n        super().__init__()\n        self.num_categories = num_categories\n        self.seq_len = seq_len\n        self.size = size\n        \n        self.data = torch.randint(self.num_categories, size=(self.size, self.seq_len))\n  \n    def __len__(self):\n        return self.size\n\n    def __getitem__(self, idx):\n        inp_data = self.data[idx]\n        labels = torch.flip(inp_data, dims=(0,))\n        return inp_data, labels\n\nWe create an arbitrary number of random sequences of numbers between 0 and num_categories-1. The label is simply the tensor flipped over the sequence dimension. We can create the corresponding data loaders below.\n\ndataset = partial(ReverseDataset, 10, 16)\ntrain_loader = data.DataLoader(dataset(50000),\n                                batch_size=128,\n                                shuffle=True,\n                                drop_last=True,\n                                pin_memory=True)\nval_loader   = data.DataLoader(dataset(1000), batch_size=128)\ntest_loader  = data.DataLoader(dataset(10000), batch_size=128)\n\n\ninp_data, labels = train_loader.dataset[0]\nprint(\"Input data:\", inp_data)\nprint(\"Labels:    \", labels)\n\nInput data: tensor([0, 4, 1, 2, 5, 5, 7, 6, 9, 6, 3, 1, 9, 3, 1, 9])\nLabels:     tensor([9, 1, 3, 9, 1, 3, 6, 9, 6, 7, 5, 5, 2, 1, 4, 0])\n\n\nDuring training, we pass the input sequence through the Transformer encoder and predict the output for each input token. We use the standard Cross-Entropy loss to perform this. Every number is represented as a one-hot vector. Remember that representing the categories as single scalars decreases the expressiveness of the model extremely as \\(0\\) and \\(1\\) are not closer related than \\(0\\) and \\(9\\) in our example. An alternative to a one-hot vector is using a learned embedding vector as it is provided by the PyTorch module nn.Embedding. However, using a one-hot vector with an additional linear layer as in our case has the same effect as an embedding layer (self.input_net maps one-hot vector to a dense vector, where each row of the weight matrix represents the embedding for a specific category).\n\n\n28.4.2 The Reverse Predictor Class\nTo implement the training dynamic, we create a new class inheriting from TransformerPredictor and overwriting the training, validation and test step functions, which were left empty in the base class. We also add a _calculate_loss function to calculate the loss and accuracy for a batch.\n\nclass ReversePredictor(TransformerPredictor):\n    \n    def _calculate_loss(self, batch, mode=\"train\"):\n        # Fetch data and transform categories to one-hot vectors\n        inp_data, labels = batch\n        inp_data = F.one_hot(inp_data, num_classes=self.hparams.num_classes).float()\n        \n        # Perform prediction and calculate loss and accuracy\n        preds = self.forward(inp_data, add_positional_encoding=True)\n        loss = F.cross_entropy(preds.view(-1,preds.size(-1)), labels.view(-1))\n        acc = (preds.argmax(dim=-1) == labels).float().mean()\n        \n        # Logging\n        self.log(f\"{mode}_loss\", loss)\n        self.log(f\"{mode}_acc\", acc)\n        return loss, acc\n        \n    def training_step(self, batch, batch_idx):\n        loss, _ = self._calculate_loss(batch, mode=\"train\")\n        return loss\n    \n    def validation_step(self, batch, batch_idx):\n        _ = self._calculate_loss(batch, mode=\"val\")\n    \n    def test_step(self, batch, batch_idx):\n        _ = self._calculate_loss(batch, mode=\"test\")\n\nFinally, we can create a training function. We create a pl.Trainer object, running for \\(N\\) epochs, logging in TensorBoard, and saving our best model based on the validation. Afterward, we test our models on the test set.\n\n\n28.4.3 Gradient Clipping\nAn additional parameter we pass to the trainer here is gradient_clip_val. This clips the norm of the gradients for all parameters before taking an optimizer step and prevents the model from diverging if we obtain very high gradients at, for instance, sharp loss surfaces (see many good blog posts on gradient clipping, like DeepAI glossary). For Transformers, gradient clipping can help to further stabilize the training during the first few iterations, and also afterward. In plain PyTorch, you can apply gradient clipping via torch.nn.utils.clip_grad_norm_(...) (see documentation). The clip value is usually between 0.5 and 10, depending on how harsh you want to clip large gradients.\n\n\n28.4.4 Implementation of the Lightning Trainer\nThe Lightning trainer can be implemented as follows:\n\ndef train_reverse(**kwargs):\n    # Create a PyTorch Lightning trainer with the generation callback\n    root_dir = os.path.join(CHECKPOINT_PATH, \"ReverseTask\")\n    os.makedirs(root_dir, exist_ok=True)\n    trainer = pl.Trainer(default_root_dir=root_dir, \n                         callbacks=[ModelCheckpoint(save_weights_only=True,\n                                    mode=\"max\", monitor=\"val_acc\")],\n                         accelerator=\"gpu\" if str(device).startswith(\"cuda\") else \"cpu\",\n                         devices=1,\n                         max_epochs=10,\n                         gradient_clip_val=5)\n    trainer.logger._default_hp_metric = None # Optional logging argument that we don't need\n    \n    # Check whether pretrained model exists. If yes, load it and skip training\n    pretrained_filename = os.path.join(CHECKPOINT_PATH, \"ReverseTask.ckpt\")\n    if os.path.isfile(pretrained_filename):\n        print(\"Found pretrained model, loading...\")\n        model = ReversePredictor.load_from_checkpoint(pretrained_filename)\n    else:\n        model = ReversePredictor(max_iters=trainer.max_epochs*len(train_loader), **kwargs)\n        trainer.fit(model, train_loader, val_loader)\n        \n    # Test best model on validation and test set\n    val_result = trainer.test(model, val_loader, verbose=False)\n    test_result = trainer.test(model, test_loader, verbose=False)\n    result = {\"test_acc\": test_result[0][\"test_acc\"], \"val_acc\": val_result[0][\"test_acc\"]}\n    \n    model = model.to(device)\n    return model, result\n\n\n\n28.4.5 Training the Model\nFinally, we can train the model. In this setup, we will use a single encoder block and a single head in the Multi-Head Attention. This is chosen because of the simplicity of the task, and in this case, the attention can actually be interpreted as an “explanation” of the predictions (compared to the other papers above dealing with deep Transformers).\n\nreverse_model, reverse_result = train_reverse(input_dim=train_loader.dataset.num_categories,\n                                              model_dim=32,\n                                              num_heads=1,\n                                              num_classes=train_loader.dataset.num_categories,\n                                              num_layers=1,\n                                              dropout=0.0,\n                                              lr=5e-4,\n                                              warmup=50)\n\nFound pretrained model, loading...\n\n\n\n\n\n\n\n\nThe warning of PyTorch Lightning regarding the number of workers can be ignored for now. As the data set is so simple and the __getitem__ finishes a neglectable time, we don’t need subprocesses to provide us the data (in fact, more workers can slow down the training as we have communication overhead among processes/threads). First, let’s print the results:\n\nprint(f\"Val accuracy:  {(100.0 * reverse_result['val_acc']):4.2f}%\")\nprint(f\"Test accuracy: {(100.0 * reverse_result['test_acc']):4.2f}%\")\n\nVal accuracy:  100.00%\nTest accuracy: 100.00%\n\n\nAs we would have expected, the Transformer can correctly solve the task.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>HPT PyTorch Lightning Transformer: Introduction</span>"
    ]
  },
  {
    "objectID": "603_spot_lightning_transformer_introduction.html#visualizing-attention-maps",
    "href": "603_spot_lightning_transformer_introduction.html#visualizing-attention-maps",
    "title": "28  HPT PyTorch Lightning Transformer: Introduction",
    "section": "28.5 Visualizing Attention Maps",
    "text": "28.5 Visualizing Attention Maps\nHow does the attention in the Multi-Head Attention block looks like for an arbitrary input? Let’s try to visualize it below.\n\ndata_input, labels = next(iter(val_loader))\ninp_data = F.one_hot(data_input, num_classes=reverse_model.hparams.num_classes).float()\ninp_data = inp_data.to(device)\nattention_maps = reverse_model.get_attention_maps(inp_data)\n\nThe object attention_maps is a list of length \\(N\\) where \\(N\\) is the number of layers. Each element is a tensor of shape [Batch, Heads, SeqLen, SeqLen], which we can verify below.\n\nattention_maps[0].shape\n\ntorch.Size([128, 1, 16, 16])\n\n\nNext, we will write a plotting function that takes as input the sequences, attention maps, and an index indicating for which batch element we want to visualize the attention map. We will create a plot where over rows, we have different layers, while over columns, we show the different heads. Remember that the softmax has been applied for each row separately.\n\ndef plot_attention_maps(input_data, attn_maps, idx=0):\n    if input_data is not None:\n        input_data = input_data[idx].detach().cpu().numpy()\n    else:\n        input_data = np.arange(attn_maps[0][idx].shape[-1])\n    attn_maps = [m[idx].detach().cpu().numpy() for m in attn_maps]\n    \n    num_heads = attn_maps[0].shape[0]\n    num_layers = len(attn_maps)\n    seq_len = input_data.shape[0]\n    fig_size = 4 if num_heads == 1 else 3\n    fig, ax = plt.subplots(num_layers, num_heads, figsize=(num_heads*fig_size, num_layers*fig_size))\n    if num_layers == 1:\n        ax = [ax]\n    if num_heads == 1:\n        ax = [[a] for a in ax]\n    for row in range(num_layers):\n        for column in range(num_heads):\n            ax[row][column].imshow(attn_maps[row][column], origin='lower', vmin=0)\n            ax[row][column].set_xticks(list(range(seq_len)))\n            ax[row][column].set_xticklabels(input_data.tolist())\n            ax[row][column].set_yticks(list(range(seq_len)))\n            ax[row][column].set_yticklabels(input_data.tolist())\n            ax[row][column].set_title(f\"Layer {row+1}, Head {column+1}\")\n    fig.subplots_adjust(hspace=0.5)\n    cax = fig.add_axes([0.95, 0.15, 0.01, 0.7])\n    cbar = fig.colorbar(ax[0][0].imshow(attn_maps[0][0], origin='lower', vmin=0), cax=cax)\n    cbar.set_label('Attention')\n    plt.show()\n\nFinally, we can plot the attention map of our trained Transformer on the reverse task:\n\nplot_attention_maps(data_input, attention_maps, idx=0)\n\n\n\n\n\n\n\n\nThe model has learned to attend to the token that is on the flipped index of itself. Hence, it actually does what we intended it to do. We see that it however also pays some attention to values close to the flipped index. This is because the model doesn’t need the perfect, hard attention to solve this problem, but is fine with this approximate, noisy attention map. The close-by indices are caused by the similarity of the positional encoding, which we also intended with the positional encoding.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>HPT PyTorch Lightning Transformer: Introduction</span>"
    ]
  },
  {
    "objectID": "603_spot_lightning_transformer_introduction.html#conclusion",
    "href": "603_spot_lightning_transformer_introduction.html#conclusion",
    "title": "28  HPT PyTorch Lightning Transformer: Introduction",
    "section": "28.6 Conclusion",
    "text": "28.6 Conclusion\nIn this chapter, we took a closer look at the Multi-Head Attention layer which uses a scaled dot product between queries and keys to find correlations and similarities between input elements. The Transformer architecture is based on the Multi-Head Attention layer and applies multiple of them in a ResNet-like block. The Transformer is a very important, recent architecture that can be applied to many tasks and datasets. Although it is best known for its success in NLP, there is so much more to it. We have seen its application on sequence-to-sequence tasks. Its property of being permutation-equivariant if we do not provide any positional encodings, allows it to generalize to many settings. Hence, it is important to know the architecture, but also its possible issues such as the gradient problem during the first iterations solved by learning rate warm-up. If you are interested in continuing with the study of the Transformer architecture, please have a look at the blog posts listed in the “Further Reading” section below.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>HPT PyTorch Lightning Transformer: Introduction</span>"
    ]
  },
  {
    "objectID": "603_spot_lightning_transformer_introduction.html#additional-considerations",
    "href": "603_spot_lightning_transformer_introduction.html#additional-considerations",
    "title": "28  HPT PyTorch Lightning Transformer: Introduction",
    "section": "28.7 Additional Considerations",
    "text": "28.7 Additional Considerations\n\n28.7.1 Complexity and Path Length\nWe can compare the self-attention operation with our other common layer competitors for sequence data: convolutions and recurrent neural networks. In Figure 28.5 you can find a table by Vaswani et al. (2017) on the complexity per layer, the number of sequential operations, and maximum path length. The complexity is measured by the upper bound of the number of operations to perform, while the maximum path length represents the maximum number of steps a forward or backward signal has to traverse to reach any other position. The lower this length, the better gradient signals can backpropagate for long-range dependencies. Let’s take a look at the table in Figure 28.5.\n\n\n\n\n\n\nFigure 28.5: Comparison of complexity and path length of different sequence layers. Table taken from Lippe (2022)\n\n\n\n\\(n\\) is the sequence length, \\(d\\) is the representation dimension and \\(k\\) is the kernel size of convolutions. In contrast to recurrent networks, the self-attention layer can parallelize all its operations making it much faster to execute for smaller sequence lengths. However, when the sequence length exceeds the hidden dimensionality, self-attention becomes more expensive than RNNs. One way of reducing the computational cost for long sequences is by restricting the self-attention to a neighborhood of inputs to attend over, denoted by \\(r\\). Nevertheless, there has been recently a lot of work on more efficient Transformer architectures that still allow long dependencies, of which you can find an overview in the paper by Tay et al. (2020) if interested.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>HPT PyTorch Lightning Transformer: Introduction</span>"
    ]
  },
  {
    "objectID": "603_spot_lightning_transformer_introduction.html#further-reading",
    "href": "603_spot_lightning_transformer_introduction.html#further-reading",
    "title": "28  HPT PyTorch Lightning Transformer: Introduction",
    "section": "28.8 Further Reading",
    "text": "28.8 Further Reading\nThere are of course many more tutorials out there about attention and Transformers. Below, we list a few that are worth exploring if you are interested in the topic and might want yet another perspective on the topic after this one:\n\nTransformer: A Novel Neural Network Architecture for Language Understanding (Jakob Uszkoreit, 2017) - The original Google blog post about the Transformer paper, focusing on the application in machine translation.\nThe Illustrated Transformer (Jay Alammar, 2018) - A very popular and great blog post intuitively explaining the Transformer architecture with many nice visualizations. The focus is on NLP.\nAttention? Attention! (Lilian Weng, 2018) - A nice blog post summarizing attention mechanisms in many domains including vision.\nIllustrated: Self-Attention (Raimi Karim, 2019) - A nice visualization of the steps of self-attention. Recommended going through if the explanation below is too abstract for you.\nThe Transformer family (Lilian Weng, 2020) - A very detailed blog post reviewing more variants of Transformers besides the original one.\n\n\n\n\n\nDevlin, Jacob, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2018. “BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding.” arXiv e-Prints, October, arXiv:1810.04805.\n\n\nDosovitskiy, Alexey, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, et al. 2020. “An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale.” arXiv e-Prints, October, arXiv:2010.11929.\n\n\nJain, Sarthak, and Byron C. Wallace. 2019. “Attention is not Explanation.” arXiv e-Prints, February, arXiv:1902.10186.\n\n\nLippe, Phillip. 2022. “UvA Deep Learning Tutorials.”\n\n\nLiu, Liyuan, Haoming Jiang, Pengcheng He, Weizhu Chen, Xiaodong Liu, Jianfeng Gao, and Jiawei Han. 2019. “On the Variance of the Adaptive Learning Rate and Beyond.” arXiv e-Prints, August, arXiv:1908.03265.\n\n\nTay, Yi, Mostafa Dehghani, Dara Bahri, and Donald Metzler. 2020. “Efficient Transformers: A Survey.” arXiv e-Prints, September, arXiv:2009.06732.\n\n\nVaswani, Ashish, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. “Attention Is All You Need.” arXiv e-Prints, June, 1–15.\n\n\nWiegreffe, Sarah, and Yuval Pinter. 2019. “Attention is not not Explanation.” arXiv e-Prints, August, arXiv:1908.04626.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>HPT PyTorch Lightning Transformer: Introduction</span>"
    ]
  },
  {
    "objectID": "604_spot_lightning_save_load_models.html",
    "href": "604_spot_lightning_save_load_models.html",
    "title": "29  Saving and Loading",
    "section": "",
    "text": "29.1 spotpython: Saving and Loading Optimization Experiments\nIn this section, we will show how results from spotpython can be saved and reloaded. Here, spotpython can be used as an optimizer.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Saving and Loading</span>"
    ]
  },
  {
    "objectID": "604_spot_lightning_save_load_models.html#sec-spotpython-saving-and-loading",
    "href": "604_spot_lightning_save_load_models.html#sec-spotpython-saving-and-loading",
    "title": "29  Saving and Loading",
    "section": "",
    "text": "29.1.1 spotpython as an Optimizer\nIf spotpython is used as an optimizer, no dictionary of hyperparameters has be specified. The fun_control dictionary is sufficient.\n\nimport os\nimport pprint\nfrom spotpython.utils.file import load_experiment\nfrom spotpython.utils.file import get_experiment_filename\nimport numpy as np\nfrom math import inf\nfrom spotpython.spot import spot\nfrom spotpython.utils.init import (\n    fun_control_init,\n    design_control_init,\n    surrogate_control_init,\n    optimizer_control_init)\nfrom spotpython.fun.objectivefunctions import analytical\nfun = analytical().fun_branin\nfun_control = fun_control_init(\n            PREFIX=\"branin\",            \n            lower = np.array([0, 0]),\n            upper = np.array([10, 10]),\n            fun_evals=8,\n            fun_repeats=1,\n            max_time=inf,\n            noise=False,\n            tolerance_x=0,\n            ocba_delta=0,\n            var_type=[\"num\", \"num\"],\n            infill_criterion=\"ei\",\n            n_points=1,\n            seed=123,\n            log_level=20,\n            show_models=False,\n            show_progress=True)\ndesign_control = design_control_init(\n            init_size=5,\n            repeats=1)\nsurrogate_control = surrogate_control_init(\n            model_fun_evals=10000,\n            min_theta=-3,\n            max_theta=3,\n            n_theta=2,\n            theta_init_zero=True,\n            n_p=1,\n            optim_p=False,\n            var_type=[\"num\", \"num\"],\n            seed=124)\noptimizer_control = optimizer_control_init(\n            max_iter=1000,\n            seed=125)\nspot_tuner = spot.Spot(fun=fun,\n            fun_control=fun_control,\n            design_control=design_control,\n            surrogate_control=surrogate_control,\n            optimizer_control=optimizer_control)\nspot_tuner.run()\nPREFIX = fun_control[\"PREFIX\"]\nfilename = get_experiment_filename(PREFIX)\nspot_tuner.save_experiment(filename=filename)\nprint(f\"filename: {filename}\")\n\nspotpython tuning: 4.7932399644479124 [########--] 75.00% \nspotpython tuning: 2.0379524815147736 [#########-] 87.50% \nspotpython tuning: 1.9863250753932071 [##########] 100.00% Done...\n\nfilename: spot_branin_experiment.pickle\n\n\n\n(spot_tuner_1, fun_control_1, design_control_1,\n    surrogate_control_1, optimizer_control_1) = load_experiment(filename)\n\nThe progress of the original experiment is shown in Figure 29.1 and the reloaded experiment in Figure 29.2.\n\nspot_tuner.plot_progress(log_y=True)\n\n\n\n\n\n\n\nFigure 29.1: Progress of the original experiment\n\n\n\n\n\n\nspot_tuner_1.plot_progress(log_y=True)\n\n\n\n\n\n\n\nFigure 29.2: Progress of the reloaded experiment\n\n\n\n\n\nThe results from the original experiment are shown in Table 29.1 and the reloaded experiment in Table 29.2.\n\nspot_tuner.print_results()\n\nmin y: 1.9863250753932071\nx0: 10.0\nx1: 3.2107652010539627\n\n\n\n\nTable 29.1\n\n\n\n[['x0', 10.0], ['x1', 3.2107652010539627]]\n\n\n\n\n\n\nspot_tuner_1.print_results()\n\nmin y: 1.9863250753932071\nx0: 10.0\nx1: 3.2107652010539627\n\n\n\n\nTable 29.2\n\n\n\n[['x0', 10.0], ['x1', 3.2107652010539627]]\n\n\n\n\n\n\n29.1.1.1 Getting the Tuned Hyperparameters\nThe tuned hyperparameters can be obtained as a dictionary with the following code.\n\nfrom spotpython.hyperparameters.values import get_tuned_hyperparameters\nget_tuned_hyperparameters(spot_tuner=spot_tuner)\n\n{'x0': 10.0, 'x1': 3.2107652010539627}\n\n\n\n\n\n\n\n\nSummary: Saving and Loading Optimization Experiments\n\n\n\n\nIf spotpython is used as an optimizer (without an hyperparameter dictionary), experiments can be saved and reloaded with the save_experiment and load_experiment functions.\nThe tuned hyperparameters can be obtained with the get_tuned_hyperparameters function.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Saving and Loading</span>"
    ]
  },
  {
    "objectID": "604_spot_lightning_save_load_models.html#sec-spotpython-as-a-hyperparameter-tuner-37",
    "href": "604_spot_lightning_save_load_models.html#sec-spotpython-as-a-hyperparameter-tuner-37",
    "title": "29  Saving and Loading",
    "section": "29.2 spotpython as a Hyperparameter Tuner",
    "text": "29.2 spotpython as a Hyperparameter Tuner\nIf spotpython is used as a hyperparameter tuner, in addition to the fun_control dictionary a core_model dictionary have to be specified. This will be explained in Section 29.2.2.\nFurthermore, a data set has to be selected and added to the fun_control dictionary. Here, we will use the Diabetes data set.\n\n29.2.1 The Diabetes Data Set\nThe hyperparameter tuning of a PyTorch Lightning network on the Diabetes data set is used as an example. The Diabetes data set is a PyTorch Dataset for regression, which originates from the scikit-learn package, see https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html#sklearn.datasets.load_diabetes.\nTen baseline variables, age, sex, body mass index, average blood pressure, and six blood serum measurements were obtained for each of n = 442 diabetes patients, as well as the response of interest, a quantitative measure of disease progression one year after baseline. The Diabetes data set is described in Table 29.3.\n\n\n\nTable 29.3: The Diabetes data set\n\n\n\n\n\nDescription\nValue\n\n\n\n\nSamples total\n442\n\n\nDimensionality\n10\n\n\nFeatures\nreal, -.2 &lt; x &lt; .2\n\n\nTargets\ninteger 25 - 346\n\n\n\n\n\n\n\nfrom spotpython.utils.device import getDevice\nfrom math import inf\nfrom spotpython.utils.init import fun_control_init\nimport numpy as np\nfrom spotpython.hyperparameters.values import set_control_key_value\nfrom spotpython.data.diabetes import Diabetes\n\nMAX_TIME = inf\nFUN_EVALS = 8\nINIT_SIZE = 5\nWORKERS = 0\nPREFIX=\"037\"\nDEVICE = getDevice()\nDEVICES = 1\nTEST_SIZE = 0.4\nTORCH_METRIC = \"mean_squared_error\"\ndataset = Diabetes()\n\nfun_control = fun_control_init(\n    _L_in=10,\n    _L_out=1,\n    _torchmetric=TORCH_METRIC,\n    PREFIX=PREFIX,\n    TENSORBOARD_CLEAN=True,\n    data_set=dataset,\n    device=DEVICE,\n    enable_progress_bar=False,\n    fun_evals=FUN_EVALS,\n    log_level=10,\n    max_time=MAX_TIME,\n    num_workers=WORKERS,\n    show_progress=True,\n    test_size=TEST_SIZE,\n    tolerance_x=np.sqrt(np.spacing(1)),\n    )\n\nMoving TENSORBOARD_PATH: runs/ to TENSORBOARD_PATH_OLD: runs_OLD/runs_2024_09_04_23_07_12\n\n\n\n\n29.2.2 Adding a core_model to the fun_control Dictionary\nspotpython includes the NetLightRegression class [SOURCE] for configurable neural networks. The class is imported here. It inherits from the class Lightning.LightningModule, which is the base class for all models in Lightning. Lightning.LightningModule is a subclass of torch.nn.Module and provides additional functionality for the training and testing of neural networks. The class Lightning.LightningModule is described in the Lightning documentation.\nThe hyperparameters of the model are specified in the core_model_hyper_dict dictionary [SOURCE].\nThe core_model dictionary contains the hyperparameters of the model to be tuned. These hyperparameters can be specified and modified with as shown in the following code.\n\nfrom spotpython.light.regression.netlightregression import NetLightRegression\nfrom spotpython.hyperdict.light_hyper_dict import LightHyperDict\nfrom spotpython.hyperparameters.values import add_core_model_to_fun_control\nadd_core_model_to_fun_control(fun_control=fun_control,\n                              core_model=NetLightRegression,\n                              hyper_dict=LightHyperDict)\nfrom spotpython.hyperparameters.values import set_control_hyperparameter_value\n\nset_control_hyperparameter_value(fun_control, \"epochs\", [4, 5])\nset_control_hyperparameter_value(fun_control, \"batch_size\", [4, 5])\nset_control_hyperparameter_value(fun_control, \"optimizer\", [\n                \"Adam\",\n                \"RAdam\",\n            ])\nset_control_hyperparameter_value(fun_control, \"dropout_prob\", [0.01, 0.1])\nset_control_hyperparameter_value(fun_control, \"lr_mult\", [0.05, 1.0])\nset_control_hyperparameter_value(fun_control, \"patience\", [2, 3])\nset_control_hyperparameter_value(fun_control, \"act_fn\",[\n                \"ReLU\",\n                \"LeakyReLU\"\n            ] )\n\nSetting hyperparameter epochs to value [4, 5].\nVariable type is int.\nCore type is None.\nCalling modify_hyper_parameter_bounds().\nSetting hyperparameter batch_size to value [4, 5].\nVariable type is int.\nCore type is None.\nCalling modify_hyper_parameter_bounds().\nSetting hyperparameter optimizer to value ['Adam', 'RAdam'].\nVariable type is factor.\nCore type is str.\nCalling modify_hyper_parameter_levels().\nSetting hyperparameter dropout_prob to value [0.01, 0.1].\nVariable type is float.\nCore type is None.\nCalling modify_hyper_parameter_bounds().\nSetting hyperparameter lr_mult to value [0.05, 1.0].\nVariable type is float.\nCore type is None.\nCalling modify_hyper_parameter_bounds().\nSetting hyperparameter patience to value [2, 3].\nVariable type is int.\nCore type is None.\nCalling modify_hyper_parameter_bounds().\nSetting hyperparameter act_fn to value ['ReLU', 'LeakyReLU'].\nVariable type is factor.\nCore type is instance().\nCalling modify_hyper_parameter_levels().\n\n\n\nimport pprint as pp\nfrom spotpython.hyperparameters.values import set_factor_hyperparameter_values\nset_factor_hyperparameter_values(fun_control, \"initialization\", [\"Default\"])\npp.pprint(fun_control)\n\n{'CHECKPOINT_PATH': 'runs/saved_models/',\n 'DATASET_PATH': 'data/',\n 'PREFIX': '037',\n 'RESULTS_PATH': 'results/',\n 'TENSORBOARD_CLEAN': True,\n 'TENSORBOARD_PATH': 'runs/',\n '_L_in': 10,\n '_L_out': 1,\n '_torchmetric': 'mean_squared_error',\n 'accelerator': 'auto',\n 'converters': None,\n 'core_model': &lt;class 'spotpython.light.regression.netlightregression.NetLightRegression'&gt;,\n 'core_model_hyper_dict': {'act_fn': {'class_name': 'spotpython.torch.activation',\n                                      'core_model_parameter_type': 'instance()',\n                                      'default': 'ReLU',\n                                      'levels': ['ReLU', 'LeakyReLU'],\n                                      'lower': 0,\n                                      'transform': 'None',\n                                      'type': 'factor',\n                                      'upper': 1},\n                           'batch_size': {'default': 4,\n                                          'lower': 4,\n                                          'transform': 'transform_power_2_int',\n                                          'type': 'int',\n                                          'upper': 5},\n                           'dropout_prob': {'default': 0.01,\n                                            'lower': 0.01,\n                                            'transform': 'None',\n                                            'type': 'float',\n                                            'upper': 0.1},\n                           'epochs': {'default': 4,\n                                      'lower': 4,\n                                      'transform': 'transform_power_2_int',\n                                      'type': 'int',\n                                      'upper': 5},\n                           'initialization': {'core_model_parameter_type': 'str',\n                                              'default': 'Default',\n                                              'levels': ['Default'],\n                                              'lower': 0,\n                                              'transform': 'None',\n                                              'type': 'factor',\n                                              'upper': 0},\n                           'l1': {'default': 3,\n                                  'lower': 3,\n                                  'transform': 'transform_power_2_int',\n                                  'type': 'int',\n                                  'upper': 8},\n                           'lr_mult': {'default': 1.0,\n                                       'lower': 0.05,\n                                       'transform': 'None',\n                                       'type': 'float',\n                                       'upper': 1.0},\n                           'optimizer': {'class_name': 'torch.optim',\n                                         'core_model_parameter_type': 'str',\n                                         'default': 'SGD',\n                                         'levels': ['Adam', 'RAdam'],\n                                         'lower': 0,\n                                         'transform': 'None',\n                                         'type': 'factor',\n                                         'upper': 1},\n                           'patience': {'default': 2,\n                                        'lower': 2,\n                                        'transform': 'transform_power_2_int',\n                                        'type': 'int',\n                                        'upper': 3}},\n 'core_model_hyper_dict_default': {'act_fn': {'class_name': 'spotpython.torch.activation',\n                                              'core_model_parameter_type': 'instance()',\n                                              'default': 'ReLU',\n                                              'levels': ['Sigmoid',\n                                                         'Tanh',\n                                                         'ReLU',\n                                                         'LeakyReLU',\n                                                         'ELU',\n                                                         'Swish'],\n                                              'lower': 0,\n                                              'transform': 'None',\n                                              'type': 'factor',\n                                              'upper': 5},\n                                   'batch_size': {'default': 4,\n                                                  'lower': 1,\n                                                  'transform': 'transform_power_2_int',\n                                                  'type': 'int',\n                                                  'upper': 4},\n                                   'dropout_prob': {'default': 0.01,\n                                                    'lower': 0.0,\n                                                    'transform': 'None',\n                                                    'type': 'float',\n                                                    'upper': 0.25},\n                                   'epochs': {'default': 4,\n                                              'lower': 4,\n                                              'transform': 'transform_power_2_int',\n                                              'type': 'int',\n                                              'upper': 9},\n                                   'initialization': {'core_model_parameter_type': 'str',\n                                                      'default': 'Default',\n                                                      'levels': ['Default',\n                                                                 'Kaiming',\n                                                                 'Xavier'],\n                                                      'lower': 0,\n                                                      'transform': 'None',\n                                                      'type': 'factor',\n                                                      'upper': 2},\n                                   'l1': {'default': 3,\n                                          'lower': 3,\n                                          'transform': 'transform_power_2_int',\n                                          'type': 'int',\n                                          'upper': 8},\n                                   'lr_mult': {'default': 1.0,\n                                               'lower': 0.1,\n                                               'transform': 'None',\n                                               'type': 'float',\n                                               'upper': 10.0},\n                                   'optimizer': {'class_name': 'torch.optim',\n                                                 'core_model_parameter_type': 'str',\n                                                 'default': 'SGD',\n                                                 'levels': ['Adadelta',\n                                                            'Adagrad',\n                                                            'Adam',\n                                                            'AdamW',\n                                                            'SparseAdam',\n                                                            'Adamax',\n                                                            'ASGD',\n                                                            'NAdam',\n                                                            'RAdam',\n                                                            'RMSprop',\n                                                            'Rprop',\n                                                            'SGD'],\n                                                 'lower': 0,\n                                                 'transform': 'None',\n                                                 'type': 'factor',\n                                                 'upper': 11},\n                                   'patience': {'default': 2,\n                                                'lower': 2,\n                                                'transform': 'transform_power_2_int',\n                                                'type': 'int',\n                                                'upper': 6}},\n 'core_model_name': None,\n 'counter': 0,\n 'data': None,\n 'data_dir': './data',\n 'data_module': None,\n 'data_set': &lt;spotpython.data.diabetes.Diabetes object at 0x347696600&gt;,\n 'data_set_name': None,\n 'db_dict_name': None,\n 'design': None,\n 'device': 'mps',\n 'devices': 1,\n 'enable_progress_bar': False,\n 'eval': None,\n 'fun_evals': 8,\n 'fun_repeats': 1,\n 'horizon': None,\n 'hyperdict': None,\n 'infill_criterion': 'y',\n 'k_folds': 3,\n 'log_graph': False,\n 'log_level': 10,\n 'loss_function': None,\n 'lower': array([3. , 4. , 1. , 0. , 0. , 0. , 0.1, 2. , 0. ]),\n 'max_surrogate_points': 30,\n 'max_time': inf,\n 'metric_params': {},\n 'metric_river': None,\n 'metric_sklearn': None,\n 'metric_sklearn_name': None,\n 'metric_torch': None,\n 'model_dict': {},\n 'n_points': 1,\n 'n_samples': None,\n 'n_total': None,\n 'noise': False,\n 'num_workers': 0,\n 'ocba_delta': 0,\n 'oml_grace_period': None,\n 'optimizer': None,\n 'path': None,\n 'prep_model': None,\n 'prep_model_name': None,\n 'progress_file': None,\n 'save_model': False,\n 'scaler': None,\n 'scaler_name': None,\n 'scenario': None,\n 'seed': 123,\n 'show_batch_interval': 1000000,\n 'show_models': False,\n 'show_progress': True,\n 'shuffle': None,\n 'sigma': 0.0,\n 'spot_tensorboard_path': None,\n 'target_column': None,\n 'target_type': None,\n 'task': None,\n 'tensorboard_log': False,\n 'tensorboard_start': False,\n 'tensorboard_stop': False,\n 'test': None,\n 'test_seed': 1234,\n 'test_size': 0.4,\n 'tkagg': False,\n 'tolerance_x': 1.4901161193847656e-08,\n 'train': None,\n 'upper': array([ 8.  ,  9.  ,  4.  ,  5.  , 11.  ,  0.25, 10.  ,  6.  ,  2.  ]),\n 'var_name': ['l1',\n              'epochs',\n              'batch_size',\n              'act_fn',\n              'optimizer',\n              'dropout_prob',\n              'lr_mult',\n              'patience',\n              'initialization'],\n 'var_type': ['int',\n              'int',\n              'int',\n              'factor',\n              'factor',\n              'float',\n              'float',\n              'int',\n              'factor'],\n 'verbosity': 0,\n 'weight_coeff': 0.0,\n 'weights': 1.0,\n 'weights_entry': None}\n\n\n\n\n29.2.3 design_control, surrogate_control Dictionaries and the Objective Function\nAfter specifying the design_control and surrogate_control dictionaries, the objective function fun from the class HyperLight [SOURCE] is selected. It implements an interface from PyTorch’s training, validation, and testing methods to spotpython.\nThen, the hyperparameter tuning can be started.\n\nfrom spotpython.utils.init import design_control_init, surrogate_control_init\ndesign_control = design_control_init(init_size=INIT_SIZE)\n\nsurrogate_control = surrogate_control_init(noise=True,\n                                            n_theta=2)\nfrom spotpython.fun.hyperlight import HyperLight\nfun = HyperLight(log_level=10).fun\nfrom spotpython.spot import spot\nspot_tuner = spot.Spot(fun=fun,\n                       fun_control=fun_control,\n                       design_control=design_control,\n                       surrogate_control=surrogate_control)\nspot_tuner.run()\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\n\n\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\n\n\n\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │       4179.7265625        │\n│         val_loss          │       4179.7265625        │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 4179.7265625, 'hp_metric': 4179.7265625}\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      23407.55859375       │\n│         val_loss          │      23407.55859375       │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 23407.55859375, 'hp_metric': 23407.55859375}\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      4221.5048828125      │\n│         val_loss          │      4221.5048828125      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 4221.5048828125, 'hp_metric': 4221.5048828125}\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │        24088.78125        │\n│         val_loss          │        24088.78125        │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 24088.78125, 'hp_metric': 24088.78125}\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │       23975.578125        │\n│         val_loss          │       23975.578125        │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 23975.578125, 'hp_metric': 23975.578125}\n\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      4102.6474609375      │\n│         val_loss          │      4102.6474609375      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 4102.6474609375, 'hp_metric': 4102.6474609375}\nspotpython tuning: 4102.6474609375 [########--] 75.00% \n\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │       23990.4765625       │\n│         val_loss          │       23990.4765625       │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 23990.4765625, 'hp_metric': 23990.4765625}\nspotpython tuning: 4102.6474609375 [#########-] 87.50% \n\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\nLightDataModule.setup(): stage: TrainerFn.VALIDATING\nLightDataModule.val_dataloader(). Val. set size: 106\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     4289.04443359375      │\n│         val_loss          │     4289.04443359375      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntrain_model result: {'val_loss': 4289.04443359375, 'hp_metric': 4289.04443359375}\nspotpython tuning: 4102.6474609375 [##########] 100.00% Done...\n\n\n\n&lt;spotpython.spot.spot.Spot at 0x347ac3110&gt;\n\n\nThe tuned hyperparameters can be obtained as a dictionary with the following code.\n\nfrom spotpython.hyperparameters.values import get_tuned_hyperparameters\nget_tuned_hyperparameters(spot_tuner)\n\n{'l1': 6.0,\n 'epochs': 5.0,\n 'batch_size': 4.0,\n 'act_fn': 1.0,\n 'optimizer': 0.0,\n 'dropout_prob': 0.02091579593207886,\n 'lr_mult': 0.37103835961766674,\n 'patience': 3.0,\n 'initialization': 0.0}\n\n\nHere , the numerical levels of the hyperparameters are used as keys in the dictionary. If the fun_control dictionary is used, the names of the hyperparameters are used as keys in the dictionary.\n\nget_tuned_hyperparameters(spot_tuner, fun_control)\n\n{'l1': 6.0,\n 'epochs': 5.0,\n 'batch_size': 4.0,\n 'act_fn': 'LeakyReLU',\n 'optimizer': 'Adam',\n 'dropout_prob': 0.02091579593207886,\n 'lr_mult': 0.37103835961766674,\n 'patience': 3.0,\n 'initialization': 'Default'}\n\n\n\nPREFIX = fun_control[\"PREFIX\"]\nfilename = get_experiment_filename(PREFIX)\nspot_tuner.save_experiment(filename=filename)\nprint(f\"filename: {filename}\")\n\nfilename: spot_037_experiment.pickle\n\n\nThe results from the experiment are stored in the pickle file spot_037_experiment.pickle. The experiment can be reloaded with the following code.\n\n(spot_tuner_1, fun_control_1, design_control_1,\n    surrogate_control_1, optimizer_control_1) = load_experiment(filename)\n\nPlot the progress of the original experiment are identical to the reloaded experiment.\n\nspot_tuner.plot_progress(log_y=True)\nspot_tuner_1.plot_progress(log_y=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFinally, the tuned hyperparameters can be obtained as a dictionary from the reloaded experiment with the following code.\n\nget_tuned_hyperparameters(spot_tuner_1, fun_control_1)\n\n{'l1': 6.0,\n 'epochs': 5.0,\n 'batch_size': 4.0,\n 'act_fn': 'LeakyReLU',\n 'optimizer': 'Adam',\n 'dropout_prob': 0.02091579593207886,\n 'lr_mult': 0.37103835961766674,\n 'patience': 3.0,\n 'initialization': 'Default'}\n\n\n\n\n\n\n\n\nSummary: Saving and Loading Hyperparameter-Tuning Experiments\n\n\n\n\nIf spotpython is used as an hyperparameter tuner (with an hyperparameter dictionary), experiments can be saved and reloaded with the save_experiment and load_experiment functions.\nThe tuned hyperparameters can be obtained with the get_tuned_hyperparameters function.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Saving and Loading</span>"
    ]
  },
  {
    "objectID": "604_spot_lightning_save_load_models.html#sec-saving-and-loading-pytorch-lightning-models-37",
    "href": "604_spot_lightning_save_load_models.html#sec-saving-and-loading-pytorch-lightning-models-37",
    "title": "29  Saving and Loading",
    "section": "29.3 Saving and Loading PyTorch Lightning Models",
    "text": "29.3 Saving and Loading PyTorch Lightning Models\nSection 29.1 and Section 29.2 explained how to save and load optimization and hyperparameter tuning experiments and how to get the tuned hyperparameters as a dictionary. This section shows how to save and load PyTorch Lightning models.\n\n29.3.1 Get the Tuned Architecture\nIn contrast to the function get_tuned_hyperparameters, the function get_tuned_architecture returns the tuned architecture of the model as a dictionary. Here, the transformations are already applied to the numerical levels of the hyperparameters and the encoding (and types) are the original types of the hyperparameters used by the model. The config dictionary can be passed to the model without any modifications.\n\nfrom spotpython.hyperparameters.values import get_tuned_architecture\nconfig = get_tuned_architecture(spot_tuner, fun_control)\npprint.pprint(config)\n\n{'act_fn': LeakyReLU(),\n 'batch_size': 16,\n 'dropout_prob': 0.02091579593207886,\n 'epochs': 32,\n 'initialization': 'Default',\n 'l1': 64,\n 'lr_mult': 0.37103835961766674,\n 'optimizer': 'Adam',\n 'patience': 8}\n\n\nAfter getting the tuned architecture, the model can be created and tested with the following code.\n\nfrom spotpython.light.testmodel import test_model\ntest_model(config, fun_control)\n\nLightDataModule.setup(): stage: TrainerFn.FITTING\ntrain_size: 0.36, val_size: 0.24 used for train & val data.\nLightDataModule.val_dataloader(). Val. set size: 106\nLightDataModule.train_dataloader(). data_train size: 160\n\n\nLightDataModule.setup(): stage: TrainerFn.TESTING\ntest_size: 0.4 used for test dataset.\nLightDataModule.test_dataloader(). Test set size: 177\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃        Test metric        ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      5133.5029296875      │\n│         val_loss          │      5133.5029296875      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\ntest_model result: {'val_loss': 5133.5029296875, 'hp_metric': 5133.5029296875}\n\n\n(5133.5029296875, 5133.5029296875)\n\n\n\n\n29.3.2 Load a Model from Checkpoint\n\nfrom spotpython.light.loadmodel import load_light_from_checkpoint\nmodel_loaded = load_light_from_checkpoint(config, fun_control)\n\nconfig: {'l1': 64, 'epochs': 32, 'batch_size': 16, 'act_fn': LeakyReLU(), 'optimizer': 'Adam', 'dropout_prob': 0.02091579593207886, 'lr_mult': 0.37103835961766674, 'patience': 8, 'initialization': 'Default'}\nLoading model with 64_32_16_LeakyReLU_Adam_0.0209_0.371_8_Default_TEST from runs/saved_models/64_32_16_LeakyReLU_Adam_0.0209_0.371_8_Default_TEST/last.ckpt\nModel: NetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.02091579593207886, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.02091579593207886, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.02091579593207886, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.02091579593207886, inplace=False)\n    (12): Linear(in_features=16, out_features=1, bias=True)\n  )\n)\n\n\n\nvars(model_loaded)\n\n{'training': False,\n '_parameters': OrderedDict(),\n '_buffers': OrderedDict(),\n '_non_persistent_buffers_set': set(),\n '_backward_pre_hooks': OrderedDict(),\n '_backward_hooks': OrderedDict(),\n '_is_full_backward_hook': None,\n '_forward_hooks': OrderedDict(),\n '_forward_hooks_with_kwargs': OrderedDict(),\n '_forward_hooks_always_called': OrderedDict(),\n '_forward_pre_hooks': OrderedDict(),\n '_forward_pre_hooks_with_kwargs': OrderedDict(),\n '_state_dict_hooks': OrderedDict(),\n '_state_dict_pre_hooks': OrderedDict(),\n '_load_state_dict_pre_hooks': OrderedDict(),\n '_load_state_dict_post_hooks': OrderedDict(),\n '_modules': OrderedDict([('layers',\n               Sequential(\n                 (0): Linear(in_features=10, out_features=64, bias=True)\n                 (1): LeakyReLU()\n                 (2): Dropout(p=0.02091579593207886, inplace=False)\n                 (3): Linear(in_features=64, out_features=32, bias=True)\n                 (4): LeakyReLU()\n                 (5): Dropout(p=0.02091579593207886, inplace=False)\n                 (6): Linear(in_features=32, out_features=32, bias=True)\n                 (7): LeakyReLU()\n                 (8): Dropout(p=0.02091579593207886, inplace=False)\n                 (9): Linear(in_features=32, out_features=16, bias=True)\n                 (10): LeakyReLU()\n                 (11): Dropout(p=0.02091579593207886, inplace=False)\n                 (12): Linear(in_features=16, out_features=1, bias=True)\n               ))]),\n 'prepare_data_per_node': True,\n 'allow_zero_length_dataloader_with_multiple_devices': False,\n '_log_hyperparams': True,\n '_dtype': torch.float32,\n '_device': device(type='mps', index=0),\n '_trainer': None,\n '_example_input_array': tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]),\n '_automatic_optimization': True,\n '_strict_loading': None,\n '_current_fx_name': None,\n '_param_requires_grad_state': {},\n '_metric_attributes': None,\n '_compiler_ctx': None,\n '_fabric': None,\n '_fabric_optimizers': [],\n '_device_mesh': None,\n '_L_in': 10,\n '_L_out': 1,\n '_torchmetric': 'mean_squared_error',\n 'metric': &lt;function torchmetrics.functional.regression.mse.mean_squared_error(preds: torch.Tensor, target: torch.Tensor, squared: bool = True, num_outputs: int = 1) -&gt; torch.Tensor&gt;,\n '_hparams_name': 'kwargs',\n '_hparams': \"act_fn\":         LeakyReLU()\n \"batch_size\":     16\n \"dropout_prob\":   0.02091579593207886\n \"epochs\":         32\n \"initialization\": Default\n \"l1\":             64\n \"lr_mult\":        0.37103835961766674\n \"optimizer\":      Adam\n \"patience\":       8,\n '_hparams_initial': \"act_fn\":         LeakyReLU()\n \"batch_size\":     16\n \"dropout_prob\":   0.02091579593207886\n \"epochs\":         32\n \"initialization\": Default\n \"l1\":             64\n \"lr_mult\":        0.37103835961766674\n \"optimizer\":      Adam\n \"patience\":       8}\n\n\n\nimport torch\ntorch.save(model_loaded, \"model.pt\")\n\n\nmymodel = torch.load(\"model.pt\")\n\n\n# show all attributes of the model\nvars(mymodel)\n\n{'training': False,\n '_parameters': OrderedDict(),\n '_buffers': OrderedDict(),\n '_non_persistent_buffers_set': set(),\n '_backward_pre_hooks': OrderedDict(),\n '_backward_hooks': OrderedDict(),\n '_is_full_backward_hook': None,\n '_forward_hooks': OrderedDict(),\n '_forward_hooks_with_kwargs': OrderedDict(),\n '_forward_hooks_always_called': OrderedDict(),\n '_forward_pre_hooks': OrderedDict(),\n '_forward_pre_hooks_with_kwargs': OrderedDict(),\n '_state_dict_hooks': OrderedDict(),\n '_state_dict_pre_hooks': OrderedDict(),\n '_load_state_dict_pre_hooks': OrderedDict(),\n '_load_state_dict_post_hooks': OrderedDict(),\n '_modules': OrderedDict([('layers',\n               Sequential(\n                 (0): Linear(in_features=10, out_features=64, bias=True)\n                 (1): LeakyReLU()\n                 (2): Dropout(p=0.02091579593207886, inplace=False)\n                 (3): Linear(in_features=64, out_features=32, bias=True)\n                 (4): LeakyReLU()\n                 (5): Dropout(p=0.02091579593207886, inplace=False)\n                 (6): Linear(in_features=32, out_features=32, bias=True)\n                 (7): LeakyReLU()\n                 (8): Dropout(p=0.02091579593207886, inplace=False)\n                 (9): Linear(in_features=32, out_features=16, bias=True)\n                 (10): LeakyReLU()\n                 (11): Dropout(p=0.02091579593207886, inplace=False)\n                 (12): Linear(in_features=16, out_features=1, bias=True)\n               ))]),\n 'prepare_data_per_node': True,\n 'allow_zero_length_dataloader_with_multiple_devices': False,\n '_log_hyperparams': True,\n '_dtype': torch.float32,\n '_device': device(type='mps', index=0),\n '_trainer': None,\n '_example_input_array': tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n         [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]),\n '_automatic_optimization': True,\n '_strict_loading': None,\n '_current_fx_name': None,\n '_param_requires_grad_state': {},\n '_metric_attributes': None,\n '_compiler_ctx': None,\n '_fabric': None,\n '_fabric_optimizers': [],\n '_device_mesh': None,\n '_L_in': 10,\n '_L_out': 1,\n '_torchmetric': 'mean_squared_error',\n 'metric': &lt;function torchmetrics.functional.regression.mse.mean_squared_error(preds: torch.Tensor, target: torch.Tensor, squared: bool = True, num_outputs: int = 1) -&gt; torch.Tensor&gt;,\n '_hparams_name': 'kwargs',\n '_hparams': \"act_fn\":         LeakyReLU()\n \"batch_size\":     16\n \"dropout_prob\":   0.02091579593207886\n \"epochs\":         32\n \"initialization\": Default\n \"l1\":             64\n \"lr_mult\":        0.37103835961766674\n \"optimizer\":      Adam\n \"patience\":       8,\n '_hparams_initial': \"act_fn\":         LeakyReLU()\n \"batch_size\":     16\n \"dropout_prob\":   0.02091579593207886\n \"epochs\":         32\n \"initialization\": Default\n \"l1\":             64\n \"lr_mult\":        0.37103835961766674\n \"optimizer\":      Adam\n \"patience\":       8}",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Saving and Loading</span>"
    ]
  },
  {
    "objectID": "604_spot_lightning_save_load_models.html#sec-converting-a-lightning-model-to-a-plain-torch-model-37",
    "href": "604_spot_lightning_save_load_models.html#sec-converting-a-lightning-model-to-a-plain-torch-model-37",
    "title": "29  Saving and Loading",
    "section": "29.4 Converting a Lightning Model to a Plain Torch Model",
    "text": "29.4 Converting a Lightning Model to a Plain Torch Model\n\n29.4.1 The Function get_removed_attributes_and_base_net\nspotpython provides a function to covert a PyTorch Lightning model to a plain PyTorch model. The function get_removed_attributes_and_base_net returns a tuple with the removed attributes and the base net. The base net is a plain PyTorch model. The removed attributes are the attributes of the PyTorch Lightning model that are not part of the base net.\nThis conversion can be reverted.\n\nimport numpy as np\nimport torch\nfrom spotpython.utils.device import getDevice\nfrom torch.utils.data import random_split\nfrom spotpython.utils.classes import get_removed_attributes_and_base_net\nfrom spotpython.hyperparameters.optimizer import optimizer_handler\nremoved_attributes, torch_net = get_removed_attributes_and_base_net(net=mymodel)\n\n\nprint(removed_attributes)\n\n{'_torchmetric': 'mean_squared_error', '_fabric_optimizers': [], '_param_requires_grad_state': {}, 'metric': &lt;function mean_squared_error at 0x345615440&gt;, '_L_out': 1, '_fabric': None, 'prepare_data_per_node': True, '_dtype': torch.float32, 'allow_zero_length_dataloader_with_multiple_devices': False, '_automatic_optimization': True, '_metric_attributes': None, '_device': device(type='mps', index=0), '_device_mesh': None, '_example_input_array': tensor([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],\n        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]), '_hparams_initial': \"act_fn\":         LeakyReLU()\n\"batch_size\":     16\n\"dropout_prob\":   0.02091579593207886\n\"epochs\":         32\n\"initialization\": Default\n\"l1\":             64\n\"lr_mult\":        0.37103835961766674\n\"optimizer\":      Adam\n\"patience\":       8, '_hparams': \"act_fn\":         LeakyReLU()\n\"batch_size\":     16\n\"dropout_prob\":   0.02091579593207886\n\"epochs\":         32\n\"initialization\": Default\n\"l1\":             64\n\"lr_mult\":        0.37103835961766674\n\"optimizer\":      Adam\n\"patience\":       8, '_log_hyperparams': True, '_compiler_ctx': None, '_trainer': None, '_current_fx_name': None, '_hparams_name': 'kwargs', '_L_in': 10, '_strict_loading': None}\n\n\n\nprint(torch_net)\n\nNetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=64, bias=True)\n    (1): LeakyReLU()\n    (2): Dropout(p=0.02091579593207886, inplace=False)\n    (3): Linear(in_features=64, out_features=32, bias=True)\n    (4): LeakyReLU()\n    (5): Dropout(p=0.02091579593207886, inplace=False)\n    (6): Linear(in_features=32, out_features=32, bias=True)\n    (7): LeakyReLU()\n    (8): Dropout(p=0.02091579593207886, inplace=False)\n    (9): Linear(in_features=32, out_features=16, bias=True)\n    (10): LeakyReLU()\n    (11): Dropout(p=0.02091579593207886, inplace=False)\n    (12): Linear(in_features=16, out_features=1, bias=True)\n  )\n)\n\n\n\n\n29.4.2 An Example how to use the Plain Torch Net\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader, TensorDataset\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\n\n# Load the Diabetes dataset from sklearn\ndiabetes = load_diabetes()\nX = diabetes.data\ny = diabetes.target\n\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Scale the features\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\n# Convert the data to PyTorch tensors\nX_train_tensor = torch.tensor(X_train, dtype=torch.float32)\ny_train_tensor = torch.tensor(y_train, dtype=torch.float32)\nX_test_tensor = torch.tensor(X_test, dtype=torch.float32)\ny_test_tensor = torch.tensor(y_test, dtype=torch.float32)\n\n# Create a PyTorch dataset\ntrain_dataset = TensorDataset(X_train_tensor, y_train_tensor)\ntest_dataset = TensorDataset(X_test_tensor, y_test_tensor)\n\n# Create a PyTorch dataloader\nbatch_size = 32\ntrain_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\ntest_dataloader = DataLoader(test_dataset, batch_size=batch_size)\n\ntorch_net.to(getDevice(\"cpu\"))\n\n# train the net\ncriterion = nn.MSELoss()\noptimizer = optim.Adam(torch_net.parameters(), lr=0.01)\nn_epochs = 100\nlosses = []\nfor epoch in range(n_epochs):\n    for inputs, targets in train_dataloader:\n        targets = targets.view(-1, 1)\n        optimizer.zero_grad()\n        outputs = torch_net(inputs)\n        loss = criterion(outputs, targets)\n        losses.append(loss.item())\n        loss.backward()\n        optimizer.step()\n# visualize the network training\nplt.plot(losses)\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.show()",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Saving and Loading</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html",
    "href": "a_01_intro_to_notebooks.html",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "",
    "text": "A.1 Different Notebook cells\nThere are different cells that the notebook is currently supporting:\nAs a default, every cells in jupyter is set to “code”",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#different-notebook-cells",
    "href": "a_01_intro_to_notebooks.html#different-notebook-cells",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "",
    "text": "code cells\nmarkdown cells\nraw cells\n\n\n\nA.1.1 Code cells\nThe code cells are used to execute the code. They are following the logic of the choosen kernel. Therefore, it is important to keep in mind which programming language is currently used. Otherwise one might yield an error because of the wrong syntax.\nThe code cells are executed my be ▶ Run button (can be found in the header of the notebook).\n\n\nA.1.2 Markdown cells\nThe markdown cells are a usefull tool to comment the written code. Especially with the help of headers can the code be brought in a more readable format. If you are not familiar with the markdown syntax, you can find a usefull cheat sheet here: Markdown Cheat Sheeet\n\n\nA.1.3 Raw cells\nThe “Raw NBConvert” cell type can be used to render different code formats into HTML or LaTeX by Sphinx. This information is stored in the notebook metadata and converted appropriately.\n\nA.1.3.1 Usage\nTo select a desired format from within Jupyter, select the cell containing your special code and choose options from the following dropdown menus:\n\nSelect “Raw NBConvert”\nSwitch the Cell Toolbar to “Raw Cell Format” (The cell toolbar can be found under View)\nChose the appropriate “Raw NBConvert Format” within the cell\n\nData Science is fun",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#install-packages",
    "href": "a_01_intro_to_notebooks.html#install-packages",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "A.2 Install Packages",
    "text": "A.2 Install Packages\nBecause python is a heavily used programming language, there are many different packags that can make your life easier. Sadly, there are only a few standard packages that are already included in your python enviroment. If you have the need to install a new package in your enviroment, you can simply do that by exectuing the following code snippet in a code cell\n!pip install numpy\n\nThe ! is used to run the cell as a shell command\npip is package manager for python packages.\nnumpy is the the package you want to install\n\nHint: It is often usefull to restart the kernel after installing a package, otherwise loading the package could lead to an error.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#load-packages",
    "href": "a_01_intro_to_notebooks.html#load-packages",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "A.3 Load Packages",
    "text": "A.3 Load Packages\nAfter successfully installing the package it is necessary to import them before you can work with them. The import of the packages is done in the following way:\nimport numpy as np\nThe imported packages are often abbreviated. This is because you need to specify where the function is coming from.\nThe most common abbreviations for data science packages are:\n\nAbbreviations for data science packages\n\n\nAbbreviation\nPackage\nImport\n\n\n\n\nnp\nnumpy\nimport numpy as np\n\n\npd\npandas\nimport pandas as pd\n\n\nplt\nmatplotlib\nimport matplotlib.pyplot as plt\n\n\npx\nplotly\nimport plotly.exprss as px\n\n\ntf\ntensorflow\nimport tensorflow as tf\n\n\nsns\nseaborn\nimport seaborn as sns\n\n\ndt\ndatetime\nimport datetime as dt\n\n\npkl\npickle\nimport pickle as pkl",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#functions-in-python",
    "href": "a_01_intro_to_notebooks.html#functions-in-python",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "A.4 Functions in Python",
    "text": "A.4 Functions in Python\nBecause python is not using Semicolon’s it is import to keep track of indentation in your code. The indentation works as a placeholder for the semicolons. This is especially important if your are defining loops, functions, etc. …\nExample: We are defining a function that calculates the squared sum of its input parameters\n\ndef squared_sum(x,y): \n    z = x**2 + y**2\n    return z\n\nIf you are working with something that needs indentation, it will be already done by the notebook.\nHint: Keep in mind that is good practice to use the return parameter. If you are not using return and a function has multiple paramaters that you would like to return, it will only return the last one defined.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#list-of-useful-jupyter-notebook-shortcuts",
    "href": "a_01_intro_to_notebooks.html#list-of-useful-jupyter-notebook-shortcuts",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "A.5 List of Useful Jupyter Notebook Shortcuts",
    "text": "A.5 List of Useful Jupyter Notebook Shortcuts\n\nList of useful Jupyter Notebook Shortcuts\n\n\n\n\n\n\n\nFunction\nKeyboard Shortcut\nMenu Tools\n\n\n\n\nSave notebook\nEsc + s\nFile → Save and Checkpoint\n\n\nCreate new Cell\nEsc + a (above),  Esc + b (below)\nInsert → Cell above; Insert → Cell below\n\n\nRun Cell\nCtrl + enter\nCell → Run Cell\n\n\nCopy Cell\nc\nCopy Key\n\n\nPaste Cell\nv\nPaste Key\n\n\nInterrupt Kernel\nEsc + i i\nKernel → Interrupt\n\n\nRestart Kernel\nEsc + 0 0\nKernel → Restart\n\n\n\nIf you combine everything you can create beautiful graphics\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate 100 random data points along 3 dimensions\nx, y, scale = np.random.randn(3, 100)\nfig, ax = plt.subplots()\n\n# Map each onto a scatterplot we'll create with Matplotlib\nax.scatter(x=x, y=y, c=scale, s=np.abs(scale)*500)\nax.set(title=\"Some random data, created with the Jupyter Notebook!\")\nplt.show()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html",
    "href": "a_02_git_intro_en.html",
    "title": "Appendix B — Git Introduction",
    "section": "",
    "text": "B.1 Learning Objectives\nIn this learning unit, you will learn how to set up Git as a version control system for a project. The most important Git commands will be explained. You will learn how to track and manage changes to your projects with Git. Specifically:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#learning-objectives",
    "href": "a_02_git_intro_en.html#learning-objectives",
    "title": "Appendix B — Git Introduction",
    "section": "",
    "text": "Initializing a repository: git init\nIgnoring files: .gitignore\nAdding files to the staging area: git add\nChecking status changes: git status\nReviewing history: git log\nCreating a new branch: git branch\nSwitching to the current branch: git switch and git checkout\nMerging two branches: git merge\nResolving conflicts\nReverting changes: git revert\nUploading changes to GitLab: git push\nDownloading changes from GitLab: git pull\nAdvanced: git rebase",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#basics-of-git",
    "href": "a_02_git_intro_en.html#basics-of-git",
    "title": "Appendix B — Git Introduction",
    "section": "B.2 Basics of Git",
    "text": "B.2 Basics of Git\n\nB.2.1 Initializing a Repository: git init\nTo set up Git as a version control system for your project, you need to initialize a new Git repository at the top-level folder, which is the working directory of your project. This is done using the git init command.\nAll files in this folder and its subfolders will automatically become part of the repository. Creating a Git repository is similar to adding an all-powerful passive observer of all things to your project. Git sits there, observes, and takes note of even the smallest changes, such as a single character in a file within a repository with hundreds of files. And it will tell you where these changes occurred if you forget. Once Git is initialized, it monitors all changes made within the working directory, and it tracks the history of events from that point forward. For this purpose, a historical timeline is created for your project, referred to as a “branch,” and the initial branch is named main. So, when someone says they are on the main branch or working on the main branch, it means they are in the historical main timeline of the project. The Git repository, often abbreviated as repo, is a virtual representation of your project, including its history and branches, a book, if you will, where you can look up and retrieve the entire history of the project: you work in your working directory, and the Git repository tracks and stores your work.\n\n\nB.2.2 Ignoring Files: .gitignore\nIt’s useful that Git watches and keeps an eye on everything in your project. However, in most projects, there are files and folders that you don’t need or want to keep an eye on. These may include system files, local project settings, libraries with dependencies, and so on.\nYou can exclude any file or folder from your Git repository by including them in the .gitignore file. In the .gitignore file, you create a list of file names, folder names, and other items that Git should not track, and Git will ignore these items. Hence the name “gitignore.” Do you want to track a file that you previously ignored? Simply remove the mention of the file in the gitignore file, and Git will start tracking it again.\n\n\nB.2.3 Adding Changes to the Staging Area: git add\nThe interesting thing about Git as an all-powerful, passive observer of all things is that it’s very passive. As long as you don’t tell Git what to remember, it will passively observe the changes in the project folder but do nothing.\nWhen you make a change to your project that you want Git to include in the project’s history to take a snapshot of so you can refer back to it later, your personal checkpoint, if you will, you need to first stage the changes in the staging area. What is the staging area? The staging area is where you collect changes to files that you want to include in the project’s history.\nThis is done using the git add command. You can specify which files you want to add by naming them, or you can add all of them using -A. By doing this, you’re telling Git that you’ve made changes and want it to remember these particular changes so you can recall them later if needed. This is important because you can choose which changes you want to stage, and those are the changes that will eventually be transferred to the history.\nNote: When you run git add, the changes are not transferred to the project’s history. They are only transferred to the staging area.\n\nExample B.1 (Example of git add from the beginning)  \n# Create a new directory for your\n# repository and navigate to that directory:\n\nmkdir my-repo\ncd my-repo\n\n# Initialize the repository with git init:\n\ngit init\n\n# Create a .gitignore file for Python code.\n# You can use a template from GitHub:\n\ncurl https://raw.githubusercontent.com/github/gitignore/master/Python.gitignore -o .gitignore\n\n# Add your files to the repository using git add:\n\ngit add .\nThis adds all files in the current directory to the repository, except for the files listed in the .gitignore file.\n\n\n\nB.2.4 Transferring Changes to Memory: git commit\nThe power of Git becomes evident when you start transferring changes to the project history. This is done using the git commit command. When you run git commit, you inform Git that the changes in the staging area should be added to the history of the project so that they can be referenced or retrieved later.\nAdditionally, you can add a commit message with the -m option to explain what changes were made. So when you look back at the project history, you can see that you added a new feature.\ngit commit creates a snapshot, an image of the current state of your project at that specific time, and adds it to the branch you are currently working on.\nAs you work on your project and transfer more snapshots, the branch grows and forms a timeline of events. This means you can now look back at every transfer in the branch and see what your code looked like at that time.\nYou can compare any phase of your code with any other phase of your code to find errors, restore deleted code, or do things that would otherwise not be possible, such as resetting the project to a previous state or creating a new timeline from any point.\nSo how often should you add these commits? My rule of thumb is not to commit too often. It’s better to have a Git repository with too many commits than one with too few commits.\n\nExample B.2 (Continuing the example from above:) After adding your files with git add, you can create a commit to save your changes. Use the git commit command with the -m option to specify your commit message:\ngit commit -m \"My first commit message\"\nThis creates a new commit with the added files and the specified commit message.\n\n\n\nB.2.5 Check the Status of Your Repository: git status\nIf you’re wondering what you’ve changed in your project since the last commit snapshot, you can always check the Git status. Git will list every modified file and the current status of each file.\nThis status can be either:\n\nUnchanged (unmodified), meaning nothing has changed since you last transferred it, or\nIt’s been changed (changed) but not staged (staged) to be transferred into the history, or\nSomething has been added to staging (staged) and is ready to be transferred into the history.\n\nWhen you run git status, you get an overview of the current state of your project.\n\nExample B.3 (Continuing the example from above:) The git status command displays the status of your working directory and the staging area. It shows you which files have been modified, which files are staged for commit, and which files are not yet being tracked:\ngit status\ngit status is a useful tool to keep track of your changes and ensure that you have added all the desired files for commit.\n\n\n\nB.2.6 Review Your Repository’s History: git log\n\nExample B.4 (Continuing the example from above:) You can view the history of your commits with the git log command. This command displays a list of all the commits in the current branch, along with information such as the author, date, and commit message:\ngit log\nThere are many options to customize the output of git log. For example, you can use the --pretty option to change the format of the output:\ngit log --pretty=oneline\nThis displays each commit in a single line.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#branches-timelines",
    "href": "a_02_git_intro_en.html#branches-timelines",
    "title": "Appendix B — Git Introduction",
    "section": "B.3 Branches (Timelines)",
    "text": "B.3 Branches (Timelines)\n\nB.3.1 Creating an Alternative Timeline: git branch\nIn the course of developing a project, you often reach a point where you want to add a new feature, but doing so might require changing the existing code in a way that could be challenging to undo later.\nOr maybe you just want to experiment and be able to discard your work if the experiment fails. In such cases, Git allows you to create an alternative timeline called a branch to work in.\nThis new branch has its own name and exists in parallel with the main branch and all other branches in your project.\nDuring development, you can switch between branches and work on different versions of your code concurrently. This way, you can have a stable codebase in the main branch while developing an experimental feature in a separate branch. When you switch from one branch to another, the code you’re working on is automatically reset to the latest commit of the branch you’re currently in.\nIf you’re working in a team, different team members can work on their own branches, creating an entire universe of alternative timelines for your project. When features are completed, they can be seamlessly merged back into the main branch.\n\nExample B.5 (Continuing the example from above:) To create a new branch, you can use the git branch command with the name of the new branch as an argument:\ngit branch my-tests\n\n\n\nB.3.2 The Pointer to the Current Branch: HEAD\nHow does Git know where you are on the timeline, and how can you keep track of your position?\nYou’re always working at the tip (HEAD) of the currently active branch. The HEAD pointer points there quite literally. In a new project archive with just a single main branch and only new commits being added, HEAD always points to the latest commit in the main branch. That’s where you are.\nHowever, if you’re in a repository with multiple branches, meaning multiple alternative timelines, HEAD will point to the latest commit in the branch you’re currently working on.\n\n\nB.3.3 Switching to an Alternative Timeline: git switch\nAs your project grows, and you have multiple branches, you need to be able to switch between these branches. This is where the switch command comes into play.\nAt any time, you can use the git switch command with the name of the branch you want to switch to, and HEAD moves from your current branch to the one you specified.\nIf you’ve made changes to your code before switching, Git will attempt to carry those changes over to the branch you’re switching to. However, if these changes conflict with the target branch, the switch will be canceled.\nTo resolve this issue without losing your changes, return to the original branch, add and commit your recent changes, and then perform the switch.\n\n\nB.3.4 Switching to an Alternative Timeline and Making Changes: git checkout\nTo switch between branches, you can also use the git checkout command. It works similarly to git switch for this purpose: you pass the name of the branch you want to switch to, and HEAD moves to the beginning of that branch.\nBut checkout can do more than just switch to another timeline. With git checkout, you can also move to any commit point in any timeline. In other words, you can travel back in time and work on code from the past.\nTo do this, use git checkout and provide the commit ID. This is an automatically generated, random combination of letters and numbers that identifies each commit. You can retrieve the commit ID using git log. When you run git log, you get a list of all the commits in your repository, starting with the most recent ones.\nWhen you use git checkout with an older commit ID, you check out a commit in the middle of a branch. This disrupts the timeline, as you’re actively attempting to change history. Git doesn’t want you to do that because, much like in a science fiction movie, altering the past might also alter the future. In our case, it would break the version control branch’s coherence.\nTo prevent you from accidentally disrupting time and altering history, checking out an earlier commit in any branch results in the warning “Detached Head,” which sounds rather ominous. The “Detached Head” warning is appropriate because it accurately describes what’s happening. Git literally detaches the head from the branch and sets it aside.\nNow, you’re working outside of time in a space unbound to any timeline, which again sounds rather threatening but is perfectly fine in reality.\nTo continue working on this past code, all you need to do is reattach it to the timeline. You can use git branch to create a new branch, and the detached head will automatically attach to this new branch.\nInstead of breaking the history, you’ve now created a new alternative timeline that starts in the past, allowing you to work safely. You can continue working on the branch as usual.\n\nExample B.6 (Continuing the example from above:) To switch to a new branch, you can use the git checkout command:\ngit checkout meine-tests\nNow you’re using the new branch and can make changes independently from the original branch.\n\n\n\nB.3.5 The Difference Between checkout and switch\nWhat is the difference between git switch and git checkout? git switch and git checkout are two different commands that both serve the purpose of switching between branches. You can use both to switch between branches, but they have an important distinction. git switch is a new command introduced with Git 2.23. git checkout is an older command that has existed since Git 1.6.0. So, git switch and git checkout have different origins. git switch was introduced to separate the purposes of git checkout. git checkout has two different purposes: 1. It can be used to switch between branches, and 2. It can be used to reset files to the state of the last commit.\nHere’s an example: In my project, I made a change since the last commit, but I haven’t staged it yet. Then, I realized that I actually don’t want this change. I want to reset the file to the state before the last commit. As long as I haven’t committed my changes, I can do this with git checkout by targeting the specific file. So, if that file is named main.js, I can say: git checkout main.js. And the file will be reset to the state of the last commit, which makes sense. I’m checking out the file from the last commit.\nBut that’s quite different from switching between the beginning of one branch to another. git switch and git restore were introduced to separate these two operations. git switch is for switching between branches, and git restore is for resetting the specified file to the state of the last commit. If you try to restore a file with git switch, it simply won’t work. It’s not intended for that. As I mentioned earlier, it’s about separating concerns.\n\nExample B.7 (Difference between git switch and git checkout) Here’s an example demonstrating how to initialize a repository and switch between branches:\n# Create a new directory for your repository\n# and navigate to that directory:\nmkdir my-repo\ncd my-repo\n\n# Initialize the repository with git init:\ngit init\n\n# Create a new branch with git branch:\ngit branch my-new-branch\n\n# Switch to the new branch using git switch:\ngit switch my-new-branch\n\n# Alternatively, you can also use git checkout\n# to switch to the new branch:\n\ngit checkout my-new-branch\nBoth commands lead to the same result: You are now on the new branch.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#merging-branches-and-resolving-conflicts",
    "href": "a_02_git_intro_en.html#merging-branches-and-resolving-conflicts",
    "title": "Appendix B — Git Introduction",
    "section": "B.4 Merging Branches and Resolving Conflicts",
    "text": "B.4 Merging Branches and Resolving Conflicts\n\nB.4.1 git merge: Merging Two Timelines\nGit allows you to split your development work into as many branches or alternative timelines as you like, enabling you to work on many different versions of your code simultaneously without losing or overwriting any of your work.\nThis is all well and good, but at some point, you need to bring those various versions of your code back together into one branch. That’s where git merge comes in.\nConsider an example where you have two branches, a main branch and an experimental branch called experimental-branch. In the experimental branch, there is a new feature. To merge these two branches, you set HEAD to the branch where you want to incorporate the code and execute git merge followed by the name of the branch you want to merge. HEAD is a special pointer that points to the current branch. When you run git merge, it combines the code from the branch associated with HEAD with the code from the branch specified by the branch name you provide.\n# Initialize the repository\ngit init\n\n# Create a new branch called \"experimental-branch\"\ngit branch experimental-branch\n\n# Switch to the \"experimental-branch\"\ngit checkout experimental-branch\n\n# Add the new feature here and\n# make a commit\n# ...\n\n# Switch back to the \"main\" branch\ngit checkout main\n\n# Perform the merge\ngit merge experimental-branch\nDuring the merge, matching pieces of code in the branches overlap, and any new code from the branch being merged is added to the project. So now, the main branch also contains the code from the experimental branch, and the events of the two separate timelines have been merged into a single one. What’s interesting is that even though the experimental branch was merged with the main branch, the last commit of the experimental branch remains intact, allowing you to continue working on the experimental branch separately if you wish.\n\n\nB.4.2 Resolving Conflicts When Merging\nMerging branches where there are no code changes at the same place in both branches is a straightforward process. It’s also a rare process. In most cases, there will be some form of conflict between the branches – the same code or the same code area has been modified differently in the different branches. Merging two branches with such conflicts will not work, at least not automatically.\nIn this case, Git doesn’t know how to merge this code. So, when such a situation occurs, it’s marked as a conflict, and the merging process is halted. This might sound more dramatic than it is. When you get a conflict warning, Git is saying there are two different versions here, and Git needs to know which one you want to keep. To help you figure out the conflict, Git combines all the code into a single file and automatically marks the conflicting code as the current change, which is the original code from the branch you’re working on, or as the incoming change, which is the code from the file you’re trying to merge.\nTo resolve this conflict, you’ll edit the file to literally resolve the code conflict. This might mean accepting either the current or incoming change and discarding the other. It could mean combining both changes or something else entirely. It’s up to you. So, you edit the code to resolve the conflict. Once you’ve resolved the conflict by editing the code, you add the new conflict-free version to the staging area with git add and then commit the merged code with git commit. That’s how the conflict is resolved.\nA merge conflict occurs when Git struggles to automatically merge changes from two different branches. This usually happens when changes were made to the same line in the same file in both branches. To resolve a merge conflict, you must manually edit the affected files and choose the desired changes. Git marks the conflict areas in the file with special markings like &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;. You can search for these markings and manually select the desired changes. After resolving the conflicts, you can add the changes with git add and create a new commit with git commit to complete the merge.\n\nExample B.8  \n# Perform the merge (this will cause a conflict)\ngit merge experimenteller-branch\n\n# Open the affected file in an editor and manually resolve the conflicts\n# ...\n\n# Add the modified file\ngit add &lt;filename&gt;\n\n# Create a new commit\ngit commit -m \"Resolved conflicts\"\n\n\n\nB.4.3 git revert: Undoing Something\nOne of the most powerful features of any software tool is the “Undo” button. Make a mistake, press “Undo,” and it’s as if it never happened. However, that’s not quite as simple when an all-powerful, passive observer is watching and recording your project’s history. How do you undo something that you’ve added to the history without rewriting the history?\nThe answer is that you can overwrite the history with the git reset command, but that’s quite risky and not a good practice.\nA better solution is to work with the historical timeline and simply place an older version of your code at the top of the branch. This is done with git revert. To make this work, you need to know the commit ID of the commit you want to go back to.\nThe commit ID is a machine-generated set of random numbers and letters, also known as a hash. To get a list of all the commits in the repository, including the commit ID and commit message, you can run git log.\n# Show the list of all operations in the repository\ngit log\nBy the way, it’s a good idea to leave clear and informative commit messages for this reason. This way, you know what happened in your previous commits. Once you’ve found the commit you want to revert to, call that commit ID with git revert, and then the ID. This will create a new commit at the top of the branch with the code from the reference commit. To transfer the code to the branch, add a commit message and save it. Now, the last commit in your branch matches the commit you’re reverting to, and your project’s history remains intact.\n\nExample B.9 (An example with git revert)  \n# Initialize a new repository\ngit init\n\n# Create a new file\necho \"Hello, World\" &gt; file.txt\n\n# Add the file to the repository\ngit add file.txt\n\n# Create a new commit\ngit commit -m \"First commit\"\n\n# Modify the file\necho \"Goodbye, World\" &gt; file.txt\n\n# Add the modified file\ngit add file.txt\n\n# Create a new commit\ngit commit -m \"Second commit\"\n\n# Use git log to find the commit ID of the second commit\ngit log\n\n# Use git revert to undo the changes from the second commit\ngit revert &lt;commit-id&gt;\n\nTo download the students branch from the repository git@git-ce.rwth-aachen.de:spotseven-lab/numerische-mathematik-sommersemester2023.git to your local machine, add a file, and upload the changes, you can follow these steps:\n\nExample B.10 (An example with git clone, git checkout, git add, git commit, git push)  \n# Clone the repository to your local machine:\ngit clone git@git-ce.rwth-aachen.de:spotseven-lab/numerische-mathematik-sommersemester2023.git\n\n# Change to the cloned repository:\ncd numerische-mathematik-sommersemester2023\n\n# Switch to the students branch:\ngit checkout students\n\n# Create the Test folder if it doesn't exist:\nmkdir Test\n\n# Create the Testdatei.txt file in the Test folder:\ntouch Test/Testdatei.txt\n\n# Add the file with git add:\ngit add Test/Testdatei.txt\n\n# Commit the changes with git commit:\ngit commit -m \"Added Testdatei.txt\"\n\n# Push the changes with git push:\ngit push origin students\nThis will upload the changes to the server and update the students branch in the repository.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#downloading-from-gitlab",
    "href": "a_02_git_intro_en.html#downloading-from-gitlab",
    "title": "Appendix B — Git Introduction",
    "section": "B.5 Downloading from GitLab",
    "text": "B.5 Downloading from GitLab\nTo download changes from a GitLab repository to your local machine, you can use the git pull command. This command downloads the latest changes from the specified remote repository and merges them with your local repository.\nHere is an example:\n\nExample B.11 (An example with git pull)  \n\n# Navigate to the local repository\n# linked to the GitHub repository:\ncd my-local-repository\n\n# Make sure you are in the correct branch:\ngit checkout main\n\n# Download the latest changes from GitHub:\ngit pull origin main\nThis downloads the latest changes from the main branch of the remote repository named “origin” and merges them with your local repository.\n\nIf there are conflicts between the downloaded changes and your local changes, you will need to resolve them manually before proceeding.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#advanced",
    "href": "a_02_git_intro_en.html#advanced",
    "title": "Appendix B — Git Introduction",
    "section": "B.6 Advanced",
    "text": "B.6 Advanced\n\nB.6.1 git rebase: Moving the Base of a Branch\nIn some cases, you may need to “rewrite history.” A common scenario is that you’ve been working on a new feature in a feature branch, and you realize that the work should have actually happened in the main branch.\nTo resolve this issue and make it appear as if the work occurred in the main branch, you can reset the experimental branch. “Rebase” literally means detaching the base of the experimental branch and moving it to the beginning of another branch, giving the branch a new base, thus “rebasing.”\nThis operation is performed from the branch you want to “rebase.” You use git rebase and specify the branch you want to use as the new base. If there are no conflicts between the experimental branch and the branch you want to rebase onto, this process happens automatically.\nIf there are conflicts, Git will guide you through the conflict resolution process for each commit from the rebase branch.\nThis may sound like a lot, but there’s a good reason for it. You are literally rewriting history by transferring commits from one branch to another. To maintain the coherence of the new version history, there should be no conflicts within the commits. So, you need to resolve them one by one until the history is clean. It goes without saying that this can be a fairly labor-intensive process. Therefore, you should not use git rebase frequently.\n\nExample B.12 (An example with git rebase) git rebase is a command used to change the base of a branch. This means that commits from the branch are applied to a new base, which is usually another branch. It can be used to clean up the repository history and avoid merge conflicts.\nHere is an example showing how to use git rebase:\n\nIn this example, we initialize a new Git repository and create a new file. We add the file to the repository and make an initial commit. Then, we create a new branch called “feature” and switch to that branch. We make changes to the file in the feature branch and create a new commit.\nThen, we switch back to the main branch and make changes to the file again. We add the modified file and make another commit.\nTo rebase the feature branch onto the main branch, we first switch to the feature branch and then use the git rebase command with the name of the main branch as an argument. This applies the commits from the feature branch to the main branch and changes the base of the feature branch.\n\n# Initialize a new repository\ngit init\n# Create a new file\necho \"Hello World\" &gt; file.txt\n# Add the file to the repository\ngit add file.txt\n# Create an initial commit\ngit commit -m \"Initial commit\"\n# Create a new branch called \"feature\"\ngit branch feature\n# Switch to the \"feature\" branch\ngit checkout feature\n# Make changes to the file in the \"feature\" branch\necho \"Hello Feature World\" &gt; file.txt\n# Add the modified file\ngit add file.txt\n# Create a new commit in the \"feature\" branch\ngit commit -m \"Feature commit\"\n# Switch back to the \"main\" branch\ngit checkout main\n# Make changes to the file in the \"main\" branch\necho \"Hello Main World\" &gt; file.txt\n# Add the modified file\ngit add file.txt\n# Create a new commit in the \"main\" branch\ngit commit -m \"Main commit\"\n# Use git rebase to rebase the \"feature\" branch\n# onto the \"main\" branch\ngit checkout feature\ngit rebase main",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#exercises",
    "href": "a_02_git_intro_en.html#exercises",
    "title": "Appendix B — Git Introduction",
    "section": "B.7 Exercises",
    "text": "B.7 Exercises\nIn order to be able to carry out this exercise, we provide you with a functional working environment. This can be accessed here. You can log in using your GMID. If you do not have one, you can generate one here. Once you have successfully logged in to the server, you must open a terminal instance. You are now in a position to carry out the exercise.\nAlternatively, you can also carry out the exercise locally on your computer, but then you will need to install git.\n\nB.7.1 Create project folder\nFirst create the test-repo folder via the command line and then navigate to this folder using the corresponding command.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#initialize-repo",
    "href": "a_02_git_intro_en.html#initialize-repo",
    "title": "Appendix B — Git Introduction",
    "section": "B.8 Initialize repo",
    "text": "B.8 Initialize repo\nNow initialize the repository so that the future project, which will be saved in the test-repo folder, and all associated files are versioned.\n\nB.8.1 Do not upload / ignore certain file types\nIn order to carry out this exercise, you must first download a file which you then have git ignore. To do this, download the current examination regulations for the Bachelor’s degree program in Electrical Engineering using the following command curl -o pruefungsordnung.pdf https://www.th-koeln.de/mam/downloads/deutsch/studium/studiengaenge/f07/ordnungen_plaene/f07_bpo_ba_ekb_2021_01_04.pdf.\nThe PDF file has been stored in the root directory of your repo and you must now exclude it from being uploaded so that no changes to this file are tracked. Please note that not only this one PDF file should be ignored, but all PDF files in the repo.\n\n\nB.8.2 Create file and stage it\nIn order to be able to commit a change later and thus make it traceable, it must first be staged. However, as we only have a PDF file so far, which is to be ignored by git, we cannot stage anything. Therefore, in this task, a file test.txt with some string as content is to be created and then staged.\n\n\nB.8.3 Create another file and check status\nTo understand the status function, you should create the file test2.txt and then call the status function of git.\n\n\nB.8.4 Commit changes\nAfter the changes to the test.txt file have been staged and these are now to be transferred to the project process, they must be committed. Therefore, in this step you should perform a corresponding commit in the current branch with the message test-commit. Finally, you should also display the history of the commits.\n\n\nB.8.5 Create a new branch and switch to it\nIn this task, you are to create a new branch with the name change-text in which you will later make changes. You should then switch to this branch.\n\n\nB.8.6 Commit changes in the new branch\nTo be able to merge the new branch into the main branch later, you must first make changes to the test.txt file. To do this, open the file and simply change the character string in this file before saving the changes and closing the file. Before you now commit the file, you should reset the file to the status of the last commit for practice purposes and thus undo the change. After you have done this, open the file test.txt again and change the character string again before saving and closing the file. This time you should commit the file test.txt and then commit it with the message test-commit2.\n\n\nB.8.7 Merge branch into main\nAfter you have committed the change to the test.txt file, you should merge the change-text branch including the change into the main branch so that it is also available there.\n\n\nB.8.8 Resolve merge conflict\nTo simulate a merge conflict, you must first change the content of the test.txt file before you commit the change. Then switch to the branch change-text and change the file test.txt there as well before you commit the change. Now you should try to merge the branch change-text into the main branch and solve the problems that occur in order to be able to perform the merge successfully.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_03_python_intro_en.html",
    "href": "a_03_python_intro_en.html",
    "title": "Appendix C — Python Introduction",
    "section": "",
    "text": "C.1 Recommendations\nBeginner’s Guide to Python",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Python Introduction</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html",
    "href": "a_04_spot_doc.html",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "",
    "text": "D.1 An Initial Example\nThe spotpython package provides several classes of objective functions. We will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[\nf(x) = x^2.\n\\]\nfun = analytical().fun_sphere\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\nfrom spotpython.utils.init import fun_control_init, design_control_init, surrogate_control_init, optimizer_control_init\nspot_1 = spot.Spot(fun=fun,\n                   fun_control=fun_control_init(\n                        lower = np.array([-10]),\n                        upper = np.array([100]),\n                        fun_evals = 7,\n                        fun_repeats = 1,\n                        max_time = inf,\n                        noise = False,\n                        tolerance_x = np.sqrt(np.spacing(1)),\n                        var_type=[\"num\"],\n                        infill_criterion = \"y\",\n                        n_points = 1,\n                        seed=123,\n                        log_level = 50),\n                   design_control=design_control_init(\n                        init_size=5,\n                        repeats=1),\n                   surrogate_control=surrogate_control_init(\n                        noise=False,\n                        min_theta=-4,\n                        max_theta=3,\n                        n_theta=1,\n                        model_optimizer=differential_evolution,\n                        model_fun_evals=10000))\nspot_1.run()\n\nspotpython tuning: 2.0030463147492306 [#########-] 85.71% \nspotpython tuning: 0.010360622165042565 [##########] 100.00% Done...\n\n\n\n&lt;spotpython.spot.spot.Spot at 0x16bdfb260&gt;",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#organization",
    "href": "a_04_spot_doc.html#organization",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.2 Organization",
    "text": "D.2 Organization\nSpot organizes the surrogate based optimization process in four steps:\n\nSelection of the objective function: fun.\nSelection of the initial design: design.\nSelection of the optimization algorithm: optimizer.\nSelection of the surrogate model: surrogate.\n\nFor each of these steps, the user can specify an object:\n\nfrom spotpython.fun.objectivefunctions import analytical\nfun = analytical().fun_sphere\nfrom spotpython.design.spacefilling import spacefilling\ndesign = spacefilling(2)\nfrom scipy.optimize import differential_evolution\noptimizer = differential_evolution\nfrom spotpython.build.kriging import Kriging\nsurrogate = Kriging()\n\nFor each of these steps, the user can specify a dictionary of control parameters.\n\nfun_control\ndesign_control\noptimizer_control\nsurrogate_control\n\nEach of these dictionaries has an initialzaion method, e.g., fun_control_init(). The initialization methods set the default values for the control parameters.\n\n\n\n\n\n\nImportant:\n\n\n\n\nThe specification of an lower bound in fun_control is mandatory.\n\n\n\n\nfrom spotpython.utils.init import fun_control_init, design_control_init, optimizer_control_init, surrogate_control_init\nfun_control=fun_control_init(lower=np.array([-1, -1]),\n                            upper=np.array([1, 1]))\ndesign_control=design_control_init()\noptimizer_control=optimizer_control_init()\nsurrogate_control=surrogate_control_init()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#the-spot-object",
    "href": "a_04_spot_doc.html#the-spot-object",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.3 The Spot Object",
    "text": "D.3 The Spot Object\nBased on the definition of the fun, design, optimizer, and surrogate objects, and their corresponding control parameter dictionaries, fun_control, design_control, optimizer_control, and surrogate_control, the spot object can be build as follows:\n\nfrom spotpython.spot import spot\nspot_tuner = spot.Spot(fun=fun,\n                       fun_control=fun_control,\n                       design_control=design_control,\n                       optimizer_control=optimizer_control,\n                       surrogate_control=surrogate_control)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#run",
    "href": "a_04_spot_doc.html#run",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.4 Run",
    "text": "D.4 Run\n\nspot_tuner.run()\n\nspotpython tuning: 2.217297132344163e-05 [#######---] 73.33% \nspotpython tuning: 2.217297132344163e-05 [########--] 80.00% \nspotpython tuning: 2.217297132344163e-05 [#########-] 86.67% \nspotpython tuning: 2.217297132344163e-05 [#########-] 93.33% \nspotpython tuning: 2.217297132344163e-05 [##########] 100.00% Done...\n\n\n\n&lt;spotpython.spot.spot.Spot at 0x344fe3170&gt;",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#print-the-results",
    "href": "a_04_spot_doc.html#print-the-results",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.5 Print the Results",
    "text": "D.5 Print the Results\n\nspot_tuner.print_results()\n\nmin y: 2.217297132344163e-05\nx0: 0.001637745619980198\nx1: 0.004414834154039912\n\n\n[['x0', 0.001637745619980198], ['x1', 0.004414834154039912]]",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#show-the-progress",
    "href": "a_04_spot_doc.html#show-the-progress",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.6 Show the Progress",
    "text": "D.6 Show the Progress\n\nspot_tuner.plot_progress()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#visualize-the-surrogate",
    "href": "a_04_spot_doc.html#visualize-the-surrogate",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.7 Visualize the Surrogate",
    "text": "D.7 Visualize the Surrogate\n\nThe plot method of the kriging surrogate is used.\nNote: the plot uses the interval defined by the ranges of the natural variables.\n\n\nspot_tuner.surrogate.plot()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#run-with-a-specific-start-design",
    "href": "a_04_spot_doc.html#run-with-a-specific-start-design",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.8 Run With a Specific Start Design",
    "text": "D.8 Run With a Specific Start Design\nTo pass a specific start design, use the X_start argument of the run method.\n\nspot_x0 = spot.Spot(fun=fun,\n                    fun_control=fun_control_init(\n                        lower = np.array([-10]),\n                        upper = np.array([100]),\n                        fun_evals = 7,\n                        fun_repeats = 1,\n                        max_time = inf,\n                        noise = False,\n                        tolerance_x = np.sqrt(np.spacing(1)),\n                        var_type=[\"num\"],\n                        infill_criterion = \"y\",\n                        n_points = 1,\n                        seed=123,\n                        log_level = 50),\n                    design_control=design_control_init(\n                        init_size=5,\n                        repeats=1),\n                    surrogate_control=surrogate_control_init(\n                        noise=False,\n                        min_theta=-4,\n                        max_theta=3,\n                        n_theta=1,\n                        model_optimizer=differential_evolution,\n                        model_fun_evals=10000))\nspot_x0.run(X_start=np.array([0.5, -0.5]))\nspot_x0.plot_progress()\n\nspotpython tuning: 2.0030463147492306 [#########-] 85.71% \nspotpython tuning: 0.010360622165042565 [##########] 100.00% Done...",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#init-build-initial-design",
    "href": "a_04_spot_doc.html#init-build-initial-design",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.9 Init: Build Initial Design",
    "text": "D.9 Init: Build Initial Design\n\nfrom spotpython.design.spacefilling import spacefilling\nfrom spotpython.build.kriging import Kriging\nfrom spotpython.fun.objectivefunctions import analytical\nfrom spotpython.utils.init import fun_control_init\ngen = spacefilling(2)\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin\n\nfun_control = fun_control_init(sigma=0)\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\n\n[[ 8.97647221 13.41926847]\n [ 0.66946019  1.22344228]\n [ 5.23614115 13.78185824]\n [ 5.6149825  11.5851384 ]\n [-1.72963184  1.66516096]\n [-4.26945568  7.1325531 ]\n [ 1.26363761 10.17935555]\n [ 2.88779942  8.05508969]\n [-3.39111089  4.15213772]\n [ 7.30131231  5.22275244]]\n[128.95676449  31.73474356 172.89678121 126.71295908  64.34349975\n  70.16178611  48.71407916  31.77322887  76.91788181  30.69410529]",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#replicability",
    "href": "a_04_spot_doc.html#replicability",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.10 Replicability",
    "text": "D.10 Replicability\nSeed\n\ngen = spacefilling(2, seed=123)\nX0 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=345)\nX1 = gen.scipy_lhd(3)\nX2 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=123)\nX3 = gen.scipy_lhd(3)\nX0, X1, X2, X3\n\n(array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]),\n array([[0.78373509, 0.86811887],\n        [0.06692621, 0.6058029 ],\n        [0.41374778, 0.00525456]]),\n array([[0.121357  , 0.69043832],\n        [0.41906219, 0.32838498],\n        [0.86742658, 0.52910374]]),\n array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]))",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#surrogates",
    "href": "a_04_spot_doc.html#surrogates",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.11 Surrogates",
    "text": "D.11 Surrogates\n\nD.11.1 A Simple Predictor\nThe code below shows how to use a simple model for prediction. Assume that only two (very costly) measurements are available:\n\nf(0) = 0.5\nf(2) = 2.5\n\nWe are interested in the value at \\(x_0 = 1\\), i.e., \\(f(x_0 = 1)\\), but cannot run an additional, third experiment.\n\nfrom sklearn import linear_model\nX = np.array([[0], [2]])\ny = np.array([0.5, 2.5])\nS_lm = linear_model.LinearRegression()\nS_lm = S_lm.fit(X, y)\nX0 = np.array([[1]])\ny0 = S_lm.predict(X0)\nprint(y0)\n\n[1.5]\n\n\nCentral Idea: Evaluation of the surrogate model S_lm is much cheaper (or / and much faster) than running the real-world experiment \\(f\\).",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#tensorboard-setup",
    "href": "a_04_spot_doc.html#tensorboard-setup",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.12 Tensorboard Setup",
    "text": "D.12 Tensorboard Setup\n\nD.12.1 Tensorboard Configuration\nThe TENSORBOARD_CLEAN argument can be set to True in the fun_control dictionary to archive the TensorBoard folder if it already exists. This is useful if you want to start a hyperparameter tuning process from scratch. If you want to continue a hyperparameter tuning process, set TENSORBOARD_CLEAN to False. Then the TensorBoard folder will not be archived and the old and new TensorBoard files will shown in the TensorBoard dashboard.\n\n\nD.12.2 Starting TensorBoard\nTensorBoard can be started as a background process with the following command, where ./runs is the default directory for the TensorBoard log files:\ntensorboard --logdir=\"./runs\"\n\n\n\n\n\n\nTENSORBOARD_PATH\n\n\n\nThe TensorBoard path can be printed with the following command (after a fun_control object has been created):\n\nfrom spotpython.utils.init import get_tensorboard_path\nget_tensorboard_path(fun_control)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#demotest-objective-function-fails",
    "href": "a_04_spot_doc.html#demotest-objective-function-fails",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.13 Demo/Test: Objective Function Fails",
    "text": "D.13 Demo/Test: Objective Function Fails\nSPOT expects np.nan values from failed objective function values. These are handled. Note: SPOT’s counter considers only successful executions of the objective function.\n\nimport numpy as np\nfrom spotpython.fun.objectivefunctions import analytical\nfrom spotpython.spot import spot\nimport numpy as np\nfrom math import inf\n# number of initial points:\nni = 20\n# number of points\nn = 30\n\nfun = analytical().fun_random_error\nfun_control=fun_control_init(\n    lower = np.array([-1]),\n    upper= np.array([1]),\n    fun_evals = n,\n    show_progress=False)\ndesign_control=design_control_init(init_size=ni)\n\nspot_1 = spot.Spot(fun=fun,\n                     fun_control=fun_control,\n                     design_control=design_control)\n\n# assert value error from the run method\ntry:\n    spot_1.run()\nexcept ValueError as e:\n    print(e)\n\n[        nan         nan -0.02203599 -0.21843718  0.78240941         nan\n -0.3923345   0.67234256  0.31802454 -0.68898927 -0.75129705  0.97550354\n  0.41757584         nan  0.82585329         nan -0.49274073         nan\n -0.17991251  0.1481835 ]\n\n\n[-1.]\n[nan]\n[-0.57084122]\n[0.166475]\n[nan]\n[-0.24270361]\n[-0.47259301]\n[0.95541987]\n[0.17335968]\n[-0.58552368]\n[-0.20126111]\n[-0.60100809]\n[-0.97897336]\n[-0.2748985]\n[0.8359486]\n[0.99035591]\n[0.01641232]\n[0.5629346]",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#handling-results-printing-saving-and-loading",
    "href": "a_04_spot_doc.html#handling-results-printing-saving-and-loading",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.14 Handling Results: Printing, Saving, and Loading",
    "text": "D.14 Handling Results: Printing, Saving, and Loading\nThe results can be printed with the following command:\n\nspot_tuner.print_results(print_screen=False)\n\nThe tuned hyperparameters can be obtained as a dictionary with the following command:\n\nfrom spotpython.hyperparameters.values import get_tuned_hyperparameters\nget_tuned_hyperparameters(spot_tuner, fun_control)\n\nThe results can be saved and reloaded with the following commands:\n\nfrom spotpython.utils.file import save_pickle, load_pickle\nfrom spotpython.utils.init import get_experiment_name\nexperiment_name = get_experiment_name(\"024\")\nSAVE_AND_LOAD = False\nif SAVE_AND_LOAD == True:\n    save_pickle(spot_tuner, experiment_name)\n    spot_tuner = load_pickle(experiment_name)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#spotpython-as-a-hyperparameter-tuner",
    "href": "a_04_spot_doc.html#spotpython-as-a-hyperparameter-tuner",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.15 spotpython as a Hyperparameter Tuner",
    "text": "D.15 spotpython as a Hyperparameter Tuner\n\nD.15.1 Modifying Hyperparameter Levels\nspotpython distinguishes between different types of hyperparameters. The following types are supported:\n\nint (integer)\nfloat (floating point number)\nboolean (boolean)\nfactor (categorical)\n\n\nD.15.1.1 Integer Hyperparameters\nInteger hyperparameters can be modified with the set_int_hyperparameter_values() [SOURCE] function. The following code snippet shows how to modify the n_estimators hyperparameter of a random forest model:\n\nfrom spotriver.hyperdict.river_hyper_dict import RiverHyperDict\nfrom spotpython.utils.init import fun_control_init\nfrom spotpython.hyperparameters.values import set_int_hyperparameter_values\nfrom spotpython.utils.eda import gen_design_table\nfun_control = fun_control_init(\n    core_model_name=\"forest.AMFRegressor\",\n    hyperdict=RiverHyperDict,\n)\nprint(\"Before modification:\")\nprint(gen_design_table(fun_control))\nset_int_hyperparameter_values(fun_control, \"n_estimators\", 2, 5)\nprint(\"After modification:\")\nprint(gen_design_table(fun_control))\n\nBefore modification:\n| name            | type   |   default |   lower |   upper | transform             |\n|-----------------|--------|-----------|---------|---------|-----------------------|\n| n_estimators    | int    |         3 |     2   |       5 | transform_power_2_int |\n| step            | float  |         1 |     0.1 |      10 | None                  |\n| use_aggregation | factor |         1 |     0   |       1 | None                  |\nSetting hyperparameter n_estimators to value [2, 5].\nVariable type is int.\nCore type is None.\nCalling modify_hyper_parameter_bounds().\nAfter modification:\n| name            | type   |   default |   lower |   upper | transform             |\n|-----------------|--------|-----------|---------|---------|-----------------------|\n| n_estimators    | int    |         3 |     2   |       5 | transform_power_2_int |\n| step            | float  |         1 |     0.1 |      10 | None                  |\n| use_aggregation | factor |         1 |     0   |       1 | None                  |\n\n\n\n\nD.15.1.2 Float Hyperparameters\nFloat hyperparameters can be modified with the set_float_hyperparameter_values() [SOURCE] function. The following code snippet shows how to modify the step hyperparameter of a hyperparameter of a Mondrian Regression Tree model:\n\nfrom spotriver.hyperdict.river_hyper_dict import RiverHyperDict\nfrom spotpython.utils.init import fun_control_init\nfrom spotpython.hyperparameters.values import set_float_hyperparameter_values\nfrom spotpython.utils.eda import gen_design_table\nfun_control = fun_control_init(\n    core_model_name=\"forest.AMFRegressor\",\n    hyperdict=RiverHyperDict,\n)\nprint(\"Before modification:\")\nprint(gen_design_table(fun_control))\nset_float_hyperparameter_values(fun_control, \"step\", 0.2, 5)\nprint(\"After modification:\")\nprint(gen_design_table(fun_control))\n\nBefore modification:\n| name            | type   |   default |   lower |   upper | transform             |\n|-----------------|--------|-----------|---------|---------|-----------------------|\n| n_estimators    | int    |         3 |     2   |       5 | transform_power_2_int |\n| step            | float  |         1 |     0.1 |      10 | None                  |\n| use_aggregation | factor |         1 |     0   |       1 | None                  |\nSetting hyperparameter step to value [0.2, 5].\nVariable type is float.\nCore type is None.\nCalling modify_hyper_parameter_bounds().\nAfter modification:\n| name            | type   |   default |   lower |   upper | transform             |\n|-----------------|--------|-----------|---------|---------|-----------------------|\n| n_estimators    | int    |         3 |     2   |       5 | transform_power_2_int |\n| step            | float  |         1 |     0.2 |       5 | None                  |\n| use_aggregation | factor |         1 |     0   |       1 | None                  |\n\n\n\n\nD.15.1.3 Boolean Hyperparameters\nBoolean hyperparameters can be modified with the set_boolean_hyperparameter_values() [SOURCE] function. The following code snippet shows how to modify the use_aggregation hyperparameter of a Mondrian Regression Tree model:\n\nfrom spotriver.hyperdict.river_hyper_dict import RiverHyperDict\nfrom spotpython.utils.init import fun_control_init\nfrom spotpython.hyperparameters.values import set_boolean_hyperparameter_values\nfrom spotpython.utils.eda import gen_design_table\nfun_control = fun_control_init(\n    core_model_name=\"forest.AMFRegressor\",\n    hyperdict=RiverHyperDict,\n)\nprint(\"Before modification:\")\nprint(gen_design_table(fun_control))\nset_boolean_hyperparameter_values(fun_control, \"use_aggregation\", 0, 0)\nprint(\"After modification:\")\nprint(gen_design_table(fun_control))\n\nBefore modification:\n| name            | type   |   default |   lower |   upper | transform             |\n|-----------------|--------|-----------|---------|---------|-----------------------|\n| n_estimators    | int    |         3 |     2   |       5 | transform_power_2_int |\n| step            | float  |         1 |     0.1 |      10 | None                  |\n| use_aggregation | factor |         1 |     0   |       1 | None                  |\nSetting hyperparameter use_aggregation to value [0, 0].\nVariable type is factor.\nCore type is bool.\nCalling modify_boolean_hyper_parameter_levels().\nAfter modification:\n| name            | type   |   default |   lower |   upper | transform             |\n|-----------------|--------|-----------|---------|---------|-----------------------|\n| n_estimators    | int    |         3 |     2   |       5 | transform_power_2_int |\n| step            | float  |         1 |     0.1 |      10 | None                  |\n| use_aggregation | factor |         1 |     0   |       0 | None                  |\n\n\n\n\nD.15.1.4 Factor Hyperparameters\nFactor hyperparameters can be modified with the set_factor_hyperparameter_values() [SOURCE] function. The following code snippet shows how to modify the leaf_model hyperparameter of a Hoeffding Tree Regressor model:\n\nfrom spotriver.hyperdict.river_hyper_dict import RiverHyperDict\nfrom spotpython.utils.init import fun_control_init\nfrom spotpython.hyperparameters.values import set_factor_hyperparameter_values\nfrom spotpython.utils.eda import gen_design_table\nfun_control = fun_control_init(\n    core_model_name=\"tree.HoeffdingTreeRegressor\",\n    hyperdict=RiverHyperDict,\n)\nprint(\"Before modification:\")\nprint(gen_design_table(fun_control))\nset_factor_hyperparameter_values(fun_control, \"leaf_model\", ['LinearRegression',\n                                                    'Perceptron'])\nprint(\"After modification:\")\n\nBefore modification:\n| name                   | type   | default          |   lower |    upper | transform              |\n|------------------------|--------|------------------|---------|----------|------------------------|\n| grace_period           | int    | 200              |  10     | 1000     | None                   |\n| max_depth              | int    | 20               |   2     |   20     | transform_power_2_int  |\n| delta                  | float  | 1e-07            |   1e-08 |    1e-06 | None                   |\n| tau                    | float  | 0.05             |   0.01  |    0.1   | None                   |\n| leaf_prediction        | factor | mean             |   0     |    2     | None                   |\n| leaf_model             | factor | LinearRegression |   0     |    2     | None                   |\n| model_selector_decay   | float  | 0.95             |   0.9   |    0.99  | None                   |\n| splitter               | factor | EBSTSplitter     |   0     |    2     | None                   |\n| min_samples_split      | int    | 5                |   2     |   10     | None                   |\n| binary_split           | factor | 0                |   0     |    1     | None                   |\n| max_size               | float  | 500.0            | 100     | 1000     | None                   |\n| memory_estimate_period | int    | 6                |   3     |    8     | transform_power_10_int |\n| stop_mem_management    | factor | 0                |   0     |    1     | None                   |\n| remove_poor_attrs      | factor | 0                |   0     |    1     | None                   |\n| merit_preprune         | factor | 1                |   0     |    1     | None                   |\nAfter modification:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_05_datasets.html",
    "href": "a_05_datasets.html",
    "title": "Appendix E — Datasets",
    "section": "",
    "text": "E.1 The Diabetes Data Set\nThis section describes the Diabetes data set. This is a PyTorch Dataset for regression, which is derived from the Diabetes data set from scikit-learn (sklearn). Ten baseline variables, age, sex, body mass index, average blood pressure, and six blood serum measurements were obtained for each of n = 442 diabetes patients, as well as the response of interest, a quantitative measure of disease progression one year after baseline.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "a_05_datasets.html#sec-a-05-diabetes-data-set",
    "href": "a_05_datasets.html#sec-a-05-diabetes-data-set",
    "title": "Appendix E — Datasets",
    "section": "",
    "text": "E.1.1 Data Exploration of the sklearn Diabetes Data Set\n\nfrom sklearn.datasets import load_diabetes\nfrom spotpython.plot.xy import plot_y_vs_X\ndata = load_diabetes()\nX, y = data.data, data.target\nplot_y_vs_X(X, y, nrows=5, ncols=2, figsize=(20, 15))\n\n\n\n\n\n\n\n\n\nEach of these 10 feature variables have been mean centered and scaled by the standard deviation times the square root of n_samples (i.e., the sum of squares of each column totals 1).\ns3_hdl shows a different behavior than the other features. It has a negative slope. HDL (high-density lipoprotein) cholesterol, sometimes called “good” cholesterol, absorbs cholesterol in the blood and carries it back to the liver. The liver then flushes it from the body. High levels of HDL cholesterol can lower your risk for heart disease and stroke.\n\n\n\nE.1.2 Generating the PyTorch Data Set\nspotpython provides a Diabetes class to load the diabetes data set. The Diabetes class is a subclass of torch.utils.data.Dataset. It loads the diabetes data set from sklearn and returns the data set as a torch.utils.data.Dataset object, so that features and targets can be accessed as torch.tensors. [CODE REFERENCE].\n\nfrom spotpython.data.diabetes import Diabetes\ndata_set = Diabetes()\nprint(len(data_set))\nprint(data_set.names)\n\n442\n['age', 'sex', 'bmi', 'bp', 's1_tc', 's2_ldl', 's3_hdl', 's4_tch', 's5_ltg', 's6_glu']",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "a_05_datasets.html#sec-a-05-friedman",
    "href": "a_05_datasets.html#sec-a-05-friedman",
    "title": "Appendix E — Datasets",
    "section": "E.2 The Friedman Drift Dataset",
    "text": "E.2 The Friedman Drift Dataset\n\nE.2.1 The Friedman Drift Dataset as Implemented in river\nWe will describe the Friedman synthetic dataset with concept drifts [SOURCE], see also Friedman (1991) and Ikonomovska, Gama, and Džeroski (2011). Each observation is composed of ten features. Each feature value is sampled uniformly in [0, 1]. Only the first five features are relevant. The target is defined by different functions depending on the type of the drift. Global Recurring Abrupt drift will be used, i.e., the concept drift appears over the whole instance space.\nThe target is defined by the following function: \\[\ny = 10 \\sin(\\pi x_0 x_1) + 20 (x_2 - 0.5)^2 + 10 x_3 + 5 x_4 + \\epsilon,\n\\] where \\(\\epsilon \\sim \\mathcal{N}(0, 1)\\) is normally distributed noise.\nIf the Global Recurring Abrupt drift variant of the Friedman Drift dataset is used, the target function changes at two points in time, namely \\(p_1\\) and \\(p_2\\). At the first point, the concept changes to: \\[\ny = 10 \\sin(\\pi x_3 x_5) + 20 (x_1 - 0.5)^2 + 10 x_0 + 5 x_2 + \\epsilon,\n\\] At the second point of drift the old concept reoccurs. This can be implemented as follows, see https://riverml.xyz/latest/api/datasets/synth/FriedmanDrift/:\ndef __iter__(self):\n    rng = random.Random(self.seed)\n\n    i = 0\n    while True:\n        x = {i: rng.uniform(a=0, b=1) for i in range(10)}\n        y = self._global_recurring_abrupt_gen(x, i) + rng.gauss(mu=0, sigma=1)\n\n        yield x, y\n        i += 1\ndef _global_recurring_abrupt_gen(self, x, index: int):\n    if index &lt; self._change_point1 or index &gt;= self._change_point2:\n        # The initial concept is recurring\n        return (\n            10 * math.sin(math.pi * x[0] * x[1]) + 20 * (x[2] - 0.5) ** 2 + 10 * x[3] + 5 * x[4]\n        )\n    else:\n        # Drift: the positions of the features are swapped\n        return (\n            10 * math.sin(math.pi * x[3] * x[5]) + 20 * (x[1] - 0.5) ** 2 + 10 * x[0] + 5 * x[2]\n        )\nspotpython requires the specification of a train and test data set. These data sets can be generated as follows:\n\nfrom river.datasets import synth\nimport pandas as pd\nimport numpy as np\nfrom spotriver.utils.data_conversion import convert_to_df\n\nseed = 123\nshuffle = True\nn_train = 6_000\nn_test = 4_000\nn_samples = n_train + n_test\ntarget_column = \"y\"\n\ndataset = synth.FriedmanDrift(\n   drift_type='gra',\n   position=(n_train/4, n_train/2),\n   seed=123\n)\n\ntrain = convert_to_df(dataset, n_total=n_train)\ntrain.columns = [f\"x{i}\" for i in range(1, 11)] + [target_column]\n\n\ndataset = synth.FriedmanDrift(\n   drift_type='gra',\n   position=(n_test/4, n_test/2),\n   seed=123\n)\ntest = convert_to_df(dataset, n_total=n_test)\ntest.columns = [f\"x{i}\" for i in range(1, 11)] + [target_column]\n\n\ndef plot_data_with_drift_points(data, target_column, n_train, title=\"\"):\n    indices = range(len(data))\n    y_values = data[target_column]\n\n    plt.figure(figsize=(10, 6))\n    plt.plot(indices, y_values, label=\"y Value\", color='blue')\n\n    drift_points = [n_train / 4, n_train / 2]\n    for dp in drift_points:\n        plt.axvline(x=dp, color='red', linestyle='--', label=f'Drift Point at {int(dp)}')\n\n    handles, labels = plt.gca().get_legend_handles_labels()\n    by_label = dict(zip(labels, handles))\n    plt.legend(by_label.values(), by_label.keys())\n\n    plt.xlabel('Index')\n    plt.ylabel('Target Value (y)')\n    plt.title(title)\n    plt.grid(True)\n    plt.show()\n\n\nplot_data_with_drift_points(train, target_column, n_train, title=\"Training Data with Drift Points\")\n\n\n\n\n\n\n\n\n\nplot_data_with_drift_points(test, target_column, n_train, title=\"Testing Data with Drift Points\")\n\n\n\n\n\n\n\n\n\n\nE.2.2 The Friedman Drift Data Set from spotpython\nA data generator for the Friedman Drift dataset is implemented in the spotpython package, see friedman.py. The spotpython version is a simplified version of the river implementation. The spotPyton version allows the generation of constant input values for the features. This is useful for visualizing the concept drifts. For the productive use the river version should be used.\nPlotting the first 100 samples of the Friedman Drift dataset, we can not see the concept drifts at \\(p_1\\) and \\(p_2\\). Drift can be visualized by plotting the target values over time for constant features, e,g, if \\(x_0\\) is set to \\(1\\) and all other features are set to \\(0\\). This is illustrated in the following plot.\n\nfrom spotpython.data.friedman import FriedmanDriftDataset\n\ndef plot_friedman_drift_data(n_samples, seed, change_point1, change_point2, constant=True):\n    data_generator = FriedmanDriftDataset(n_samples=n_samples, seed=seed, change_point1=change_point1, change_point2=change_point2, constant=constant)\n    data = [data for data in data_generator]\n    indices = [i for _, _, i in data]\n    values = {f\"x{i}\": [] for i in range(5)}\n    values[\"y\"] = []\n    for x, y, _ in data:\n        for i in range(5):\n            values[f\"x{i}\"].append(x[i])\n        values[\"y\"].append(y)\n\n    plt.figure(figsize=(10, 6))\n    for label, series in values.items():\n        plt.plot(indices, series, label=label)\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    plt.axvline(x=change_point1, color='k', linestyle='--', label='Drift Point 1')\n    plt.axvline(x=change_point2, color='r', linestyle='--', label='Drift Point 2')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\nplot_friedman_drift_data(n_samples=100, seed=42, change_point1=50, change_point2=75, constant=False)\nplot_friedman_drift_data(n_samples=100, seed=42, change_point1=50, change_point2=75, constant=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFriedman, Jerome H. 1991. “Multivariate Adaptive Regression Splines.” The Annals of Statistics 19 (1): 1–67.\n\n\nIkonomovska, Elena, João Gama, and Sašo Džeroski. 2011. “Learning Model Trees from Evolving Data Streams.” Data Mining and Knowledge Discovery 23 (1): 128–68.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>E</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "a_99_solutions.html",
    "href": "a_99_solutions.html",
    "title": "Appendix F — Solutions to Selected Exercises",
    "section": "",
    "text": "F.1 Data-Driven Modeling and Optimization",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Solutions to Selected Exercises</span>"
    ]
  },
  {
    "objectID": "a_99_solutions.html#data-driven-modeling-and-optimization",
    "href": "a_99_solutions.html#data-driven-modeling-and-optimization",
    "title": "Appendix F — Solutions to Selected Exercises",
    "section": "",
    "text": "F.1.1 Histograms\n\nSolution F.1 (Density Curve). \n\nWe can calculate propabilities.\nWe only need two parameters (the mean and the sd) to form the curve -&gt; Store data more efficently\nBlanks can be filled\n\n\n\n\nF.1.2 The Normal Distribution\n\nSolution F.2 (TwoSDAnswer). 95%\n\n\nSolution F.3 (OneSDAnswer). 68%\n\n\nSolution F.4 (ThreeSDAnswer). 99,7%\n\n\nSolution F.5 (DataRangeAnswer). 80 - 120\n\n\nSolution F.6 (PeakHeightAnswer). low\n\n\n\nF.1.3 The mean, the media, and the mode\n\n\nF.1.4 The exponential distribution\n\n\nF.1.5 Population and Estimated Parameters\n\nSolution F.7 (ProbabilityAnswer). 50%\n\n\n\nF.1.6 Calculating the Mean, Variance and Standard Deviation\n\nSolution F.8 (MeanDifferenceAnswer). If we have all the data, \\(\\mu\\) is the population mean and x-bar is the sample mean. We don’t have the full information.\n\n\nSolution F.9 (EstimateMeanAnswer). Sum of the values divided by n.\n\n\nSolution F.10 (SigmaSquaredAnswer). Variance\n\n\nSolution F.11 (EstimatedSDAnswer). The same as the normal standard deviation, but using n-1.\n\n\nSolution F.12 (VarianceDifferenceAnswer). \\(n\\) and \\(n-1\\)\n\n\nSolution F.13 (ModelBenefitsAnswer). \n\nApproximation\nPrediction\nUnderstanding\n\n\n\nSolution F.14 (SampleDefinitionAnswer). It’s a subset of the data.\n\n\n\nF.1.7 Hypothesis Testing and the Null-Hypothesis\n\nSolution F.15 (RejectHypothesisAnswer). It means the evidence supports the alternative hypothesis, indicating that the null hypothesis is unlikely to be true.\n\n\nSolution F.16 (NullHypothesisAnswer). It’s a statement that there is no effect or no difference, and it serves as the default or starting assumption in hypothesis testing.\n\n\nSolution F.17 (BetterDrugAnswer). By conducting experiments and statistical tests to compare the new drug’s effectiveness against the current standard and demonstrating a significant improvement.\n\n\n\nF.1.8 Alternative Hypotheses, Main Ideas\n\n\nF.1.9 p-values: What they are and how to interpret them\n\nSolution F.18 (PValueIntroductionAnswer). We can reject the null hypothesis. We can make a decision.\n\n\nSolution F.19 (PValueRangeAnswer). It can only be between 0 and 1.\n\n\nSolution F.20 (PValueRangeAnswer). It can only be between 0 and 1.\n\n\nSolution F.21 (TypicalPValueAnswer). The chance that we wrongly reject the null hypothesis.\n\n\nSolution F.22 (FalsePositiveAnswer). If we have a false-positive, we succeed in rejecting the null hypothesis. But in fact/reality, this is false -&gt; False positive.\n\n\n\nF.1.10 How to calculate p-values\n\nSolution F.23 (CalculatePValueAnswer). Probability of specific result, probability of outcome with the same probability, and probability of events with smaller probability.\n\n\nSolution F.24 (SDCalculationAnswer). 7 is the SD.\n\n\nSolution F.25 (SidedPValueAnswer). If we are not interested in the direction of the change, we use the two-sided. If we want to know about the direction, the one-sided.\n\n\nSolution F.26 (CoinTestAnswer). TBD\n\n\nSolution F.27 (BorderPValueAnswer). TBD\n\n\nSolution F.28 (OneSidedPValueCautionAnswer). If you look in the wrong direction, there is no change.\n\n\nSolution F.29 (BinomialDistributionAnswer). TBD\n\n\n\nF.1.11 p-hacking: What it is and how to avoid it\n\nSolution F.30 (PHackingWaysAnswer). \n\nPerforming repeats until you find one result with a small p-value -&gt; false positive result.\nIncreasing the sample size within one experiment when it is close to the threshold.\n\n\n\nSolution F.31 (AvoidPHackingAnswer). Specify the number of repeats and the sample sizes at the beginning.\n\n\nSolution F.32 (MultipleTestingProblemAnswer). TBD\n\n\n\nF.1.12 Covariance\n\nSolution F.33 (CovarianceDefinitionAnswer). Formula\n\n\nSolution F.34 (CovarianceMeaningAnswer). Large values in the first variable result in large values in the second variable.\n\n\nSolution F.35 (CovarianceVarianceRelationshipAnswer). Formula\n\n\nSolution F.36 (HighCovarianceAnswer). No, size doesn’t matter.\n\n\nSolution F.37 (ZeroCovarianceAnswer). No relationship\n\n\nSolution F.38 (NegativeCovarianceAnswer). Yes\n\n\nSolution F.39 (NegativeVarianceAnswer). No\n\n\n\nF.1.13 Pearson’s Correlation\n\nSolution F.40 (CorrelationValueAnswer). Recalculate\n\n\nSolution F.41 (CorrelationRangeAnswer). From -1 to 1\n\n\nSolution F.42 (CorrelationFormulaAnswer). Formula\n\n\n\nF.1.14 Boxplots\n\nSolution F.43 (UnderstandingStatisticalPower). It is the probability of correctly rejecting the null hypothesis.\n\n\nSolution F.44 (DistributionEffectOnPower). Power analysis is not applicable.\n\n\nSolution F.45 (IncreasingPower). By taking more samples.\n\n\nSolution F.46 (PreventingPHacking). TBD\n\n\nSolution F.47 (SampleSizeAndPower). The power will be low.\n\n\n\nF.1.15 Power Analysis\n\nSolution F.48 (MainFactorsAffectingPower). The overlap (distance of the two means) and sample sizes.\n\n\nSolution F.49 (PowerAnalysisOutcome). The sample size needed.\n\n\nSolution F.50 (RisksInExperiments). Few experiments lead to very low power, and many experiments might result in p-hacking.\n\n\nSolution F.51 (StepsToPerformPowerAnalysis). \n\nSelect power\nSelect threshold for significance (alpha)\nEstimate the overlap (done by the effect size)\n\n\n\n\nF.1.16 The Central Limit Theorem\n\nSolution F.52 (CentralLimitTheoremAnswer). TBD\n\n\n\nF.1.17 Boxplots\n\nSolution F.53 (MedianAnswer). The median.\n\n\nSolution F.54 (BoxContentAnswer). 50% of the data.\n\n\n\nF.1.18 R-squared\n\nSolution F.55 (RSquaredFormulaAnswer). TBD\n\n\nSolution F.56 (NegativeRSquaredAnswer). If you fit a line, no, but there are cases where it could be negative. However, these are usually considered useless.\n\n\nSolution F.57 (RSquaredCalculationAnswer). TBD\n\n\nF.1.18.1 The main ideas of fitting a line to data (The main ideas of least squares and linear regression.)\n\nSolution F.58 (LeastSquaresAnswer). It is the calculation of the smallest sum of residuals when you fit a model to data.\n\n\n\n\nF.1.19 Linear Regression\n\n\nF.1.20 Multiple Regression\n\n\nF.1.21 A Gentle Introduction to Machine Learning\n\nSolution F.59 (RegressionVsClassificationAnswer). Regression involves predicting continuous values (e.g., temperature, size), while classification involves predicting discrete values (e.g., categories like cat, dog).\n\n\n\nF.1.22 Maximum Likelihood\n\nSolution F.60 (LikelihoodConceptAnswer). The distribution that fits the data best.\n\n\n\nF.1.23 Probability is not Likelihood\n\nSolution F.61 (ProbabilityVsLikelihoodAnswer). Likelihood: Finding the curve that best fits the data. Probability: Calculating the probability of an event given a specific curve.\n\n\n\nF.1.24 Cross Validation\n\nSolution F.62 (TrainVsTestDataAnswer). Training data is used to fit the model, while testing data is used to evaluate how well the model fits.\n\n\nSolution F.63 (SingleValidationIssueAnswer). The performance might not be representative because the data may not be equally distributed between training and testing sets.\n\n\nSolution F.64 (FoldDefinitionAnswer). TBD\n\n\nSolution F.65 (LeaveOneOutValidationAnswer). Only one data point is used as the test set, and the rest are used as the training set.\n\n\n\nF.1.25 The Confusion Matrix\n\nSolution F.66 (ConfusionMatrixAnswer). TBD\n\n\n\nF.1.26 Sensitivity and Specificity\n\nSolution F.67 (SensitivitySpecificityAnswer1). TBD\n\n\nSolution F.68 (SensitivitySpecificityAnswer2). TBD\n\n\n\nF.1.27 Bias and Variance\n\nSolution F.69 (BiasAndVarianceAnswer). TBD\n\n\n\nF.1.28 Mutual Information\n\nSolution F.70 (MutualInformationExampleAnswer). TBD\n\n\n\nF.1.29 Principal Component Analysis (PCA)\n\nSolution F.71 (WhatIsPCAAnswer). A dimension reduction technique that helps discover important variables.\n\n\nSolution F.72 (screePlotAnswer). It shows how much variation is defined by the data.\n\n\nSolution F.73 (LeastSquaresInPCAAnswer). No, in the first step it tries to maximize distances.\n\n\nSolution F.74 (PCAStepsAnswer). \n\nCalculate mean\nShift the data to the center of the coordinate system\nFit a line by maximizing the distances\nCalculate the sum of squared distances\nCalculate the slope\nRotate\n\n\n\nSolution F.75 (EigenvaluePC1Answer). Formula (to be specified).\n\n\nSolution F.76 (DifferencesBetweenPointsAnswer). No, because the first difference is measured on the PC1 scale and it is more important.\n\n\nSolution F.77 (ScalingInPCAAnswer). Scaling by dividing by the standard deviation (SD).\n\n\nSolution F.78 (DetermineNumberOfComponentsAnswer). TBD\n\n\nSolution F.79 (LimitingNumberOfComponentsAnswer). \n\nThe dimension of the problem\nNumber of samples\n\n\n\n\nF.1.30 t-SNE\n\nSolution F.80 (WhyUseTSNEAnswer). For dimension reduction and picking out the relevant clusters.\n\n\nSolution F.81 (MainIdeaOfTSNEAnswer). To reduce the dimensions of the data by reconstructing the relationships in a lower-dimensional space.\n\n\nSolution F.82 (BasicConceptOfTSNEAnswer). \n\nFirst, randomly arrange the points in a lower dimension\nDecide whether to move points left or right, depending on distances in the original dimension\nFinally, arrange points in the lower dimension similarly to the original dimension\n\n\n\nSolution F.83 (TSNEStepsAnswer). \n\nProject data to get random points\nSet up a matrix of distances\nCalculate the inner variances of the clusters and the Gaussian distribution\nDo the same with the projected points\nMove projected points so the second matrix gets more similar to the first matrix\n\n\n\n\nF.1.31 K-means clustering\n\nSolution F.84 (HowKMeansWorksAnswer). \n\nSelect the number of clusters\nRandomly select distinct data points as initial cluster centers\nMeasure the distance between each point and the cluster centers\nAssign each point to the nearest cluster\nRepeat the process\n\n\n\nSolution F.85 (QualityOfClustersAnswer). Calculate the within-cluster variation.\n\n\nSolution F.86 (IncreasingKAnswer). If k is too high, each point would be its own cluster. If k is too low, you cannot see the structures.\n\n\n\nF.1.32 DBSCAN\n\nSolution F.87 (CorePointInDBSCANAnswer). A point that is close to at least k other points.\n\n\nSolution F.88 (AddingVsExtendingAnswer). Adding means we add a point and then stop. Extending means we add a point and then look for other neighbors from that point.\n\n\nSolution F.89 (OutliersInDBSCANAnswer). Points that are not core points and do not belong to existing clusters.\n\n\n\nF.1.33 K-nearest neighbors\n\nSolution F.90 (AdvantagesAndDisadvantagesOfKAnswer). \n\nk = 1: Noise can disturb the process because of possibly incorrect measurements of points.\nk = 100: The majority can be wrong for some groups. It is smoother, but there is less chance to discover the structure of the data.\n\n\n\n\nF.1.34 Naive Bayes\n\nSolution F.91 (NaiveBayesFormulaAnswer). TBD\n\n\nSolution F.92 (CalculateProbabilitiesAnswer). TBD\n\n\n\nF.1.35 Gaussian Naive Bayes\n\nSolution F.93 (UnderflowProblemAnswer). Small values multiplied together can become smaller than the limits of computer memory, resulting in zero. Using logarithms (e.g., log(1/2) -&gt; -1, log(1/4) -&gt; -2) helps prevent underflow.\n\n\n\nF.1.36 Trees\n\nSolution F.94 (Tree Usage). Classication, Regression, Clustering\n\n\nSolution F.95 (Tree Usage). TBD\n\n\nSolution F.96 (Tree Feature Importance). The most important feature.\n\n\nSolution F.97 (Regression Tree Limitations). High dimensions\n\n\nSolution F.98 (Regression Tree Score). SSR + alpha * T\n\n\nSolution F.99 (Regression Tree Alpha Value Small). The tree is more complex.\n\n\nSolution F.100 (Regression Tree Increase Alpha Value). We get smaller trees\n\n\nSolution F.101 (Regression Tree Pruning). Decreases the complexity of the tree to enhance performance and reduce overfitting",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Solutions to Selected Exercises</span>"
    ]
  },
  {
    "objectID": "a_99_solutions.html#machine-learning-and-artificial-intelligence",
    "href": "a_99_solutions.html#machine-learning-and-artificial-intelligence",
    "title": "Appendix F — Solutions to Selected Exercises",
    "section": "F.2 Machine Learning and Artificial Intelligence",
    "text": "F.2 Machine Learning and Artificial Intelligence\n\nF.2.1 Backpropagation\n\nSolution F.102 (ChainRuleAndGradientDescentAnswer). Combination of the chain rule and gradient descent.\n\n\nSolution F.103 (BackpropagationNamingAnswer). Because you start at the end and go backwards.\n\n\n\nF.2.2 Gradient Descent\n\nSolution F.104 (GradDescStepSize). learning rate x slope\n\n\nSolution F.105 (GradDescIntercept). Old intercept - step size\n\n\nSolution F.106 (GradDescIntercept). When the step size is small or after a certain number of steps\n\n\n\nF.2.3 ReLU\n\nSolution F.107 (Graph ReLU). Graph of ReLU function: f(x) = max(0, x)\n\n\n\nF.2.4 CNNs\n\nSolution F.108 (CNNImageRecognitionAnswer). \n\ntoo many features for input layer -&gt; high memory consumption\nalways shift in data\nit learns local informations and local correlations\n\n\n\nSolution F.109 (CNNFiltersInitializationAnswer). The filter values in CNNs are randomly initialized and then trained and optimized through the process of backpropagation.\n\n\nSolution F.110 (CNNFilterInitializationAnswer). The filter values in CNNs are initially set by random initialization. These filters undergo training via backpropagation, where gradients are computed and used to adjust the filter values to optimize performance.\n\n\nSolution F.111 (GenNNStockPredictionAnswer). A limitation of using classical neural networks for stock market prediction is their reliance on fixed inputs. Stock market data is dynamic and requires models that can adapt to changing conditions over time.\n\n\n\nF.2.5 RNN\n\nSolution F.112 (RNNUnrollingAnswer). In the unrolling process of RNNs, the network is copied and the output from the inner loop is fed into the second layer of the copied network.\n\n\nSolution F.113 (RNNReliabilityAnswer). RNNs sometimes fail to work reliably due to the vanishing gradient problem (where gradients are less than 1) and the exploding gradient problem (where gradients are greater than 1). Additionally, reliability issues arise because the network and the weights are copied during the unrolling process.\n\n\n\nF.2.6 LSTM\n\nSolution F.114 (LSTMSigmoidTanhAnswer). The sigmoid activation function outputs values between 0 and 1, making it suitable for probability determination, whereas the tanh activation function outputs values between -1 and 1.\n\n\nSolution F.115 (LSTMSigmoidTanhAnswer). State how much of the long term memory should be used.\n\n\nSolution F.116 (LSTMGatesAnswer). An LSTM network has three types of gates: the forget gate, the input gate, and the output gate. The forget gate decides what information to discard from the cell state, the input gate updates the cell state with new information, and the output gate determines what part of the cell state should be output.\n\n\nSolution F.117 (LSTMLongTermInfoAnswer). Long-term information is used in the output gate of an LSTM network.\n\n\nSolution F.118 (LSTMUpdateGatesAnswer). In the input and forget gates.\n\n\n\nF.2.7 Pytorch/Lightning\n\nSolution F.119 (PyTorchRequiresGradAnswer). In PyTorch, requires_grad indicates whether a tensor should be trained. If set to False, the tensor will not be trained.\n\n\n\nF.2.8 Embeddings\n\nSolution F.120 (NN STrings). No, they process numerical values.\n\n\nSolution F.121 (Embedding Definition). Representation of a word as a vector.\n\n\nSolution F.122 (Embedding Dimensions). We can model similarities.\n\n\n\nF.2.9 Sequence to Sequence Models\n\nSolution F.123 (LSTM). Because they are able to consider “far away” information.\n\n\nSolution F.124 (Teacher Forcing). We need to force the correct words for the training.\n\n\nSolution F.125 (Attention). Attention scores compute similarities for one input to the others.\n\n\n\nF.2.10 Transformers\n\nSolution F.126 (ChatGPT). Decoder only.\n\n\nSolution F.127 (Translation). Encoder-Decoder structure.\n\n\nSolution F.128 (Difference Encoder-Decoder and Decoder Only.). \n\nEncoder-Decoder: self-attention.\nDecoder only: masked self-attention.\n\n\n\nSolution F.129 (Weights). \n\na: Randomly\nb: Backpropagation\n\n\n\nSolution F.130 (Order of Words). Positional Encoding\n\n\nSolution F.131 (Relationship Between Words). Masked self-attention which looks at the previous tokens.\n\n\nSolution F.132 (Masked Self Attention). It works by investigating how similar each word is to itself and all of the proceeding words in the sentence.\n\n\nSolution F.133 (Softmax). Transformation to values between 0 and 1.\n\n\nSolution F.134 (Softmax Output). We create two new numbers: Values – like K and Q with different weights. We scale these values by the percentage. -&gt; we get the scaled V´s\n\n\nSolution F.135 (V´s). Lastly, we sum these values together, which combine separate encodings for both words relative to their similarities to “is”, are the masked-self-attention values for “is”.\n\n\nSolution F.136 (Residual Connections). They are bypasses, which combine the position encoded values with masked-self-attention values.\n\n\nSolution F.137 (Generate Known Word in Sequence). \n\nTraining\nBecause it is a Decoder-Only transformer used for prediction and the calculations that you need.\n\n\n\n\nSolution F.138 (Masked-Self-Attention Values and Bypass). We use a simple neural network with two inputs and five outputs for the vocabulary.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>F</span>  <span class='chapter-title'>Solutions to Selected Exercises</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Abadi, Martin, Ashish Agarwal, Paul Barham, Eugene Brevdo, Zhifeng Chen,\nCraig Citro, Greg S. Corrado, et al. 2016. “TensorFlow: Large-Scale Machine Learning on Heterogeneous\nDistributed Systems.” arXiv e-Prints, March,\narXiv:1603.04467.\n\n\nAggarwal, Charu, ed. 2007. Data Streams – Models and\nAlgorithms. Springer-Verlag.\n\n\nBartz, Eva, Thomas Bartz-Beielstein, Martin Zaefferer, and Olaf\nMersmann, eds. 2022. Hyperparameter Tuning for\nMachine and Deep Learning with R - A Practical Guide.\nSpringer.\n\n\nBartz-Beielstein, Thomas. 2023. “PyTorch\nHyperparameter Tuning with SPOT: Comparison with Ray\nTuner and Default Hyperparameters on\nCIFAR10.” https://github.com/sequential-parameter-optimization/spotpython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb.\n\n\n———. 2024a. “Evaluation and Performance Measurement.” In,\nedited by Eva Bartz and Thomas Bartz-Beielstein, 47–62. Singapore:\nSpringer Nature Singapore.\n\n\n———. 2024b. “Hyperparameter Tuning.” In, edited by Eva\nBartz and Thomas Bartz-Beielstein, 125–40. Singapore: Springer Nature\nSingapore.\n\n\n———. 2024c. “Introduction: From Batch to Online Machine\nLearning.” In Online Machine Learning: A Practical Guide with\nExamples in Python, edited by Eva Bartz and Thomas\nBartz-Beielstein, 1–11. Singapore: Springer Nature Singapore. https://doi.org/10.1007/978-981-99-7007-0_1.\n\n\nBartz-Beielstein, Thomas, Jürgen Branke, Jörn Mehnen, and Olaf Mersmann.\n2014. “Evolutionary Algorithms.” Wiley\nInterdisciplinary Reviews: Data Mining and Knowledge Discovery 4\n(3): 178–95.\n\n\nBartz-Beielstein, Thomas, and Lukas Hans. 2024. “Drift Detection\nand Handling.” In Online Machine Learning: A Practical Guide\nwith Examples in Python, edited by Eva Bartz and Thomas\nBartz-Beielstein, 23–39. Singapore: Springer Nature Singapore. https://doi.org/10.1007/978-981-99-7007-0_3.\n\n\nBartz-Beielstein, Thomas, Christian Lasarczyk, and Mike Preuss. 2005.\n“Sequential Parameter Optimization.” In\nProceedings 2005 Congress on Evolutionary\nComputation (CEC’05), Edinburgh, Scotland, edited by B McKay\net al., 773–80. Piscataway NJ: IEEE Press.\n\n\nBartz-Beielstein, Thomas, and Martin Zaefferer. 2022.\n“Hyperparameter Tuning Approaches.” In Hyperparameter Tuning for Machine and Deep Learning with\nR - A Practical Guide, edited by Eva Bartz, Thomas\nBartz-Beielstein, Martin Zaefferer, and Olaf Mersmann, 67–114. Springer.\n\n\nBifet, Albert. 2010. Adaptive Stream Mining: Pattern Learning and\nMining from Evolving Data Streams. Vol. 207. Frontiers in\nArtificial Intelligence and Applications. IOS Press.\n\n\nBifet, Albert, and Ricard Gavaldà. 2007. “Learning from\nTime-Changing Data with Adaptive Windowing.” In Proceedings\nof the 2007 SIAM International Conference on Data Mining (SDM),\n443–48.\n\n\n———. 2009. “Adaptive Learning from Evolving Data Streams.”\nIn Proceedings of the 8th International Symposium on Intelligent\nData Analysis: Advances in Intelligent Data Analysis VIII, 249–60.\nIDA ’09. Berlin, Heidelberg: Springer-Verlag.\n\n\nBifet, Albert, Geoff Holmes, Richard Kirkby, and Bernhard Pfahringer.\n2010a. “MOA: Massive Online\nAnalysis.” Journal of Machine Learning Research 99:\n1601–4.\n\n\n———. 2010b. “MOA: Massive Online Analysis.” Journal of\nMachine Learning Research 11: 1601–4.\n\n\nChollet, Francoise, and J. J. Allaire. 2018. Deep Learning with\nPython. Manning.\n\n\nDevlin, Jacob, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. 2018.\n“BERT: Pre-training of Deep Bidirectional\nTransformers for Language Understanding.” arXiv\ne-Prints, October, arXiv:1810.04805.\n\n\nDomingos, Pedro M., and Geoff Hulten. 2000. “Mining High-Speed\nData Streams.” In Proceedings of the Sixth ACM\nSIGKDD International Conference on Knowledge Discovery and\nData Mining, Boston, MA, USA, August 20-23, 2000, edited by Raghu\nRamakrishnan, Salvatore J. Stolfo, Roberto J. Bayardo, and Ismail Parsa,\n71–80. ACM.\n\n\nDosovitskiy, Alexey, Lucas Beyer, Alexander Kolesnikov, Dirk\nWeissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, et al.\n2020. “An Image is Worth 16x16 Words:\nTransformers for Image Recognition at Scale.” arXiv\ne-Prints, October, arXiv:2010.11929.\n\n\nDredze, Mark, Tim Oates, and Christine Piatko. 2010. “We’re Not in\nKansas Anymore: Detecting Domain Changes in Streams.” In\nProceedings of the 2010 Conference on Empirical Methods in Natural\nLanguage Processing, 585–95.\n\n\nForrester, Alexander, András Sóbester, and Andy Keane. 2008. Engineering Design via Surrogate Modelling.\nWiley.\n\n\nFriedman, Jerome H. 1991. “Multivariate Adaptive Regression\nSplines.” The Annals of Statistics 19 (1): 1–67.\n\n\nGaber, Mohamed Medhat, Arkady Zaslavsky, and Shonali Krishnaswamy. 2005.\n“Mining Data Streams: A Review.” SIGMOD\nRec. 34: 18–26.\n\n\nGama, João, Pedro Medas, Gladys Castillo, and Pedro Rodrigues. 2004.\n“Learning with Drift Detection.” In Advances in\nArtificial Intelligence – SBIA 2004, edited by Ana L. C. Bazzan and\nSofiane Labidi, 286–95. Berlin, Heidelberg: Springer Berlin Heidelberg.\n\n\nGama, João, Raquel Sebastião, and Pedro Pereira Rodrigues. 2013.\n“On Evaluating Stream Learning Algorithms.” Machine\nLearning 90 (3): 317–46.\n\n\nGramacy, Robert B. 2020. Surrogates. CRC press.\n\n\nHoeglinger, Stefan, and Russel Pears. 2007. “Use of Hoeffding\nTrees in Concept Based Data Stream Mining.” 2007 Third\nInternational Conference on Information and Automation for\nSustainability, 57–62.\n\n\nIkonomovska, Elena. 2012. “Algorithms for Learning Regression\nTrees and Ensembles on Evolving Data Streams.” PhD thesis, Jozef\nStefan International Postgraduate School.\n\n\nIkonomovska, Elena, João Gama, and Sašo Džeroski. 2011. “Learning\nModel Trees from Evolving Data Streams.” Data Mining and\nKnowledge Discovery 23 (1): 128–68.\n\n\nJain, Sarthak, and Byron C. Wallace. 2019. “Attention is not Explanation.” arXiv\ne-Prints, February, arXiv:1902.10186.\n\n\nJames, Gareth, Daniela Witten, Trevor Hastie, and Robert Tibshirani.\n2014. An Introduction to Statistical Learning\nwith Applications in R. 7th ed. Springer.\n\n\nKeller-McNulty, Sallie, ed. 2004. Statistical Analysis of Massive\nData Streams: Proceedings of a Workshop. Washington,\nDC: Committee on Applied; Theoretical Statistics, National Research\nCouncil; National Academies Press.\n\n\nLewis, R M, V Torczon, and M W Trosset. 2000. “Direct search methods: Then and now.”\nJournal of Computational and Applied Mathematics 124 (1–2):\n191–207.\n\n\nLi, Lisha, Kevin Jamieson, Giulia DeSalvo, Afshin Rostamizadeh, and\nAmeet Talwalkar. 2016. “Hyperband: A Novel\nBandit-Based Approach to Hyperparameter Optimization.”\narXiv e-Prints, March, arXiv:1603.06560.\n\n\nLippe, Phillip. 2022. “UvA Deep Learning\nTutorials.”\n\n\nLiu, Liyuan, Haoming Jiang, Pengcheng He, Weizhu Chen, Xiaodong Liu,\nJianfeng Gao, and Jiawei Han. 2019. “On the\nVariance of the Adaptive Learning Rate and Beyond.”\narXiv e-Prints, August, arXiv:1908.03265.\n\n\nManapragada, Chaitanya, Geoffrey I. Webb, and Mahsa Salehi. 2018.\n“Extremely Fast Decision Tree.” In KDD’ 2018 -\nProceedings of the 24th ACM SIGKDD International Conference on Knowledge\nDiscovery and Data Mining, edited by Chih-Jen Lin and Hui Xiong,\n1953–62. United States of America: Association for Computing Machinery\n(ACM). https://doi.org/10.1145/3219819.3220005.\n\n\nMasud, Mohammad, Jing Gao, Latifur Khan, Jiawei Han, and Bhavani M\nThuraisingham. 2011. “Classification and Novel Class Detection in\nConcept-Drifting Data Streams Under Time Constraints.” IEEE\nTransactions on Knowledge and Data Engineering 23 (6): 859–74.\n\n\nMeignan, David, Sigrid Knust, Jean-Marc Frayet, Gilles Pesant, and\nNicolas Gaud. 2015. “A Review and Taxonomy of\nInteractive Optimization Methods in Operations Research.”\nACM Transactions on Interactive Intelligent Systems, September.\n\n\nMontiel, Jacob, Max Halford, Saulo Martiello Mastelini, Geoffrey\nBolmier, Raphael Sourty, Robin Vaysse, Adil Zouitine, et al. 2021.\n“River: Machine Learning for Streaming Data in Python.”\n\n\nMourtada, Jaouad, Stephane Gaiffas, and Erwan Scornet. 2019.\n“AMF: Aggregated Mondrian Forests for Online\nLearning.” arXiv e-Prints, June,\narXiv:1906.10529. https://doi.org/10.48550/arXiv.1906.10529.\n\n\nPedregosa, F., G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O.\nGrisel, M. Blondel, et al. 2011. “Scikit-Learn: Machine Learning\nin Python.” Journal of Machine Learning\nResearch 12: 2825–30.\n\n\nPutatunda, Sayan. 2021. Practical Machine Learning for Streaming\nData with Python. Springer.\n\n\nSantner, T J, B J Williams, and W I Notz. 2003. The Design and Analysis of Computer\nExperiments. Berlin, Heidelberg, New York: Springer.\n\n\nStreet, W. Nick, and YongSeog Kim. 2001. “A Streaming Ensemble\nAlgorithm (SEA) for Large-Scale Classification.” In\nProceedings of the Seventh ACM SIGKDD International Conference on\nKnowledge Discovery and Data Mining, 377–82. KDD ’01. New York, NY,\nUSA: Association for Computing Machinery.\n\n\nTay, Yi, Mostafa Dehghani, Dara Bahri, and Donald Metzler. 2020.\n“Efficient Transformers: A Survey.” arXiv\ne-Prints, September, arXiv:2009.06732.\n\n\nVaswani, Ashish, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion\nJones, Aidan N. Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017.\n“Attention Is All You Need.” arXiv\ne-Prints, June, 1–15.\n\n\nWiegreffe, Sarah, and Yuval Pinter. 2019. “Attention is not not Explanation.”\narXiv e-Prints, August, arXiv:1908.04626.",
    "crumbs": [
      "Appendices",
      "References"
    ]
  }
]