[
  {
    "objectID": "015_num_spot_correlation_p.html",
    "href": "015_num_spot_correlation_p.html",
    "title": "15  Kriging with Varying Correlation-p",
    "section": "",
    "text": "15.1 Example: Spot Surrogate and the 2-dim Sphere Function\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.utils.init import fun_control_init, surrogate_control_init\nPREFIX=\"003\"",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Kriging with Varying Correlation-p</span>"
    ]
  },
  {
    "objectID": "015_num_spot_correlation_p.html#example-spot-surrogate-and-the-2-dim-sphere-function",
    "href": "015_num_spot_correlation_p.html#example-spot-surrogate-and-the-2-dim-sphere-function",
    "title": "15  Kriging with Varying Correlation-p",
    "section": "",
    "text": "15.1.1 The Objective Function: 2-dim Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x, y) = x^2 + y^2\\]\nThe size of the lower bound vector determines the problem dimension.\nHere we will use np.array([-1, -1]), i.e., a two-dim function.\n\n\nfun = analytical().fun_sphere\nfun_control = fun_control_init(PREFIX=PREFIX,\n                               lower = np.array([-1, -1]),\n                               upper = np.array([1, 1]))\n\nCreated spot_tensorboard_path: runs/spot_logs/003_p040025_2024-01-10_22-26-24 for SummaryWriter()\n\n\n\nAlthough the default spot surrogate model is an isotropic Kriging model, we will explicitly set the theta parameter to a value of 1 for both dimensions. This is done to illustrate the difference between isotropic and anisotropic Kriging models.\n\n\nsurrogate_control=surrogate_control_init(n_p=1,\n                                         p_val=2.0,)\n\n\nspot_2 = spot.Spot(fun=fun,\n                   fun_control=fun_control,\n                   surrogate_control=surrogate_control)\n\nspot_2.run()\n\nspotPython tuning: 1.801603872454505e-05 [#######---] 73.33% \nspotPython tuning: 1.801603872454505e-05 [########--] 80.00% \nspotPython tuning: 1.801603872454505e-05 [#########-] 86.67% \nspotPython tuning: 1.801603872454505e-05 [#########-] 93.33% \nspotPython tuning: 1.801603872454505e-05 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2bc447c10&gt;\n\n\n\n\n15.1.2 Results\n\nspot_2.print_results()\n\nmin y: 1.801603872454505e-05\nx0: 0.0019077911677074135\nx1: 0.003791618596979743\n\n\n[['x0', 0.0019077911677074135], ['x1', 0.003791618596979743]]\n\n\n\nspot_2.plot_progress(log_y=True)\n\n\n\n\n\n\n\n\n\nspot_2.surrogate.plot()",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Kriging with Varying Correlation-p</span>"
    ]
  },
  {
    "objectID": "015_num_spot_correlation_p.html#example-with-modified-p",
    "href": "015_num_spot_correlation_p.html#example-with-modified-p",
    "title": "15  Kriging with Varying Correlation-p",
    "section": "15.2 Example With Modified p",
    "text": "15.2 Example With Modified p\n\nWe can use set p to a value other than 2 to obtain a different Kriging model.\n\n\nsurrogate_control = surrogate_control_init(n_p=1,\n                                           p_val=1.0)\nspot_2_p1= spot.Spot(fun=fun,\n                    fun_control=fun_control,\n                    surrogate_control=surrogate_control)\nspot_2_p1.run()\n\nspotPython tuning: 1.801603872454505e-05 [#######---] 73.33% \nspotPython tuning: 1.801603872454505e-05 [########--] 80.00% \nspotPython tuning: 1.801603872454505e-05 [#########-] 86.67% \nspotPython tuning: 1.801603872454505e-05 [#########-] 93.33% \nspotPython tuning: 1.801603872454505e-05 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2bc6cd590&gt;\n\n\n\nThe search progress of the optimization with the anisotropic model can be visualized:\n\n\nspot_2_p1.plot_progress(log_y=True)\n\n\n\n\n\n\n\n\n\nspot_2_p1.print_results()\n\nmin y: 1.801603872454505e-05\nx0: 0.0019077911677074135\nx1: 0.003791618596979743\n\n\n[['x0', 0.0019077911677074135], ['x1', 0.003791618596979743]]\n\n\n\nspot_2_p1.surrogate.plot()\n\n\n\n\n\n\n\n\n\n15.2.1 Taking a Look at the p Values\n\n15.2.1.1 p Values from the spot Model\n\nWe can check, which p values the spot model has used:\nThe p values from the surrogate can be printed as follows:\n\n\nspot_2_p1.surrogate.p\n\narray([1.])\n\n\n\nSince the surrogate from the isotropic setting was stored as spot_2, we can also take a look at the theta value from this model:\n\n\nspot_2.surrogate.p\n\narray([2.])",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Kriging with Varying Correlation-p</span>"
    ]
  },
  {
    "objectID": "015_num_spot_correlation_p.html#optimization-of-the-p-values",
    "href": "015_num_spot_correlation_p.html#optimization-of-the-p-values",
    "title": "15  Kriging with Varying Correlation-p",
    "section": "15.3 Optimization of the p Values",
    "text": "15.3 Optimization of the p Values\n\nsurrogate_control = surrogate_control_init(n_p=1,\n                                           optim_p=True)\nspot_2_pm= spot.Spot(fun=fun,\n                    fun_control=fun_control,\n                    surrogate_control=surrogate_control)\nspot_2_pm.run()\n\nspotPython tuning: 1.893023485380876e-05 [#######---] 73.33% \nspotPython tuning: 1.893023485380876e-05 [########--] 80.00% \nspotPython tuning: 1.893023485380876e-05 [#########-] 86.67% \nspotPython tuning: 1.893023485380876e-05 [#########-] 93.33% \nspotPython tuning: 1.893023485380876e-05 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2bcc1db90&gt;\n\n\n\nspot_2_pm.plot_progress(log_y=True)\n\n\n\n\n\n\n\n\n\nspot_2_pm.print_results()\n\nmin y: 1.893023485380876e-05\nx0: 0.0017549984724977892\nx1: 0.003981232876300906\n\n\n[['x0', 0.0017549984724977892], ['x1', 0.003981232876300906]]\n\n\n\nspot_2_pm.surrogate.plot()\n\n\n\n\n\n\n\n\n\nspot_2_pm.surrogate.p\n\narray([1.77398298])",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Kriging with Varying Correlation-p</span>"
    ]
  },
  {
    "objectID": "015_num_spot_correlation_p.html#optimization-of-multiple-p-values",
    "href": "015_num_spot_correlation_p.html#optimization-of-multiple-p-values",
    "title": "15  Kriging with Varying Correlation-p",
    "section": "15.4 Optimization of Multiple p Values",
    "text": "15.4 Optimization of Multiple p Values\n\nsurrogate_control = surrogate_control_init(n_p=2,\n                                           optim_p=True)\nspot_2_pmo= spot.Spot(fun=fun,\n                    fun_control=fun_control,\n                    surrogate_control=surrogate_control)\nspot_2_pmo.run()\n\nspotPython tuning: 2.162397189403005e-05 [#######---] 73.33% \nspotPython tuning: 2.162397189403005e-05 [########--] 80.00% \nspotPython tuning: 2.162397189403005e-05 [#########-] 86.67% \nspotPython tuning: 2.162397189403005e-05 [#########-] 93.33% \nspotPython tuning: 2.162397189403005e-05 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2c0b45450&gt;\n\n\n\nspot_2_pmo.plot_progress(log_y=True)\n\n\n\n\n\n\n\n\n\nspot_2_pmo.print_results()\n\nmin y: 2.162397189403005e-05\nx0: 0.0018245082309241386\nx1: 0.00427728203527896\n\n\n[['x0', 0.0018245082309241386], ['x1', 0.00427728203527896]]\n\n\n\nspot_2_pmo.surrogate.plot()\n\n\n\n\n\n\n\n\n\nspot_2_pmo.surrogate.p\n\narray([1.09037777, 1.76346322])",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Kriging with Varying Correlation-p</span>"
    ]
  },
  {
    "objectID": "015_num_spot_correlation_p.html#exercises",
    "href": "015_num_spot_correlation_p.html#exercises",
    "title": "15  Kriging with Varying Correlation-p",
    "section": "15.5 Exercises",
    "text": "15.5 Exercises\n\n15.5.1 fun_branin\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-5 \\leq x_1 \\leq 10\\) and \\(0 \\leq x_2 \\leq 15\\).\n\nCompare the results from spotPython runs with different options for p.\nModify the termination criterion: instead of the number of evaluations (which is specified via fun_evals), the time should be used as the termination criterion. This can be done as follows (max_time=1 specifies a run time of one minute):\n\n\nfun_evals=inf,\nmax_time=1,\n\n\n\n15.5.2 fun_sin_cos\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-2\\pi \\leq x_1 \\leq 2\\pi\\) and \\(-2\\pi \\leq x_2 \\leq 2\\pi\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin.\n\n\n\n15.5.3 fun_runge\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-5 \\leq x_1 \\leq 5\\) and \\(-5 \\leq x_2 \\leq 5\\).\n\nCompare the results from spotPython runs with different options for p.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin.\n\n\n\n15.5.4 fun_wingwt\n\nDescribe the function.\n\nThe input dimension is 10. The search ranges are between 0 and 1 (values are mapped internally to their natural bounds).\n\nCompare the results from spotPython runs with different options for p.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Kriging with Varying Correlation-p</span>"
    ]
  },
  {
    "objectID": "015_num_spot_correlation_p.html#jupyter-notebook",
    "href": "015_num_spot_correlation_p.html#jupyter-notebook",
    "title": "15  Kriging with Varying Correlation-p",
    "section": "15.6 Jupyter Notebook",
    "text": "15.6 Jupyter Notebook\n\n\n\n\n\n\nNote\n\n\n\n\nThe Jupyter-Notebook of this lecture is available on GitHub in the Hyperparameter-Tuning-Cookbook Repository",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Kriging with Varying Correlation-p</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html",
    "href": "012_num_spot_ei.html",
    "title": "12  Expected Improvement",
    "section": "",
    "text": "12.1 Example: Spot and the 1-dim Sphere Function\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.utils.init import fun_control_init, surrogate_control_init, design_control_init\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#example-spot-and-the-1-dim-sphere-function",
    "href": "012_num_spot_ei.html#example-spot-and-the-1-dim-sphere-function",
    "title": "12  Expected Improvement",
    "section": "",
    "text": "12.1.1 The Objective Function: 1-dim Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2 \\]\n\n\nfun = analytical().fun_sphere\n\n\nThe size of the lower bound vector determines the problem dimension.\nHere we will use np.array([-1]), i.e., a one-dim function.\n\n\n\n\n\n\n\nTensorBoard\n\n\n\nSimilar to the one-dimensional case, which was introduced in Section Section 7.5, we can use TensorBoard to monitor the progress of the optimization. We will use the same code, only the prefix is different:\n\nfrom spotPython.utils.init import fun_control_init\nPREFIX = \"07_Y\"\nfun_control = fun_control_init(\n    PREFIX=PREFIX,\n    fun_evals = 25,\n    lower = np.array([-1]),\n    upper = np.array([1]),\n    tolerance_x = np.sqrt(np.spacing(1)),)\ndesign_control = design_control_init(init_size=10)\n\nCreated spot_tensorboard_path: runs/spot_logs/07_Y_p040025_2024-01-10_22-32-12 for SummaryWriter()\n\n\n\n\n\nspot_1 = spot.Spot(\n            fun=fun,\n            fun_control=fun_control,\n            design_control=design_control)\nspot_1.run()\n\nspotPython tuning: 1.2026789271012512e-09 [####------] 44.00% \nspotPython tuning: 1.2026789271012512e-09 [#####-----] 48.00% \nspotPython tuning: 1.2026789271012512e-09 [#####-----] 52.00% \nspotPython tuning: 1.2026789271012512e-09 [######----] 56.00% \nspotPython tuning: 3.7010904275056666e-10 [######----] 60.00% \nspotPython tuning: 3.7010904275056666e-10 [######----] 64.00% \nspotPython tuning: 3.7010904275056666e-10 [#######---] 68.00% \nspotPython tuning: 3.7010904275056666e-10 [#######---] 72.00% \nspotPython tuning: 3.7010904275056666e-10 [########--] 76.00% \nspotPython tuning: 3.7010904275056666e-10 [########--] 80.00% \nspotPython tuning: 3.7010904275056666e-10 [########--] 84.00% \nspotPython tuning: 3.7010904275056666e-10 [#########-] 88.00% \nspotPython tuning: 2.802111689321758e-11 [#########-] 92.00% \nspotPython tuning: 2.802111689321758e-11 [##########] 96.00% \nspotPython tuning: 2.802111689321758e-11 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2d5d4d3d0&gt;\n\n\n\n\n12.1.2 Results\n\nspot_1.print_results()\n\nmin y: 2.802111689321758e-11\nx0: -5.293497604912803e-06\n\n\n[['x0', -5.293497604912803e-06]]\n\n\n\nspot_1.plot_progress(log_y=True)\n\n\n\n\n\n\n\n\n\n\n\nTensorBoard visualization of the spotPython optimization process and the surrogate model.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#same-but-with-ei-as-infill_criterion",
    "href": "012_num_spot_ei.html#same-but-with-ei-as-infill_criterion",
    "title": "12  Expected Improvement",
    "section": "12.2 Same, but with EI as infill_criterion",
    "text": "12.2 Same, but with EI as infill_criterion\n\nPREFIX = \"07_EI_ISO\"\nfun_control = fun_control_init(\n    PREFIX=PREFIX,\n    lower = np.array([-1]),\n    upper = np.array([1]),\n    fun_evals = 25,\n    tolerance_x = np.sqrt(np.spacing(1)),\n    infill_criterion = \"ei\")\n\nCreated spot_tensorboard_path: runs/spot_logs/07_EI_ISO_p040025_2024-01-10_22-32-20 for SummaryWriter()\n\n\n\nspot_1_ei = spot.Spot(fun=fun,\n                     fun_control=fun_control)\nspot_1_ei.run()\n\nspotPython tuning: 9.993558891826623e-09 [####------] 44.00% \nspotPython tuning: 9.993558891826623e-09 [#####-----] 48.00% \nspotPython tuning: 9.993558891826623e-09 [#####-----] 52.00% \nspotPython tuning: 9.993558891826623e-09 [######----] 56.00% \nspotPython tuning: 3.016921825539976e-12 [######----] 60.00% \nspotPython tuning: 3.016921825539976e-12 [######----] 64.00% \nspotPython tuning: 3.016921825539976e-12 [#######---] 68.00% \nspotPython tuning: 3.016921825539976e-12 [#######---] 72.00% \nspotPython tuning: 3.016921825539976e-12 [########--] 76.00% \nspotPython tuning: 3.016921825539976e-12 [########--] 80.00% \nspotPython tuning: 3.016921825539976e-12 [########--] 84.00% \nspotPython tuning: 3.016921825539976e-12 [#########-] 88.00% \nspotPython tuning: 3.016921825539976e-12 [#########-] 92.00% \nspotPython tuning: 3.016921825539976e-12 [##########] 96.00% \nspotPython tuning: 3.016921825539976e-12 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2d5d4c950&gt;\n\n\n\nspot_1_ei.plot_progress(log_y=True)\n\n\n\n\n\n\n\n\n\nspot_1_ei.print_results()\n\nmin y: 3.016921825539976e-12\nx0: 1.7369288487269638e-06\n\n\n[['x0', 1.7369288487269638e-06]]\n\n\n\n\n\nTensorBoard visualization of the spotPython optimization process and the surrogate model. Expected improvement, isotropic Kriging.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#non-isotropic-kriging",
    "href": "012_num_spot_ei.html#non-isotropic-kriging",
    "title": "12  Expected Improvement",
    "section": "12.3 Non-isotropic Kriging",
    "text": "12.3 Non-isotropic Kriging\n\nPREFIX = \"07_EI_NONISO\"\nfun_control = fun_control_init(\n    PREFIX=PREFIX,\n    lower = np.array([-1, -1]),\n    upper = np.array([1, 1]),\n    fun_evals = 25,\n    tolerance_x = np.sqrt(np.spacing(1)),\n    infill_criterion = \"ei\")\nsurrogate_control = surrogate_control_init(\n    n_theta=2,\n    noise=False,\n    )\n\nCreated spot_tensorboard_path: runs/spot_logs/07_EI_NONISO_p040025_2024-01-10_22-32-30 for SummaryWriter()\n\n\n\nspot_2_ei_noniso = spot.Spot(fun=fun,\n                   fun_control=fun_control,\n                   surrogate_control=surrogate_control)\nspot_2_ei_noniso.run()\n\nspotPython tuning: 2.035369116580917e-05 [####------] 44.00% \nspotPython tuning: 2.035369116580917e-05 [#####-----] 48.00% \nspotPython tuning: 2.035369116580917e-05 [#####-----] 52.00% \nspotPython tuning: 1.0764759208059285e-05 [######----] 56.00% \nspotPython tuning: 1.0764759208059285e-05 [######----] 60.00% \nspotPython tuning: 1.2512039520452527e-07 [######----] 64.00% \nspotPython tuning: 1.2512039520452527e-07 [#######---] 68.00% \nspotPython tuning: 1.2512039520452527e-07 [#######---] 72.00% \nspotPython tuning: 1.2512039520452527e-07 [########--] 76.00% \nspotPython tuning: 1.2512039520452527e-07 [########--] 80.00% \nspotPython tuning: 1.2512039520452527e-07 [########--] 84.00% \nspotPython tuning: 1.2512039520452527e-07 [#########-] 88.00% \nspotPython tuning: 1.2512039520452527e-07 [#########-] 92.00% \nspotPython tuning: 1.2512039520452527e-07 [##########] 96.00% \nspotPython tuning: 1.2512039520452527e-07 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2d608f690&gt;\n\n\n\nspot_2_ei_noniso.plot_progress(log_y=True)\n\n\n\n\n\n\n\n\n\nspot_2_ei_noniso.print_results()\n\nmin y: 1.2512039520452527e-07\nx0: -0.00023903776922459534\nx1: 0.0002607323150065108\n\n\n[['x0', -0.00023903776922459534], ['x1', 0.0002607323150065108]]\n\n\n\nspot_2_ei_noniso.surrogate.plot()\n\n\n\n\n\n\n\n\n\n\n\nTensorBoard visualization of the spotPython optimization process and the surrogate model. Expected improvement, isotropic Kriging.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#using-sklearn-surrogates",
    "href": "012_num_spot_ei.html#using-sklearn-surrogates",
    "title": "12  Expected Improvement",
    "section": "12.4 Using sklearn Surrogates",
    "text": "12.4 Using sklearn Surrogates\n\n12.4.1 The spot Loop\nThe spot loop consists of the following steps:\n\nInit: Build initial design \\(X\\)\nEvaluate initial design on real objective \\(f\\): \\(y = f(X)\\)\nBuild surrogate: \\(S = S(X,y)\\)\nOptimize on surrogate: \\(X_0 =  \\text{optimize}(S)\\)\nEvaluate on real objective: \\(y_0 = f(X_0)\\)\nImpute (Infill) new points: \\(X = X \\cup X_0\\), \\(y = y \\cup y_0\\).\nGot 3.\n\nThe spot loop is implemented in R as follows:\n\n\n\nVisual representation of the model based search with SPOT. Taken from: Bartz-Beielstein, T., and Zaefferer, M. Hyperparameter tuning approaches. In Hyperparameter Tuning for Machine and Deep Learning with R - A Practical Guide, E. Bartz, T. Bartz-Beielstein, M. Zaefferer, and O. Mersmann, Eds. Springer, 2022, ch. 4, pp. 67–114.\n\n\n\n\n12.4.2 spot: The Initial Model\n\n12.4.2.1 Example: Modifying the initial design size\nThis is the “Example: Modifying the initial design size” from Chapter 4.5.1 in [bart21i].\n\nspot_ei = spot.Spot(fun=fun,\n                fun_control=fun_control_init(\n                lower = np.array([-1,-1]),\n                upper= np.array([1,1])), \n                design_control = design_control_init(init_size=5))\nspot_ei.run()\n\nspotPython tuning: 0.1377171852680486 [####------] 40.00% \nspotPython tuning: 0.008763557388693657 [#####-----] 46.67% \nspotPython tuning: 0.002832279071142736 [#####-----] 53.33% \nspotPython tuning: 0.0008138662965600185 [######----] 60.00% \nspotPython tuning: 0.00036637583790222027 [#######---] 66.67% \nspotPython tuning: 0.00036006945938022686 [#######---] 73.33% \nspotPython tuning: 0.0003591078890308837 [########--] 80.00% \nspotPython tuning: 0.00032713515580249373 [#########-] 86.67% \nspotPython tuning: 0.0002785854368057176 [#########-] 93.33% \nspotPython tuning: 0.0001638494253170647 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2d5ee9b50&gt;\n\n\n\nspot_ei.plot_progress()\n\n\n\n\n\n\n\n\n\nnp.min(spot_1.y), np.min(spot_ei.y)\n\n(2.802111689321758e-11, 0.0001638494253170647)\n\n\n\n\n\n12.4.3 Init: Build Initial Design\n\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nfrom spotPython.fun.objectivefunctions import analytical\ngen = spacefilling(2)\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\n\n[[ 8.97647221 13.41926847]\n [ 0.66946019  1.22344228]\n [ 5.23614115 13.78185824]\n [ 5.6149825  11.5851384 ]\n [-1.72963184  1.66516096]\n [-4.26945568  7.1325531 ]\n [ 1.26363761 10.17935555]\n [ 2.88779942  8.05508969]\n [-3.39111089  4.15213772]\n [ 7.30131231  5.22275244]]\n[128.95676449  31.73474356 172.89678121 126.71295908  64.34349975\n  70.16178611  48.71407916  31.77322887  76.91788181  30.69410529]\n\n\n\nS = Kriging(name='kriging',  seed=123)\nS.fit(X, y)\nS.plot()\n\n\n\n\n\n\n\n\n\ngen = spacefilling(2, seed=123)\nX0 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=345)\nX1 = gen.scipy_lhd(3)\nX2 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=123)\nX3 = gen.scipy_lhd(3)\nX0, X1, X2, X3\n\n(array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]),\n array([[0.78373509, 0.86811887],\n        [0.06692621, 0.6058029 ],\n        [0.41374778, 0.00525456]]),\n array([[0.121357  , 0.69043832],\n        [0.41906219, 0.32838498],\n        [0.86742658, 0.52910374]]),\n array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]))\n\n\n\n\n12.4.4 Evaluate\n\n\n12.4.5 Build Surrogate\n\n\n12.4.6 A Simple Predictor\nThe code below shows how to use a simple model for prediction.\n\nAssume that only two (very costly) measurements are available:\n\nf(0) = 0.5\nf(2) = 2.5\n\nWe are interested in the value at \\(x_0 = 1\\), i.e., \\(f(x_0 = 1)\\), but cannot run an additional, third experiment.\n\n\nfrom sklearn import linear_model\nX = np.array([[0], [2]])\ny = np.array([0.5, 2.5])\nS_lm = linear_model.LinearRegression()\nS_lm = S_lm.fit(X, y)\nX0 = np.array([[1]])\ny0 = S_lm.predict(X0)\nprint(y0)\n\n[1.5]\n\n\n\nCentral Idea:\n\nEvaluation of the surrogate model S_lm is much cheaper (or / and much faster) than running the real-world experiment \\(f\\).",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#gaussian-processes-regression-basic-introductory-example",
    "href": "012_num_spot_ei.html#gaussian-processes-regression-basic-introductory-example",
    "title": "12  Expected Improvement",
    "section": "12.5 Gaussian Processes regression: basic introductory example",
    "text": "12.5 Gaussian Processes regression: basic introductory example\nThis example was taken from scikit-learn. After fitting our model, we see that the hyperparameters of the kernel have been optimized. Now, we will use our kernel to compute the mean prediction of the full dataset and plot the 95% confidence interval.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math as m\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\n\nX = np.linspace(start=0, stop=10, num=1_000).reshape(-1, 1)\ny = np.squeeze(X * np.sin(X))\nrng = np.random.RandomState(1)\ntraining_indices = rng.choice(np.arange(y.size), size=6, replace=False)\nX_train, y_train = X[training_indices], y[training_indices]\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\ngaussian_process = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\ngaussian_process.fit(X_train, y_train)\ngaussian_process.kernel_\n\nmean_prediction, std_prediction = gaussian_process.predict(X, return_std=True)\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    mean_prediction - 1.96 * std_prediction,\n    mean_prediction + 1.96 * std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"sk-learn Version: Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n\n\n\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport matplotlib.pyplot as plt\nrng = np.random.RandomState(1)\nX = np.linspace(start=0, stop=10, num=1_000).reshape(-1, 1)\ny = np.squeeze(X * np.sin(X))\ntraining_indices = rng.choice(np.arange(y.size), size=6, replace=False)\nX_train, y_train = X[training_indices], y[training_indices]\n\n\nS = Kriging(name='kriging',  seed=123, log_level=50, cod_type=\"norm\")\nS.fit(X_train, y_train)\n\nmean_prediction, std_prediction, ei = S.predict(X, return_val=\"all\")\n\nstd_prediction\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    mean_prediction - 1.96 * std_prediction,\n    mean_prediction + 1.96 * std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"spotPython Version: Gaussian process regression on noise-free dataset\")",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#the-surrogate-using-scikit-learn-models",
    "href": "012_num_spot_ei.html#the-surrogate-using-scikit-learn-models",
    "title": "12  Expected Improvement",
    "section": "12.6 The Surrogate: Using scikit-learn models",
    "text": "12.6 The Surrogate: Using scikit-learn models\nDefault is the internal kriging surrogate.\n\nS_0 = Kriging(name='kriging', seed=123)\n\nModels from scikit-learn can be selected, e.g., Gaussian Process:\n\n# Needed for the sklearn surrogates:\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn import tree\nimport pandas as pd\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\nS_GP = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\n\n\nand many more:\n\n\nS_Tree = DecisionTreeRegressor(random_state=0)\nS_LM = linear_model.LinearRegression()\nS_Ridge = linear_model.Ridge()\nS_RF = RandomForestRegressor(max_depth=2, random_state=0) \n\n\nThe scikit-learn GP model S_GP is selected.\n\n\nS = S_GP\n\n\nisinstance(S, GaussianProcessRegressor)\n\nTrue\n\n\n\nfrom spotPython.fun.objectivefunctions import analytical\nfun = analytical().fun_branin\nfun_control = fun_control_init(\n    lower = np.array([-5,-0]),\n    upper = np.array([10,15]),\n    fun_evals = 15)    \ndesign_control = design_control_init(init_size=5)\nspot_GP = spot.Spot(fun=fun, \n                    fun_control=fun_control,\n                    surrogate=S, \n                    design_control=design_control)\nspot_GP.run()\n\nspotPython tuning: 24.51465459019188 [####------] 40.00% \nspotPython tuning: 11.003077541587748 [#####-----] 46.67% \nspotPython tuning: 11.003077541587748 [#####-----] 53.33% \nspotPython tuning: 7.281227279299504 [######----] 60.00% \nspotPython tuning: 7.281227279299504 [#######---] 66.67% \nspotPython tuning: 7.281227279299504 [#######---] 73.33% \nspotPython tuning: 2.9519489314482 [########--] 80.00% \nspotPython tuning: 2.9519489314482 [#########-] 86.67% \nspotPython tuning: 2.104972804244822 [#########-] 93.33% \nspotPython tuning: 1.9431600962086772 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2d6599c10&gt;\n\n\n\nspot_GP.y\n\narray([ 69.32459936, 152.38491454, 107.92560483,  24.51465459,\n        76.73500031,  86.30425303,  11.00307754,  16.11742138,\n         7.28122728,  21.82317903,  10.96088904,   2.95194893,\n         3.02910742,   2.1049728 ,   1.9431601 ])\n\n\n\nspot_GP.plot_progress()\n\n\n\n\n\n\n\n\n\nspot_GP.print_results()\n\nmin y: 1.9431600962086772\nx0: 10.0\nx1: 2.9985482809555464\n\n\n[['x0', 10.0], ['x1', 2.9985482809555464]]",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#additional-examples",
    "href": "012_num_spot_ei.html#additional-examples",
    "title": "12  Expected Improvement",
    "section": "12.7 Additional Examples",
    "text": "12.7 Additional Examples\n\n# Needed for the sklearn surrogates:\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.gaussian_process.kernels import RBF\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import linear_model\nfrom sklearn import tree\nimport pandas as pd\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\nS_GP = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\n\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\n\nS_K = Kriging(name='kriging',\n              seed=123,\n              log_level=50,\n              infill_criterion = \"y\",\n              n_theta=1,\n              noise=False,\n              cod_type=\"norm\")\nfun = analytical().fun_sphere\n\nfun_control = fun_control_init(\n    lower = np.array([-1,-1]),\n    upper = np.array([1,1]),\n    fun_evals = 25)\n\nspot_S_K = spot.Spot(fun=fun,\n                     fun_control=fun_control,\n                     surrogate=S_K,\n                     design_control=design_control,\n                     surrogate_control=surrogate_control)\nspot_S_K.run()\n\nspotPython tuning: 0.13771718778810743 [##--------] 24.00% \nspotPython tuning: 0.008768000187888899 [###-------] 28.00% \nspotPython tuning: 0.0028300907437246053 [###-------] 32.00% \nspotPython tuning: 0.0008148020998531609 [####------] 36.00% \nspotPython tuning: 0.00036681248440550095 [####------] 40.00% \nspotPython tuning: 0.00035607605553701025 [####------] 44.00% \nspotPython tuning: 0.00035607605553701025 [#####-----] 48.00% \nspotPython tuning: 0.00033033596693814263 [#####-----] 52.00% \nspotPython tuning: 0.0002774179969789593 [######----] 56.00% \nspotPython tuning: 0.00016886412273302311 [######----] 60.00% \nspotPython tuning: 2.0349536932144563e-05 [######----] 64.00% \nspotPython tuning: 1.6621220007683266e-06 [#######---] 68.00% \nspotPython tuning: 4.905822935561126e-07 [#######---] 72.00% \nspotPython tuning: 4.7634545282279014e-07 [########--] 76.00% \nspotPython tuning: 3.966290585455581e-07 [########--] 80.00% \nspotPython tuning: 1.9602185212475464e-07 [########--] 84.00% \nspotPython tuning: 1.7115221726800905e-07 [#########-] 88.00% \nspotPython tuning: 1.7115221726800905e-07 [#########-] 92.00% \nspotPython tuning: 1.7115221726800905e-07 [##########] 96.00% \nspotPython tuning: 1.7115221726800905e-07 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2dcf9be90&gt;\n\n\n\nspot_S_K.plot_progress(log_y=True)\n\n\n\n\n\n\n\n\n\nspot_S_K.surrogate.plot()\n\n\n\n\n\n\n\n\n\nspot_S_K.print_results()\n\nmin y: 1.7115221726800905e-07\nx0: 0.0003105897139994429\nx1: 0.0002732878460995902\n\n\n[['x0', 0.0003105897139994429], ['x1', 0.0002732878460995902]]\n\n\n\n12.7.1 Optimize on Surrogate\n\n\n12.7.2 Evaluate on Real Objective\n\n\n12.7.3 Impute / Infill new Points",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#tests",
    "href": "012_num_spot_ei.html#tests",
    "title": "12  Expected Improvement",
    "section": "12.8 Tests",
    "text": "12.8 Tests\n\nimport numpy as np\nfrom spotPython.spot import spot\nfrom spotPython.fun.objectivefunctions import analytical\n\nfun_sphere = analytical().fun_sphere\n\nfun_control = fun_control_init(\n                    lower=np.array([-1, -1]),\n                    upper=np.array([1, 1]),\n                    n_points = 2)\nspot_1 = spot.Spot(\n    fun=fun_sphere,\n    fun_control=fun_control,\n)\n\n# (S-2) Initial Design:\nspot_1.X = spot_1.design.scipy_lhd(\n    spot_1.design_control[\"init_size\"], lower=spot_1.lower, upper=spot_1.upper\n)\nprint(spot_1.X)\n\n# (S-3): Eval initial design:\nspot_1.y = spot_1.fun(spot_1.X)\nprint(spot_1.y)\n\nspot_1.fit_surrogate()\nX0 = spot_1.suggest_new_X()\nprint(X0)\nassert X0.size == spot_1.n_points * spot_1.k\n\n[[ 0.86352963  0.7892358 ]\n [-0.24407197 -0.83687436]\n [ 0.36481882  0.8375811 ]\n [ 0.415331    0.54468512]\n [-0.56395091 -0.77797854]\n [-0.90259409 -0.04899292]\n [-0.16484832  0.35724741]\n [ 0.05170659  0.07401196]\n [-0.78548145 -0.44638164]\n [ 0.64017497 -0.30363301]]\n[1.36857656 0.75992983 0.83463487 0.46918172 0.92329124 0.8170764\n 0.15480068 0.00815134 0.81623768 0.502017  ]\n[[0.00159092 0.00410652]\n [0.00190779 0.00379162]]",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#ei-the-famous-schonlau-example",
    "href": "012_num_spot_ei.html#ei-the-famous-schonlau-example",
    "title": "12  Expected Improvement",
    "section": "12.9 EI: The Famous Schonlau Example",
    "text": "12.9 EI: The Famous Schonlau Example\n\nX_train0 = np.array([1, 2, 3, 4, 12]).reshape(-1,1)\nX_train = np.linspace(start=0, stop=10, num=5).reshape(-1, 1)\n\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nX_train = np.array([1., 2., 3., 4., 12.]).reshape(-1,1)\ny_train = np.array([0., -1.75, -2, -0.5, 5.])\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False, cod_type=\"norm\")\nS.fit(X_train, y_train)\n\nX = np.linspace(start=0, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nif True:\n    plt.fill_between(\n        X.ravel(),\n        mean_prediction - 2 * std_prediction,\n        mean_prediction + 2 * std_prediction,\n        alpha=0.5,\n        label=r\"95% confidence interval\",\n    )\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n\n\n\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\n# plt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, -ei, label=\"Expected Improvement\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n\n\n\n\nS.log\n\n{'negLnLike': array([1.20788205]),\n 'theta': array([-0.9900252]),\n 'p': [],\n 'Lambda': []}",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#ei-the-forrester-example",
    "href": "012_num_spot_ei.html#ei-the-forrester-example",
    "title": "12  Expected Improvement",
    "section": "12.10 EI: The Forrester Example",
    "text": "12.10 EI: The Forrester Example\n\nfrom spotPython.build.kriging import Kriging\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\n\n# exact x locations are unknown:\nX_train = np.array([0.0, 0.175, 0.225, 0.3, 0.35, 0.375, 0.5,1]).reshape(-1,1)\n\nfun = analytical().fun_forrester\nfun_control = fun_control_init(\n    PREFIX=\"07_EI_FORRESTER\",\n    sigma=1.0,\n    seed=123,)\ny_train = fun(X_train, fun_control=fun_control)\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False, cod_type=\"norm\")\nS.fit(X_train, y_train)\n\nX = np.linspace(start=0, stop=1, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nif True:\n    plt.fill_between(\n        X.ravel(),\n        mean_prediction - 2 * std_prediction,\n        mean_prediction + 2 * std_prediction,\n        alpha=0.5,\n        label=r\"95% confidence interval\",\n    )\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")\n\nCreated spot_tensorboard_path: runs/spot_logs/07_EI_FORRESTER_p040025_2024-01-10_22-34-00 for SummaryWriter()\n\n\n\n\n\n\n\n\n\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\n# plt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, -ei, label=\"Expected Improvement\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noise-free dataset\")",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#noise",
    "href": "012_num_spot_ei.html#noise",
    "title": "12  Expected Improvement",
    "section": "12.11 Noise",
    "text": "12.11 Noise\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_sphere\nfun_control = fun_control_init(\n    PREFIX=\"07_Y\",\n    sigma=2.0,\n    seed=123,)\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\ny.shape\nX_train = X.reshape(-1,1)\ny_train = y\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression on noisy dataset\")\n\nCreated spot_tensorboard_path: runs/spot_logs/07_Y_p040025_2024-01-10_22-34-01 for SummaryWriter()\n[[ 0.63529627]\n [-4.10764204]\n [-0.44071975]\n [ 9.63125638]\n [-8.3518118 ]\n [-3.62418901]\n [ 4.15331   ]\n [ 3.4468512 ]\n [ 6.36049088]\n [-7.77978539]]\n[-1.57464135 16.13714981  2.77008442 93.14904827 71.59322218 14.28895359\n 15.9770567  12.96468767 39.82265329 59.88028242]\n\n\n\n\n\n\n\n\n\n\nS.log\n\n{'negLnLike': array([26.18505386]),\n 'theta': array([-1.10547474]),\n 'p': [],\n 'Lambda': []}\n\n\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\n#plt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression with nugget on noisy dataset\")\n\n\n\n\n\n\n\n\n\nS.log\n\n{'negLnLike': array([21.82059174]),\n 'theta': array([-2.96946062]),\n 'p': [],\n 'Lambda': array([4.28985898e-05])}",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#cubic-function",
    "href": "012_num_spot_ei.html#cubic-function",
    "title": "12  Expected Improvement",
    "section": "12.12 Cubic Function",
    "text": "12.12 Cubic Function\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_cubed\nfun_control = fun_control_init(\n    PREFIX=\"07_Y\",\n    sigma=10.0,\n    seed=123,)\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\ny.shape\nX_train = X.reshape(-1,1)\ny_train = y\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Cubed: Gaussian process regression on noisy dataset\")\n\nCreated spot_tensorboard_path: runs/spot_logs/07_Y_p040025_2024-01-10_22-34-01 for SummaryWriter()\n[[ 0.63529627]\n [-4.10764204]\n [-0.44071975]\n [ 9.63125638]\n [-8.3518118 ]\n [-3.62418901]\n [ 4.15331   ]\n [ 3.4468512 ]\n [ 6.36049088]\n [-7.77978539]]\n[ 2.56406437e-01 -6.93071067e+01 -8.56027124e-02  8.93405931e+02\n -5.82561927e+02 -4.76028022e+01  7.16445311e+01  4.09512920e+01\n  2.57319028e+02 -4.70871982e+02]\n\n\n\n\n\n\n\n\n\n\nS = Kriging(name='kriging',  seed=123, log_level=0, n_theta=1, noise=True)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Cubed: Gaussian process with nugget regression on noisy dataset\")\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = fun_control_init(\n    PREFIX=\"07_Y\",\n    sigma=0.25,\n    seed=123,)\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\ny.shape\nX_train = X.reshape(-1,1)\ny_train = y\n\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=1, noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression on noisy dataset\")\n\nCreated spot_tensorboard_path: runs/spot_logs/07_Y_p040025_2024-01-10_22-34-02 for SummaryWriter()\n[[ 0.63529627]\n [-4.10764204]\n [-0.44071975]\n [ 9.63125638]\n [-8.3518118 ]\n [-3.62418901]\n [ 4.15331   ]\n [ 3.4468512 ]\n [ 6.36049088]\n [-7.77978539]]\n[0.712453   0.05595118 0.83735691 0.0106654  0.01413372 0.07074765\n 0.05479457 0.07763503 0.02412205 0.01625354]\n\n\n\n\n\n\n\n\n\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression with nugget on noisy dataset\")",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#factors",
    "href": "012_num_spot_ei.html#factors",
    "title": "12  Expected Improvement",
    "section": "12.14 Factors",
    "text": "12.14 Factors\n\n[\"num\"] * 3\n\n['num', 'num', 'num']\n\n\n\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nfrom spotPython.fun.objectivefunctions import analytical\nimport numpy as np\n\n\ngen = spacefilling(2)\nn = 30\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin_factor\n#fun = analytical(sigma=0).fun_sphere\n\nX0 = gen.scipy_lhd(n, lower=lower, upper = upper)\nX1 = np.random.randint(low=1, high=3, size=(n,))\nX = np.c_[X0, X1]\ny = fun(X)\nS = Kriging(name='kriging',  seed=123, log_level=50, n_theta=3, noise=False, var_type=[\"num\", \"num\", \"num\"])\nS.fit(X, y)\nSf = Kriging(name='kriging',  seed=123, log_level=50, n_theta=3, noise=False, var_type=[\"num\", \"num\", \"factor\"])\nSf.fit(X, y)\nn = 50\nX0 = gen.scipy_lhd(n, lower=lower, upper = upper)\nX1 = np.random.randint(low=1, high=3, size=(n,))\nX = np.c_[X0, X1]\ny = fun(X)\ns=np.sum(np.abs(S.predict(X)[0] - y))\nsf=np.sum(np.abs(Sf.predict(X)[0] - y))\nsf - s\n\n-55.49075685088792\n\n\n\n# vars(S)\n\n\n# vars(Sf)",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  },
  {
    "objectID": "013_num_spot_noisy.html",
    "href": "013_num_spot_noisy.html",
    "title": "13  Handling Noise",
    "section": "",
    "text": "13.1 Example: Spot and the Noisy Sphere Function\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nimport matplotlib.pyplot as plt\nfrom spotPython.utils.init import fun_control_init\nfrom spotPython.utils.file import get_spot_tensorboard_path\nfrom spotPython.utils.init import fun_control_init, design_control_init, surrogate_control_init\n\nPREFIX = \"08\"",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Handling Noise</span>"
    ]
  },
  {
    "objectID": "013_num_spot_noisy.html#example-spot-and-the-noisy-sphere-function",
    "href": "013_num_spot_noisy.html#example-spot-and-the-noisy-sphere-function",
    "title": "13  Handling Noise",
    "section": "",
    "text": "13.1.1 The Objective Function: Noisy Sphere\nThe spotPython package provides several classes of objective functions, which return a one-dimensional output \\(y=f(x)\\) for a given input \\(x\\) (independent variable). Several objective functions allow one- or multidimensional input, some also combinations of real-valued and categorial input values.\nAn objective function is considered as “analytical” if it can be described by a closed mathematical formula, e.g., \\[\nf(x, y) = x^2 + y^2.\n\\]\nTo simulate measurement errors, adding artificial noise to the function value \\(y\\) is a common practice, e.g.,:\n\\[\nf(x, y) = x^2 + y^2 + \\epsilon.\n\\]\nUsually, noise is assumed to be normally distributed with mean \\(\\mu=0\\) and standard deviation \\(\\sigma\\). spotPython uses numpy’s scale parameter, which specifies the standard deviation (spread or “width”) of the distribution is used. This must be a non-negative value, see https://numpy.org/doc/stable/reference/random/generated/numpy.random.normal.html.\n\n\n\n\n\n\nExample: The sphere function without noise\n\n\n\nThe default setting does not use any noise.\n\nfrom spotPython.fun.objectivefunctions import analytical\nfun = analytical().fun_sphere\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExample: The sphere function with noise\n\n\n\nNoise can be added to the sphere function as follows:\n\nfrom spotPython.fun.objectivefunctions import analytical\nfun = analytical(seed=123, sigma=0.02).fun_sphere\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n13.1.2 Reproducibility: Noise Generation and Seed Handling\nspotPython provides two mechanisms for generating random noise:\n\nThe seed is initialized once, i.e., when the objective function is instantiated. This can be done using the following call: fun = analytical(sigma=0.02, seed=123).fun_sphere.\nThe seed is set every time the objective function is called. This can be done using the following call: y = fun(x, sigma=0.02, seed=123).\n\nThese two different ways lead to different results as explained in the following tables:\n\n\n\n\n\n\nExample: Noise added to the sphere function\n\n\n\nSince sigma is set to 0.02, noise is added to the function:\n\nfrom spotPython.fun.objectivefunctions import analytical\nfun = analytical(sigma=0.02, seed=123).fun_sphere\nx = np.array([1]).reshape(-1,1)\nfor i in range(3):\n    print(f\"{i}: {fun(x)}\")\n\n0: [0.98021757]\n1: [0.99264427]\n2: [1.02575851]\n\n\nThe seed is set once. Every call to fun() results in a different value. The whole experiment can be repeated, the initial seed is used to generate the same sequence as shown below:\n\n\n\n\n\n\n\n\nExample: Noise added to the sphere function\n\n\n\nSince sigma is set to 0.02, noise is added to the function:\n\nfrom spotPython.fun.objectivefunctions import analytical\nfun = analytical(sigma=0.02, seed=123).fun_sphere\nx = np.array([1]).reshape(-1,1)\nfor i in range(3):\n    print(f\"{i}: {fun(x)}\")\n\n0: [0.98021757]\n1: [0.99264427]\n2: [1.02575851]\n\n\n\n\nIf spotPython is used as a hyperparameter tuner, it is important that only one realization of the noise function is optimized. This behaviour can be accomplished by passing the same seed via the dictionary fun_control to every call of the objective function fun as shown below:\n\n\n\n\n\n\nExample: The same noise added to the sphere function\n\n\n\nSince sigma is set to 0.02, noise is added to the function:\n\nfrom spotPython.fun.objectivefunctions import analytical\nfun = analytical().fun_sphere\nfun_control = fun_control_init(\n    PREFIX=PREFIX,\n    sigma=0.02)\ny = fun(x, fun_control=fun_control)\nx = np.array([1]).reshape(-1,1)\nfor i in range(3):\n    print(f\"{i}: {fun(x)}\")\n\nCreated spot_tensorboard_path: runs/spot_logs/08_p040025_2024-01-09_20-19-45 for SummaryWriter()\n0: [0.98021757]\n1: [0.98021757]\n2: [0.98021757]",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Handling Noise</span>"
    ]
  },
  {
    "objectID": "013_num_spot_noisy.html#spotpythons-noise-handling-approaches",
    "href": "013_num_spot_noisy.html#spotpythons-noise-handling-approaches",
    "title": "13  Handling Noise",
    "section": "13.2 spotPython’s Noise Handling Approaches",
    "text": "13.2 spotPython’s Noise Handling Approaches\nThe following setting will be used for the next steps:\n\nfun = analytical().fun_sphere\nfun_control = fun_control_init(\n    PREFIX=PREFIX,\n    sigma=0.02,\n)\n\nCreated spot_tensorboard_path: runs/spot_logs/08_p040025_2024-01-09_20-19-45 for SummaryWriter()\n\n\nspotPython is adopted as follows to cope with noisy functions:\n\nfun_repeats is set to a value larger than 1 (here: 2)\nnoise is set to true. Therefore, a nugget (Lambda) term is added to the correlation matrix\ninit size (of the design_control dictionary) is set to a value larger than 1 (here: 3)\n\n\nspot_1_noisy = spot.Spot(fun=fun,\n                   fun_control=fun_control_init(\n                                    lower = np.array([-1]),\n                                    upper = np.array([1]),\n                                    fun_evals = 20,\n                                    fun_repeats = 2,\n                                    noise = True,\n                                    show_models=True),\n                   design_control=design_control_init(init_size=3, repeats=2),\n                   surrogate_control=surrogate_control_init(noise=True))\n\n\nspot_1_noisy.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspotPython tuning: 0.034754931797000475 [####------] 40.00% \nspotPython tuning: 0.0347549291052682 [#####-----] 50.00% \nspotPython tuning: 0.03462521823117037 [######----] 60.00% \nspotPython tuning: 0.017469986696189304 [#######---] 70.00% \nspotPython tuning: 0.004000038051356374 [########--] 80.00% \nspotPython tuning: 0.00022058859554626256 [#########-] 90.00% \nspotPython tuning: 9.544809881586792e-06 [##########] 100.00% Done...",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Handling Noise</span>"
    ]
  },
  {
    "objectID": "013_num_spot_noisy.html#print-the-results",
    "href": "013_num_spot_noisy.html#print-the-results",
    "title": "13  Handling Noise",
    "section": "13.3 Print the Results",
    "text": "13.3 Print the Results\n\nspot_1_noisy.print_results()\n\nmin y: 9.544809881586792e-06\nx0: 0.003089467572509346\nmin mean y: 9.544809881586792e-06\nx0: 0.003089467572509346\n\n\n[['x0', 0.003089467572509346], ['x0', 0.003089467572509346]]\n\n\n\nspot_1_noisy.plot_progress(log_y=False,\n    filename=\"./figures/\" + PREFIX + \"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Handling Noise</span>"
    ]
  },
  {
    "objectID": "013_num_spot_noisy.html#noise-and-surrogates-the-nugget-effect",
    "href": "013_num_spot_noisy.html#noise-and-surrogates-the-nugget-effect",
    "title": "13  Handling Noise",
    "section": "13.4 Noise and Surrogates: The Nugget Effect",
    "text": "13.4 Noise and Surrogates: The Nugget Effect\n\n13.4.1 The Noisy Sphere\n\n13.4.1.1 The Data\n\nWe prepare some data first:\n\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_sphere\nfun_control = fun_control_init(\n    PREFIX=PREFIX,\n    sigma=4)\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\ny = fun(X, fun_control=fun_control)\nX_train = X.reshape(-1,1)\ny_train = y\n\nCreated spot_tensorboard_path: runs/spot_logs/08_p040025_2024-01-09_20-20-05 for SummaryWriter()\n\n\n\nA surrogate without nugget is fitted to these data:\n\n\nS = Kriging(name='kriging',\n            n_theta=1,\n            noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression on noisy dataset\")\n\n\n\n\n\n\n\n\n\nIn comparison to the surrogate without nugget, we fit a surrogate with nugget to the data:\n\n\nS_nug = Kriging(name='kriging',\n            n_theta=1,\n            noise=True)\nS_nug.fit(X_train, y_train)\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S_nug.predict(X_axis, return_val=\"all\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression with nugget on noisy dataset\")\n\n\n\n\n\n\n\n\n\nThe value of the nugget term can be extracted from the model as follows:\n\n\nS.Lambda\n\n\nS_nug.Lambda\n\n0.00055921881757264\n\n\n\nWe see:\n\nthe first model S has no nugget,\nwhereas the second model has a nugget value (Lambda) larger than zero.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Handling Noise</span>"
    ]
  },
  {
    "objectID": "013_num_spot_noisy.html#exercises",
    "href": "013_num_spot_noisy.html#exercises",
    "title": "13  Handling Noise",
    "section": "13.5 Exercises",
    "text": "13.5 Exercises\n\n13.5.1 Noisy fun_cubed\n\nAnalyse the effect of noise on the fun_cubed function with the following settings:\n\n\nfun = analytical().fun_cubed\nfun_control = fun_control_init(\n    sigma=10)\nlower = np.array([-10])\nupper = np.array([10])\n\n\n\n13.5.2 fun_runge\n\nAnalyse the effect of noise on the fun_runge function with the following settings:\n\n\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = fun_control_init(\n    sigma=0.25)\n\n\n\n13.5.3 fun_forrester\n\nAnalyse the effect of noise on the fun_forrester function with the following settings:\n\n\nlower = np.array([0])\nupper = np.array([1])\nfun = analytical().fun_forrester\nfun_control = fun_control_init(\n    sigma=5)\n\n\n\n13.5.4 fun_xsin\n\nAnalyse the effect of noise on the fun_xsin function with the following settings:\n\n\nlower = np.array([-1.])\nupper = np.array([1.])\nfun = analytical().fun_xsin\nfun_control = fun_control_init(    \n    sigma=0.5)",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Handling Noise</span>"
    ]
  },
  {
    "objectID": "014_num_spot_ocba.html",
    "href": "014_num_spot_ocba.html",
    "title": "14  Optimal Computational Budget Allocation in Spot",
    "section": "",
    "text": "14.1 Example: Spot, OCBA, and the Noisy Sphere Function\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nimport matplotlib.pyplot as plt\nfrom spotPython.utils.init import fun_control_init\nfrom spotPython.utils.file import get_spot_tensorboard_path\nfrom spotPython.utils.init import fun_control_init, design_control_init, surrogate_control_init\n\nPREFIX = \"09\"",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Optimal Computational Budget Allocation in `Spot`</span>"
    ]
  },
  {
    "objectID": "014_num_spot_ocba.html#example-spot-ocba-and-the-noisy-sphere-function",
    "href": "014_num_spot_ocba.html#example-spot-ocba-and-the-noisy-sphere-function",
    "title": "14  Optimal Computational Budget Allocation in Spot",
    "section": "",
    "text": "14.1.1 The Objective Function: Noisy Sphere\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function with noise, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2 + \\epsilon\\]\nSince sigma is set to 0.1, noise is added to the function:\n\nfun = analytical().fun_sphere\nfun_control = fun_control_init(\n    PREFIX=PREFIX,\n    sigma=0.1)\n\nCreated spot_tensorboard_path: runs/spot_logs/09_p040025_2024-01-09_20-20-37 for SummaryWriter()\n\n\nA plot illustrates the noise:\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x, fun_control=fun_control)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\n\n\n\n\nSpot is adopted as follows to cope with noisy functions:\n\nfun_repeats is set to a value larger than 1 (here: 2)\nnoise is set to true. Therefore, a nugget (Lambda) term is added to the correlation matrix\ninit size (of the design_control dictionary) is set to a value larger than 1 (here: 2)\n\n\nspot_1_noisy = spot.Spot(fun=fun,\n                   fun_control=fun_control_init( \n                   lower = np.array([-1]),\n                   upper = np.array([1]),\n                   fun_evals = 20,\n                   fun_repeats = 2,\n                   infill_criterion=\"ei\",\n                   noise = True,\n                   tolerance_x=0.0,\n                   ocba_delta = 1,                   \n                   show_models=True),\n                   design_control=design_control_init(init_size=3, repeats=2),\n                   surrogate_control=surrogate_control_init(noise=True))\n\n\nspot_1_noisy.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspotPython tuning: 0.03475493366922229 [####------] 40.00% \nspotPython tuning: 0.00779944837528439 [#####-----] 50.00% \nspotPython tuning: 0.0006387949380800254 [######----] 60.00% \nspotPython tuning: 1.69966282482316e-06 [#######---] 70.00% \nspotPython tuning: 3.8093880816701285e-08 [########--] 80.00% \nspotPython tuning: 4.094750152333457e-09 [#########-] 90.00% \nspotPython tuning: 2.5113140448254767e-09 [##########] 100.00% Done...",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Optimal Computational Budget Allocation in `Spot`</span>"
    ]
  },
  {
    "objectID": "014_num_spot_ocba.html#print-the-results",
    "href": "014_num_spot_ocba.html#print-the-results",
    "title": "14  Optimal Computational Budget Allocation in Spot",
    "section": "14.2 Print the Results",
    "text": "14.2 Print the Results\n\nspot_1_noisy.print_results()\n\nmin y: 2.5113140448254767e-09\nx0: 5.011301272948451e-05\nmin mean y: 2.5113140448254767e-09\nx0: 5.011301272948451e-05\n\n\n[['x0', 5.011301272948451e-05], ['x0', 5.011301272948451e-05]]\n\n\n\nspot_1_noisy.plot_progress(log_y=False)",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Optimal Computational Budget Allocation in `Spot`</span>"
    ]
  },
  {
    "objectID": "014_num_spot_ocba.html#noise-and-surrogates-the-nugget-effect",
    "href": "014_num_spot_ocba.html#noise-and-surrogates-the-nugget-effect",
    "title": "14  Optimal Computational Budget Allocation in Spot",
    "section": "14.3 Noise and Surrogates: The Nugget Effect",
    "text": "14.3 Noise and Surrogates: The Nugget Effect\n\n14.3.1 The Noisy Sphere\n\n14.3.1.1 The Data\nWe prepare some data first:\n\nimport numpy as np\nimport spotPython\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nimport matplotlib.pyplot as plt\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_sphere\nfun_control = fun_control_init(    \n    sigma=2,\n    seed=125)\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\ny = fun(X, fun_control=fun_control)\nX_train = X.reshape(-1,1)\ny_train = y\n\nA surrogate without nugget is fitted to these data:\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=False)\nS.fit(X_train, y_train)\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression on noisy dataset\")\n\n\n\n\n\n\n\n\nIn comparison to the surrogate without nugget, we fit a surrogate with nugget to the data:\n\nS_nug = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True)\nS_nug.fit(X_train, y_train)\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S_nug.predict(X_axis, return_val=\"all\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Sphere: Gaussian process regression with nugget on noisy dataset\")\n\n\n\n\n\n\n\n\nThe value of the nugget term can be extracted from the model as follows:\n\nS.Lambda\n\n\nS_nug.Lambda\n\n8.374496269458742e-05\n\n\nWe see:\n\nthe first model S has no nugget,\nwhereas the second model has a nugget value (Lambda) larger than zero.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Optimal Computational Budget Allocation in `Spot`</span>"
    ]
  },
  {
    "objectID": "014_num_spot_ocba.html#exercises",
    "href": "014_num_spot_ocba.html#exercises",
    "title": "14  Optimal Computational Budget Allocation in Spot",
    "section": "14.4 Exercises",
    "text": "14.4 Exercises\n\n14.4.1 Noisy fun_cubed\nAnalyse the effect of noise on the fun_cubed function with the following settings:\n\nfun = analytical().fun_cubed\nfun_control = fun_control_init(    \n    sigma=10,\n    seed=123)\nlower = np.array([-10])\nupper = np.array([10])\n\n\n\n14.4.2 fun_runge\nAnalyse the effect of noise on the fun_runge function with the following settings:\n\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = fun_control_init(    \n    sigma=0.25,\n    seed=123)\n\n\n\n14.4.3 fun_forrester\nAnalyse the effect of noise on the fun_forrester function with the following settings:\n\nlower = np.array([0])\nupper = np.array([1])\nfun = analytical().fun_forrester\nfun_control = {\"sigma\": 5,\n               \"seed\": 123}\n\n\n\n14.4.4 fun_xsin\nAnalyse the effect of noise on the fun_xsin function with the following settings:\n\nlower = np.array([-1.])\nupper = np.array([1.])\nfun = analytical().fun_xsin\nfun_control = fun_control_init(    \n    sigma=0.5,\n    seed=123)",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Optimal Computational Budget Allocation in `Spot`</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html",
    "href": "031_spot_lightning_linear_diabetes.html",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "",
    "text": "16.1 Step 1: Setup\nfrom spotPython.utils.device import getDevice\nfrom math import inf\n\nMAX_TIME = 1\nFUN_EVALS = inf\nINIT_SIZE = 5\nWORKERS = 0\nPREFIX=\"031\"\nDEVICE = getDevice()\nDEVICES = 1\nTEST_SIZE = 0.1",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#sec-setup-31",
    "href": "031_spot_lightning_linear_diabetes.html#sec-setup-31",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "",
    "text": "Before we consider the detailed experimental setup, we select the parameters that affect run time, initial design size, etc.\nThe parameter MAX_TIME specifies the maximum run time in seconds.\nThe parameter INIT_SIZE specifies the initial design size.\nThe parameter WORKERS specifies the number of workers.\nThe prefix PREFIX is used for the experiment name and the name of the log file.\nThe parameter DEVICE specifies the device to use for training.\n\n\n\n\n\n\n\n\nCaution: Run time and initial design size should be increased for real experiments\n\n\n\n\nMAX_TIME is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\nINIT_SIZE is set to 5 for demonstration purposes. For real experiments, this should be increased to at least 10.\nWORKERS is set to 0 for demonstration purposes. For real experiments, this should be increased. See the warnings that are printed when the number of workers is set to 0.\n\n\n\n\n\n\n\n\n\nNote: Device selection\n\n\n\n\nAlthough there are no .cuda() or .to(device) calls required, because Lightning does these for you, see LIGHTNINGMODULE, we would like to know which device is used. Threrefore, we imitate the LightningModule behaviour which selects the highest device.\nThe method spotPython.utils.device.getDevice() returns the device that is used by Lightning.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#step-2-initialization-of-the-fun_control-dictionary",
    "href": "031_spot_lightning_linear_diabetes.html#step-2-initialization-of-the-fun_control-dictionary",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "16.2 Step 2: Initialization of the fun_control Dictionary",
    "text": "16.2 Step 2: Initialization of the fun_control Dictionary\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process.\n\nfrom spotPython.utils.init import fun_control_init\nimport numpy as np\nfun_control = fun_control_init(\n    _L_in=10,\n    _L_out=1,\n    PREFIX=PREFIX,\n    TENSORBOARD_CLEAN=True,\n    device=DEVICE,\n    enable_progress_bar=False,\n    fun_evals=FUN_EVALS,\n    log_level=10,\n    max_time=MAX_TIME,\n    num_workers=WORKERS,\n    show_progress=True,\n    test_size=0.1,\n    tolerance_x=np.sqrt(np.spacing(1)),\n    )\n\nMoving TENSORBOARD_PATH: runs/ to TENSORBOARD_PATH_OLD: runs_OLD/runs_2024_01_09_20_21_51\nCreated spot_tensorboard_path: runs/spot_logs/031_p040025_2024-01-09_20-21-51 for SummaryWriter()",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#step-3-loading-the-diabetes-data-set",
    "href": "031_spot_lightning_linear_diabetes.html#step-3-loading-the-diabetes-data-set",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "16.3 Step 3: Loading the Diabetes Data Set",
    "text": "16.3 Step 3: Loading the Diabetes Data Set\n\nfrom spotPython.hyperparameters.values import set_control_key_value\nfrom spotPython.data.diabetes import Diabetes\ndataset = Diabetes()\nset_control_key_value(control_dict=fun_control,\n                        key=\"data_set\",\n                        value=dataset,\n                        replace=True)\nprint(len(dataset))\n\n442\n\n\n\n\n\n\n\n\nNote: Data Set and Data Loader\n\n\n\n\nAs shown below, a DataLoader from torch.utils.data can be used to check the data.\n\n\n# Set batch size for DataLoader\nbatch_size = 5\n# Create DataLoader\nfrom torch.utils.data import DataLoader\ndataloader = DataLoader(dataset, batch_size=batch_size, shuffle=False)\n\n# Iterate over the data in the DataLoader\nfor batch in dataloader:\n    inputs, targets = batch\n    print(f\"Batch Size: {inputs.size(0)}\")\n    print(f\"Inputs Shape: {inputs.shape}\")\n    print(f\"Targets Shape: {targets.shape}\")\n    print(\"---------------\")\n    print(f\"Inputs: {inputs}\")\n    print(f\"Targets: {targets}\")\n    break\n\nBatch Size: 5\nInputs Shape: torch.Size([5, 10])\nTargets Shape: torch.Size([5])\n---------------\nInputs: tensor([[ 0.0381,  0.0507,  0.0617,  0.0219, -0.0442, -0.0348, -0.0434, -0.0026,\n          0.0199, -0.0176],\n        [-0.0019, -0.0446, -0.0515, -0.0263, -0.0084, -0.0192,  0.0744, -0.0395,\n         -0.0683, -0.0922],\n        [ 0.0853,  0.0507,  0.0445, -0.0057, -0.0456, -0.0342, -0.0324, -0.0026,\n          0.0029, -0.0259],\n        [-0.0891, -0.0446, -0.0116, -0.0367,  0.0122,  0.0250, -0.0360,  0.0343,\n          0.0227, -0.0094],\n        [ 0.0054, -0.0446, -0.0364,  0.0219,  0.0039,  0.0156,  0.0081, -0.0026,\n         -0.0320, -0.0466]])\nTargets: tensor([151.,  75., 141., 206., 135.])",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#sec-preprocessing-31",
    "href": "031_spot_lightning_linear_diabetes.html#sec-preprocessing-31",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "16.4 Step 4: Preprocessing",
    "text": "16.4 Step 4: Preprocessing\nPreprocessing is handled by Lightning and PyTorch. It is described in the LIGHTNINGDATAMODULE documentation. Here you can find information about the transforms methods.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#sec-selection-of-the-algorithm-31",
    "href": "031_spot_lightning_linear_diabetes.html#sec-selection-of-the-algorithm-31",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "16.5 Step 5: Select the Core Model (algorithm) and core_model_hyper_dict",
    "text": "16.5 Step 5: Select the Core Model (algorithm) and core_model_hyper_dict\nspotPython includes the NetLightRegression class [SOURCE] for configurable neural networks. The class is imported here. It inherits from the class Lightning.LightningModule, which is the base class for all models in Lightning. Lightning.LightningModule is a subclass of torch.nn.Module and provides additional functionality for the training and testing of neural networks. The class Lightning.LightningModule is described in the Lightning documentation.\n\nHere we simply add the NN Model to the fun_control dictionary by calling the function add_core_model_to_fun_control:\n\n\nfrom spotPython.light.regression.netlightregression import NetLightRegression\nfrom spotPython.hyperdict.light_hyper_dict import LightHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nadd_core_model_to_fun_control(fun_control=fun_control,\n                              core_model=NetLightRegression,\n                              hyper_dict=LightHyperDict)\n\nThe hyperparameters of the model are specified in the core_model_hyper_dict dictionary [SOURCE].",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#sec-modification-of-hyperparameters-31",
    "href": "031_spot_lightning_linear_diabetes.html#sec-modification-of-hyperparameters-31",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "16.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "16.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code.\n\n\n\n\n\n\nCaution: Small number of epochs for demonstration purposes\n\n\n\n\nepochs and patience are set to small values for demonstration purposes. These values are too small for a real application.\nMore resonable values are, e.g.:\n\nset_control_hyperparameter_value(fun_control, \"epochs\", [7, 9]) and\nset_control_hyperparameter_value(fun_control, \"patience\", [2, 7])\n\n\n\n\n\nfrom spotPython.hyperparameters.values import set_control_hyperparameter_value\n\nset_control_hyperparameter_value(fun_control, \"l1\", [4, 6])\nset_control_hyperparameter_value(fun_control, \"epochs\", [9, 10])\nset_control_hyperparameter_value(fun_control, \"batch_size\", [4, 5])\nset_control_hyperparameter_value(fun_control, \"optimizer\", [\n                \"Adadelta\",\n                \"Adagrad\",\n                \"Adam\",\n                \"AdamW\",\n                \"Adamax\",                \n                \"NAdam\",\n                \"RAdam\",\n                \"RMSprop\",\n                \"Rprop\"\n            ])\nset_control_hyperparameter_value(fun_control, \"dropout_prob\", [0.01, 0.1])\nset_control_hyperparameter_value(fun_control, \"lr_mult\", [0.5, 5.0])\nset_control_hyperparameter_value(fun_control, \"patience\", [5, 7])\nset_control_hyperparameter_value(fun_control, \"act_fn\",[\n                \"Sigmoid\",\n                \"ReLU\",\n                \"LeakyReLU\",\n                \"Swish\"\n            ] )\n\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table [SOURCE] generates a design table as follows:\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name           | type   | default   |   lower |   upper | transform             |\n|----------------|--------|-----------|---------|---------|-----------------------|\n| l1             | int    | 3         |    4    |     6   | transform_power_2_int |\n| epochs         | int    | 4         |    9    |    10   | transform_power_2_int |\n| batch_size     | int    | 4         |    4    |     5   | transform_power_2_int |\n| act_fn         | factor | ReLU      |    0    |     3   | None                  |\n| optimizer      | factor | SGD       |    0    |     8   | None                  |\n| dropout_prob   | float  | 0.01      |    0.01 |     0.1 | None                  |\n| lr_mult        | float  | 1.0       |    0.5  |     5   | None                  |\n| patience       | int    | 2         |    5    |     7   | transform_power_2_int |\n| initialization | factor | Default   |    0    |     2   | None                  |\n\n\nThis allows to check if all information is available and if the information is correct.\n\n\n\n\n\n\nNote: Hyperparameters of the Tuned Model and the fun_control Dictionary\n\n\n\nThe updated fun_control dictionary can be shown with the command fun_control[\"core_model_hyper_dict\"].",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#step-7-data-splitting-the-objective-loss-function-and-the-metric",
    "href": "031_spot_lightning_linear_diabetes.html#step-7-data-splitting-the-objective-loss-function-and-the-metric",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "16.7 Step 7: Data Splitting, the Objective (Loss) Function and the Metric",
    "text": "16.7 Step 7: Data Splitting, the Objective (Loss) Function and the Metric\n\n16.7.1 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set\nthe loss function (and a metric).\n\n\n\n\n\n\n\nCaution: Data Splitting in Lightning\n\n\n\nThe data splitting is handled by Lightning.\n\n\n\n\n16.7.2 Loss Function\nThe loss function is specified in the configurable network class [SOURCE] We will use MSE.\n\n\n16.7.3 Metric\n\nSimilar to the loss function, the metric is specified in the configurable network class [SOURCE].\n\n\n\n\n\n\n\nCaution: Loss Function and Metric in Lightning\n\n\n\n\nThe loss function and the metric are not hyperparameters that can be tuned with spotPython.\nThey are handled by Lightning.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#step-8-calling-the-spot-function",
    "href": "031_spot_lightning_linear_diabetes.html#step-8-calling-the-spot-function",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "16.8 Step 8: Calling the SPOT Function",
    "text": "16.8 Step 8: Calling the SPOT Function\n\n16.8.1 Preparing the SPOT Call\n\nfrom spotPython.utils.init import design_control_init, surrogate_control_init\ndesign_control = design_control_init(init_size=INIT_SIZE)\n\nsurrogate_control = surrogate_control_init(noise=True,\n                                            n_theta=2)\n\n\n\n\n\n\n\nNote: Modifying Values in the Control Dictionaries\n\n\n\n\nThe values in the control dictionaries can be modified with the function set_control_key_value [SOURCE], for example:\n\nset_control_key_value(control_dict=surrogate_control,\n                        key=\"noise\",\n                        value=True,\n                        replace=True)                       \nset_control_key_value(control_dict=surrogate_control,\n                        key=\"n_theta\",\n                        value=2,\n                        replace=True)      \n\n\n\n\n\n16.8.2 The Objective Function fun\nThe objective function fun from the class HyperLight [SOURCE] is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hyperlight import HyperLight\nfun = HyperLight(log_level=50).fun\n\n\n\n16.8.3 Showing the fun_control Dictionary\n\nimport pprint\npprint.pprint(fun_control)\n\n{'CHECKPOINT_PATH': 'runs/saved_models/',\n 'DATASET_PATH': 'data/',\n 'RESULTS_PATH': 'results/',\n 'TENSORBOARD_PATH': 'runs/',\n '_L_in': 10,\n '_L_out': 1,\n 'accelerator': 'auto',\n 'core_model': &lt;class 'spotPython.light.regression.netlightregression.NetLightRegression'&gt;,\n 'core_model_hyper_dict': {'act_fn': {'class_name': 'spotPython.torch.activation',\n                                      'core_model_parameter_type': 'instance()',\n                                      'default': 'ReLU',\n                                      'levels': ['Sigmoid',\n                                                 'ReLU',\n                                                 'LeakyReLU',\n                                                 'Swish'],\n                                      'lower': 0,\n                                      'transform': 'None',\n                                      'type': 'factor',\n                                      'upper': 3},\n                           'batch_size': {'default': 4,\n                                          'lower': 4,\n                                          'transform': 'transform_power_2_int',\n                                          'type': 'int',\n                                          'upper': 5},\n                           'dropout_prob': {'default': 0.01,\n                                            'lower': 0.01,\n                                            'transform': 'None',\n                                            'type': 'float',\n                                            'upper': 0.1},\n                           'epochs': {'default': 4,\n                                      'lower': 9,\n                                      'transform': 'transform_power_2_int',\n                                      'type': 'int',\n                                      'upper': 10},\n                           'initialization': {'core_model_parameter_type': 'str',\n                                              'default': 'Default',\n                                              'levels': ['Default',\n                                                         'Kaiming',\n                                                         'Xavier'],\n                                              'lower': 0,\n                                              'transform': 'None',\n                                              'type': 'factor',\n                                              'upper': 2},\n                           'l1': {'default': 3,\n                                  'lower': 4,\n                                  'transform': 'transform_power_2_int',\n                                  'type': 'int',\n                                  'upper': 6},\n                           'lr_mult': {'default': 1.0,\n                                       'lower': 0.5,\n                                       'transform': 'None',\n                                       'type': 'float',\n                                       'upper': 5.0},\n                           'optimizer': {'class_name': 'torch.optim',\n                                         'core_model_parameter_type': 'str',\n                                         'default': 'SGD',\n                                         'levels': ['Adadelta',\n                                                    'Adagrad',\n                                                    'Adam',\n                                                    'AdamW',\n                                                    'Adamax',\n                                                    'NAdam',\n                                                    'RAdam',\n                                                    'RMSprop',\n                                                    'Rprop'],\n                                         'lower': 0,\n                                         'transform': 'None',\n                                         'type': 'factor',\n                                         'upper': 8},\n                           'patience': {'default': 2,\n                                        'lower': 5,\n                                        'transform': 'transform_power_2_int',\n                                        'type': 'int',\n                                        'upper': 7}},\n 'counter': 0,\n 'data': None,\n 'data_dir': './data',\n 'data_module': None,\n 'data_set': &lt;spotPython.data.diabetes.Diabetes object at 0x2b4b00190&gt;,\n 'design': None,\n 'device': 'mps',\n 'devices': 1,\n 'enable_progress_bar': False,\n 'eval': None,\n 'fun_evals': inf,\n 'fun_repeats': 1,\n 'infill_criterion': 'y',\n 'k_folds': 3,\n 'log_level': 10,\n 'loss_function': None,\n 'lower': array([3. , 4. , 1. , 0. , 0. , 0. , 0.1, 2. , 0. ]),\n 'max_time': 1,\n 'metric_params': {},\n 'metric_river': None,\n 'metric_sklearn': None,\n 'metric_torch': None,\n 'model_dict': {},\n 'n_points': 1,\n 'n_samples': None,\n 'noise': False,\n 'num_workers': 0,\n 'ocba_delta': 0,\n 'optimizer': None,\n 'path': None,\n 'prep_model': None,\n 'save_model': False,\n 'seed': 123,\n 'show_batch_interval': 1000000,\n 'show_models': False,\n 'show_progress': True,\n 'shuffle': None,\n 'sigma': 0.0,\n 'spot_tensorboard_path': 'runs/spot_logs/031_p040025_2024-01-09_20-21-51',\n 'spot_writer': &lt;torch.utils.tensorboard.writer.SummaryWriter object at 0x14fb36f50&gt;,\n 'target_column': None,\n 'task': None,\n 'test': None,\n 'test_seed': 1234,\n 'test_size': 0.1,\n 'tolerance_x': 1.4901161193847656e-08,\n 'train': None,\n 'upper': array([ 8.  ,  9.  ,  4.  ,  5.  , 11.  ,  0.25, 10.  ,  6.  ,  2.  ]),\n 'var_name': ['l1',\n              'epochs',\n              'batch_size',\n              'act_fn',\n              'optimizer',\n              'dropout_prob',\n              'lr_mult',\n              'patience',\n              'initialization'],\n 'var_type': ['int',\n              'int',\n              'int',\n              'factor',\n              'factor',\n              'float',\n              'float',\n              'int',\n              'factor'],\n 'verbosity': 0,\n 'weights': 1.0}\n\n\n\n\n16.8.4 Starting the Hyperparameter Tuning\nThe spotPython hyperparameter tuning is started by calling the Spot function [SOURCE].\n\nfrom spotPython.spot import spot\nspot_tuner = spot.Spot(fun=fun,\n                       fun_control=fun_control,\n                       design_control=design_control,\n                       surrogate_control=surrogate_control)\nspot_tuner.run()\n\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 32\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 32\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 3704.84814453125, 'hp_metric': 3704.84814453125}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 32\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 32\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 3881.30419921875, 'hp_metric': 3881.30419921875}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 16\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 2666.55078125, 'hp_metric': 2666.55078125}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 16\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 5838.70849609375, 'hp_metric': 5838.70849609375}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 32\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 32\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 3217.487060546875, 'hp_metric': 3217.487060546875}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 16\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 3510.2412109375, 'hp_metric': 3510.2412109375}\nspotPython tuning: 2666.55078125 [####------] 38.52% \ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 16\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 4158.83154296875, 'hp_metric': 4158.83154296875}\nspotPython tuning: 2666.55078125 [########--] 78.89% \ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 16\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 4188.34912109375, 'hp_metric': 4188.34912109375}\nspotPython tuning: 2666.55078125 [##########] 100.00% Done...\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3704.84814453125      │\n│         val_loss          │     3704.84814453125      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3881.30419921875      │\n│         val_loss          │     3881.30419921875      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │       2666.55078125       │\n│         val_loss          │       2666.55078125       │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     5838.70849609375      │\n│         val_loss          │     5838.70849609375      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3217.487060546875     │\n│         val_loss          │     3217.487060546875     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      3510.2412109375      │\n│         val_loss          │      3510.2412109375      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     4158.83154296875      │\n│         val_loss          │     4158.83154296875      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     4188.34912109375      │\n│         val_loss          │     4188.34912109375      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2b4b23a10&gt;",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#sec-tensorboard-31",
    "href": "031_spot_lightning_linear_diabetes.html#sec-tensorboard-31",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "16.9 Step 9: Tensorboard",
    "text": "16.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard.\ntensorboard --logdir=\"runs/\"\nFurther information can be found in the PyTorch Lightning documentation for Tensorboard.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "031_spot_lightning_linear_diabetes.html#sec-results-31",
    "href": "031_spot_lightning_linear_diabetes.html#sec-results-31",
    "title": "16  HPT PyTorch Lightning: Diabetes",
    "section": "16.10 Step 10: Results",
    "text": "16.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the results can be analyzed.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + PREFIX +\"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name           | type   | default   |   lower |   upper | tuned               | transform             |   importance | stars   |\n|----------------|--------|-----------|---------|---------|---------------------|-----------------------|--------------|---------|\n| l1             | int    | 3         |     4.0 |     6.0 | 5.0                 | transform_power_2_int |         4.54 | *       |\n| epochs         | int    | 4         |     9.0 |    10.0 | 9.0                 | transform_power_2_int |         0.00 |         |\n| batch_size     | int    | 4         |     4.0 |     5.0 | 4.0                 | transform_power_2_int |         0.02 |         |\n| act_fn         | factor | ReLU      |     0.0 |     3.0 | Swish               | None                  |         0.39 | .       |\n| optimizer      | factor | SGD       |     0.0 |     8.0 | RMSprop             | None                  |         0.46 | .       |\n| dropout_prob   | float  | 0.01      |    0.01 |     0.1 | 0.08951095646892425 | None                  |         0.07 |         |\n| lr_mult        | float  | 1.0       |     0.5 |     5.0 | 3.9340958113143683  | None                  |         0.00 |         |\n| patience       | int    | 2         |     5.0 |     7.0 | 7.0                 | transform_power_2_int |       100.00 | ***     |\n| initialization | factor | Default   |     0.0 |     2.0 | Xavier              | None                  |         0.18 | .       |\n\n\n\nspot_tuner.plot_importance(threshold=0.025,\n    filename=\"./figures/\" + PREFIX + \"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n16.10.1 Get the Tuned Architecture\n\nfrom spotPython.hyperparameters.values import get_tuned_architecture\nconfig = get_tuned_architecture(spot_tuner, fun_control)\nprint(config)\n\n{'l1': 32, 'epochs': 512, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'RMSprop', 'dropout_prob': 0.08951095646892425, 'lr_mult': 3.9340958113143683, 'patience': 128, 'initialization': 'Xavier'}\n\n\n\nTest on the full data set\n\n\nfrom spotPython.light.testmodel import test_model\ntest_model(config, fun_control)\n\nLightDataModule: train_dataloader(). Training set size: 71\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\nLightDataModule: test_dataloader(). Training set size: 266\nLightDataModule: test_dataloader(). batch_size: 16\nLightDataModule: test_dataloader(). num_workers: 0\ntest_model result: {'val_loss': 5688.5185546875, 'hp_metric': 5688.5185546875}\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃        Test metric        ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      5688.5185546875      │\n│         val_loss          │      5688.5185546875      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n(5688.5185546875, 5688.5185546875)\n\n\n\nfrom spotPython.light.loadmodel import load_light_from_checkpoint\n\nmodel_loaded = load_light_from_checkpoint(config, fun_control)\n\nconfig: {'l1': 32, 'epochs': 512, 'batch_size': 16, 'act_fn': Swish(), 'optimizer': 'RMSprop', 'dropout_prob': 0.08951095646892425, 'lr_mult': 3.9340958113143683, 'patience': 128, 'initialization': 'Xavier'}\nLoading model with 32_512_16_Swish_RMSprop_0.0895_3.9341_128_Xavier_TEST from runs/saved_models/32_512_16_Swish_RMSprop_0.0895_3.9341_128_Xavier_TEST/last.ckpt\nModel: NetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=10, out_features=32, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.08951095646892425, inplace=False)\n    (3): Linear(in_features=32, out_features=16, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.08951095646892425, inplace=False)\n    (6): Linear(in_features=16, out_features=16, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.08951095646892425, inplace=False)\n    (9): Linear(in_features=16, out_features=8, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.08951095646892425, inplace=False)\n    (12): Linear(in_features=8, out_features=1, bias=True)\n  )\n)\n\n\n\nfilename = \"./figures/\" + PREFIX\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\nl1:  4.540266379877663\nact_fn:  0.3898508891447861\noptimizer:  0.45864634455539977\ndropout_prob:  0.07111682213320393\npatience:  100.0\ninitialization:  0.1790210228848177\n\n\n\n\n\nContour plots.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n16.10.2 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n                                                \nParallel coordinates plots\n\n\n\n\n16.10.3 Cross Validation With Lightning\n\nThe KFold class from sklearn.model_selection is used to generate the folds for cross-validation.\nThese mechanism is used to generate the folds for the final evaluation of the model.\nThe CrossValidationDataModule class [SOURCE] is used to generate the folds for the hyperparameter tuning process.\nIt is called from the cv_model function [SOURCE].\n\n\nfrom spotPython.light.cvmodel import cv_model\nset_control_key_value(control_dict=fun_control,\n                        key=\"k_folds\",\n                        value=2,\n                        replace=True)\nset_control_key_value(control_dict=fun_control,\n                        key=\"test_size\",\n                        value=0.6,\n                        replace=True)\ncv_model(config, fun_control)\n\nk: 0\nTrain Dataset Size: 221\nVal Dataset Size: 221\ntrain_model result: {'val_loss': 4612.650390625, 'hp_metric': 4612.650390625}\nk: 1\nTrain Dataset Size: 221\nVal Dataset Size: 221\ntrain_model result: {'val_loss': 3470.23681640625, 'hp_metric': 3470.23681640625}\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      4612.650390625       │\n│         val_loss          │      4612.650390625       │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3470.23681640625      │\n│         val_loss          │     3470.23681640625      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n4041.443603515625\n\n\n\n\n16.10.4 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)\n\n\n\n16.10.5 Visualizing the Activation Distribution (Under Development)\n\n\n\n\n\n\nReference:\n\n\n\n\nThe following code is based on [PyTorch Lightning TUTORIAL 2: ACTIVATION FUNCTIONS], Author: Phillip Lippe, License: [CC BY-SA], Generated: 2023-03-15T09:52:39.179933.\n\n\n\nAfter we have trained the models, we can look at the actual activation values that find inside the model. For instance, how many neurons are set to zero in ReLU? Where do we find most values in Tanh? To answer these questions, we can write a simple function which takes a trained model, applies it to a batch of images, and plots the histogram of the activations inside the network:\n\nfrom spotPython.torch.activation import Sigmoid, Tanh, ReLU, LeakyReLU, ELU, Swish\nact_fn_by_name = {\"sigmoid\": Sigmoid, \"tanh\": Tanh, \"relu\": ReLU, \"leakyrelu\": LeakyReLU, \"elu\": ELU, \"swish\": Swish}\n\n\nfrom spotPython.hyperparameters.values import get_one_config_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nconfig = get_one_config_from_X(X, fun_control)\nmodel = fun_control[\"core_model\"](**config, _L_in=64, _L_out=11)\nmodel\n\nNetLightRegression(\n  (layers): Sequential(\n    (0): Linear(in_features=64, out_features=32, bias=True)\n    (1): Swish()\n    (2): Dropout(p=0.08951095646892425, inplace=False)\n    (3): Linear(in_features=32, out_features=16, bias=True)\n    (4): Swish()\n    (5): Dropout(p=0.08951095646892425, inplace=False)\n    (6): Linear(in_features=16, out_features=16, bias=True)\n    (7): Swish()\n    (8): Dropout(p=0.08951095646892425, inplace=False)\n    (9): Linear(in_features=16, out_features=8, bias=True)\n    (10): Swish()\n    (11): Dropout(p=0.08951095646892425, inplace=False)\n    (12): Linear(in_features=8, out_features=11, bias=True)\n  )\n)\n\n\n\n# from spotPython.utils.eda import visualize_activations\n# visualize_activations(model, color=f\"C{0}\")",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html",
    "href": "032_spot_lightning_rnn_diabetes.html",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "",
    "text": "17.1 Step 1: Setup\nfrom spotPython.utils.device import getDevice\nfrom math import inf\nMAX_TIME = 1\nFUN_EVALS = inf\nINIT_SIZE = 5\nWORKERS = 0\nPREFIX=\"032\"\nDEVICE = getDevice()",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#sec-setup-32",
    "href": "032_spot_lightning_rnn_diabetes.html#sec-setup-32",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "",
    "text": "Before we consider the detailed experimental setup, we select the parameters that affect run time, initial design size, etc.\nThe parameter MAX_TIME specifies the maximum run time in seconds.\nThe parameter INIT_SIZE specifies the initial design size.\nThe parameter WORKERS specifies the number of workers.\nThe prefix PREFIX is used for the experiment name and the name of the log file.\nThe parameter DEVICE specifies the device to use for training.\n\n\n\n\n\n\n\n\nCaution: Run time and initial design size should be increased for real experiments\n\n\n\n\nMAX_TIME is set to one minute for demonstration purposes. For real experiments, this should be increased to at least 1 hour.\nFUN_EVALS is set to infinity.\nINIT_SIZE is set to 5 for demonstration purposes. For real experiments, this should be increased to at least 10.\nWORKERS is set to 0 for demonstration purposes. For real experiments, this should be increased. See the warnings that are printed when the number of workers is set to 0.\nPREFIX is set to “032”. This is used for the experiment name and the name of the log file.\nDEVICE is set to the device that is returned by getDevice(), e.g., gpu.\n\n\n\n\n\n\n\n\n\nNote: Device selection\n\n\n\n\nAlthough there are no .cuda() or .to(device) calls required, because Lightning does these for you, see LIGHTNINGMODULE, we would like to know which device is used. Threrefore, we imitate the LightningModule behaviour which selects the highest device.\nThe method spotPython.utils.device.getDevice() returns the device that is used by Lightning.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#step-2-initialization-of-the-fun_control-dictionary",
    "href": "032_spot_lightning_rnn_diabetes.html#step-2-initialization-of-the-fun_control-dictionary",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "17.2 Step 2: Initialization of the fun_control Dictionary",
    "text": "17.2 Step 2: Initialization of the fun_control Dictionary\nspotPython uses a Python dictionary for storing the information required for the hyperparameter tuning process.\n\nfrom spotPython.utils.init import fun_control_init\nimport numpy as np\n\nfun_control = fun_control_init(\n    _L_in=10,\n    _L_out=1,\n    PREFIX=PREFIX,\n    TENSORBOARD_CLEAN=True,\n    device=DEVICE,\n    enable_progress_bar=False,\n    fun_evals=FUN_EVALS,\n    log_level=10,\n    max_time=MAX_TIME,\n    num_workers=WORKERS,\n    show_progress=True,\n    test_size=0.1,\n    tolerance_x=np.sqrt(np.spacing(1)),\n    verbosity=1\n    )\n\nMoving TENSORBOARD_PATH: runs/ to TENSORBOARD_PATH_OLD: runs_OLD/runs_2024_01_09_20_30_49\nCreated spot_tensorboard_path: runs/spot_logs/032_p040025_2024-01-09_20-30-49 for SummaryWriter()",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#step-3-loading-the-diabetes-data-set",
    "href": "032_spot_lightning_rnn_diabetes.html#step-3-loading-the-diabetes-data-set",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "17.3 Step 3: Loading the Diabetes Data Set",
    "text": "17.3 Step 3: Loading the Diabetes Data Set\n\nfrom spotPython.hyperparameters.values import set_control_key_value\nfrom spotPython.data.diabetes import Diabetes\ndataset = Diabetes()\nset_control_key_value(control_dict=fun_control,\n                        key=\"data_set\",\n                        value=dataset,\n                        replace=True)\nprint(len(dataset))\n\n442\n\n\n\n\n\n\n\n\nNote: Data Set and Data Loader\n\n\n\n\nAs shown below, a DataLoader from torch.utils.data can be used to check the data.\n\n\n# Set batch size for DataLoader\nbatch_size = 5\n# Create DataLoader\nfrom torch.utils.data import DataLoader\ndataloader = DataLoader(dataset, batch_size=batch_size, shuffle=False)\n\n# Iterate over the data in the DataLoader\nfor batch in dataloader:\n    inputs, targets = batch\n    print(f\"Batch Size: {inputs.size(0)}\")\n    print(f\"Inputs Shape: {inputs.shape}\")\n    print(f\"Targets Shape: {targets.shape}\")\n    print(\"---------------\")\n    print(f\"Inputs: {inputs}\")\n    print(f\"Targets: {targets}\")\n    break\n\nBatch Size: 5\nInputs Shape: torch.Size([5, 10])\nTargets Shape: torch.Size([5])\n---------------\nInputs: tensor([[ 0.0381,  0.0507,  0.0617,  0.0219, -0.0442, -0.0348, -0.0434, -0.0026,\n          0.0199, -0.0176],\n        [-0.0019, -0.0446, -0.0515, -0.0263, -0.0084, -0.0192,  0.0744, -0.0395,\n         -0.0683, -0.0922],\n        [ 0.0853,  0.0507,  0.0445, -0.0057, -0.0456, -0.0342, -0.0324, -0.0026,\n          0.0029, -0.0259],\n        [-0.0891, -0.0446, -0.0116, -0.0367,  0.0122,  0.0250, -0.0360,  0.0343,\n          0.0227, -0.0094],\n        [ 0.0054, -0.0446, -0.0364,  0.0219,  0.0039,  0.0156,  0.0081, -0.0026,\n         -0.0320, -0.0466]])\nTargets: tensor([151.,  75., 141., 206., 135.])",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#sec-preprocessing-32",
    "href": "032_spot_lightning_rnn_diabetes.html#sec-preprocessing-32",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "17.4 Step 4: Preprocessing",
    "text": "17.4 Step 4: Preprocessing\nPreprocessing is handled by Lightning and PyTorch. It is described in the LIGHTNINGDATAMODULE documentation. Here you can find information about the transforms methods.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#sec-selection-of-the-algorithm-32",
    "href": "032_spot_lightning_rnn_diabetes.html#sec-selection-of-the-algorithm-32",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "17.5 Step 5: Select the Core Model (algorithm) and core_model_hyper_dict",
    "text": "17.5 Step 5: Select the Core Model (algorithm) and core_model_hyper_dict\nspotPython includes the NetLightRegression class [SOURCE] for configurable neural networks. The class is imported here. It inherits from the class Lightning.LightningModule, which is the base class for all models in Lightning. Lightning.LightningModule is a subclass of torch.nn.Module and provides additional functionality for the training and testing of neural networks. The class Lightning.LightningModule is described in the Lightning documentation.\n\nHere we simply add the NN Model to the fun_control dictionary by calling the function add_core_model_to_fun_control:\n\n\nfrom spotPython.light.regression.rnnlightregression import RNNLightRegression\nfrom spotPython.hyperdict.light_hyper_dict import LightHyperDict\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nadd_core_model_to_fun_control(fun_control=fun_control,\n                              core_model=RNNLightRegression,\n                              hyper_dict=LightHyperDict)\n\nThe hyperparameters of the model are specified in the core_model_hyper_dict dictionary [SOURCE].\n\n\n\n\n\n\nNote: User specified models and hyperparameter dictionaries\n\n\n\n\nThe user can specify a model and a hyperparameter dictionary in a subfolder, e.g., userRNN in the current working directory.\nThe model and the hyperparameter dictionary are imported with the following code:\n\nfrom spotPython.hyperparameters.values import add_core_model_to_fun_control\nimport sys\nsys.path.insert(0, './userRNN')\nimport userrnn\nimport user_hyper_dict\nadd_core_model_to_fun_control(fun_control=fun_control,\n                              core_model=userrnn.RNNLightRegression,\n                              hyper_dict=user_hyper_dict.UserHyperDict)\n\nExample files can be found in the userRNN folder.\nThese files can be modified by the user.\nThey can be used without re-compilation of the spotPython source code, if they are located in a subfolder of the current working directory.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#sec-modification-of-hyperparameters-32",
    "href": "032_spot_lightning_rnn_diabetes.html#sec-modification-of-hyperparameters-32",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "17.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model",
    "text": "17.6 Step 6: Modify hyper_dict Hyperparameters for the Selected Algorithm aka core_model\nspotPython provides functions for modifying the hyperparameters, their bounds and factors as well as for activating and de-activating hyperparameters without re-compilation of the Python source code.\n\n\n\n\n\n\nCaution: Small number of epochs for demonstration purposes\n\n\n\n\nepochs and patience are set to small values for demonstration purposes. These values are too small for a real application.\nMore resonable values are, e.g.:\n\nset_control_hyperparameter_value(fun_control, \"epochs\", [7, 9]) and\nset_control_hyperparameter_value(fun_control, \"patience\", [2, 7])\n\n\n\n\n\nfrom spotPython.hyperparameters.values import set_control_hyperparameter_value\n\nset_control_hyperparameter_value(fun_control, \"l1\", [3, 8])\nset_control_hyperparameter_value(fun_control, \"epochs\", [7, 9])\nset_control_hyperparameter_value(fun_control, \"batch_size\", [2, 6])\nset_control_hyperparameter_value(fun_control, \"optimizer\", [\n                \"Adadelta\",\n                \"Adagrad\",\n                \"Adam\",\n                \"Adamax\"])\nset_control_hyperparameter_value(fun_control, \"dropout_prob\", [0.01, 0.25])\nset_control_hyperparameter_value(fun_control, \"lr_mult\", [0.5, 5.0])\nset_control_hyperparameter_value(fun_control, \"patience\", [3, 9])\nset_control_hyperparameter_value(fun_control, \"act_fn\",[\"ReLU\"] )\nset_control_hyperparameter_value(fun_control, \"initialization\",[\"Default\"] )\n\nNow, the dictionary fun_control contains all information needed for the hyperparameter tuning. Before the hyperparameter tuning is started, it is recommended to take a look at the experimental design. The method gen_design_table [SOURCE] generates a design table as follows:\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control))\n\n| name           | type   | default   |   lower |   upper | transform             |\n|----------------|--------|-----------|---------|---------|-----------------------|\n| l1             | int    | 3         |    3    |    8    | transform_power_2_int |\n| epochs         | int    | 4         |    7    |    9    | transform_power_2_int |\n| batch_size     | int    | 4         |    2    |    6    | transform_power_2_int |\n| act_fn         | factor | ReLU      |    0    |    0    | None                  |\n| optimizer      | factor | SGD       |    0    |    3    | None                  |\n| dropout_prob   | float  | 0.01      |    0.01 |    0.25 | None                  |\n| lr_mult        | float  | 1.0       |    0.5  |    5    | None                  |\n| patience       | int    | 2         |    3    |    9    | transform_power_2_int |\n| initialization | factor | Default   |    0    |    0    | None                  |\n\n\nThis allows to check if all information is available and if the information is correct.\n\n\n\n\n\n\nNote: Hyperparameters of the Tuned Model and the fun_control Dictionary\n\n\n\nThe updated fun_control dictionary can be shown with the command fun_control[\"core_model_hyper_dict\"].",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#step-7-data-splitting-the-objective-loss-function-and-the-metric",
    "href": "032_spot_lightning_rnn_diabetes.html#step-7-data-splitting-the-objective-loss-function-and-the-metric",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "17.7 Step 7: Data Splitting, the Objective (Loss) Function and the Metric",
    "text": "17.7 Step 7: Data Splitting, the Objective (Loss) Function and the Metric\n\n17.7.1 Evaluation\nThe evaluation procedure requires the specification of two elements:\n\nthe way how the data is split into a train and a test set\nthe loss function (and a metric).\n\n\n\n\n\n\n\nCaution: Data Splitting in Lightning\n\n\n\nThe data splitting is handled by Lightning.\n\n\n\n\n17.7.2 Loss Function\nThe loss function is specified in the configurable network class [SOURCE] We will use MSE.\n\n\n17.7.3 Metric\n\nSimilar to the loss function, the metric is specified in the configurable network class [SOURCE].\n\n\n\n\n\n\n\nCaution: Loss Function and Metric in Lightning\n\n\n\n\nThe loss function and the metric are not hyperparameters that can be tuned with spotPython.\nThey are handled by Lightning.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#step-8-calling-the-spot-function",
    "href": "032_spot_lightning_rnn_diabetes.html#step-8-calling-the-spot-function",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "17.8 Step 8: Calling the SPOT Function",
    "text": "17.8 Step 8: Calling the SPOT Function\n\n17.8.1 Preparing the SPOT Call\n\nfrom spotPython.utils.init import design_control_init, surrogate_control_init\ndesign_control = design_control_init()\nset_control_key_value(control_dict=design_control,\n                        key=\"init_size\",\n                        value=INIT_SIZE,\n                        replace=True)\n\nsurrogate_control = surrogate_control_init()\nset_control_key_value(control_dict=surrogate_control,\n                        key=\"noise\",\n                        value=True,\n                        replace=True)                       \nset_control_key_value(control_dict=surrogate_control,\n                        key=\"n_theta\",\n                        value=2,\n                        replace=True)      \n\n\n\n17.8.2 The Objective Function fun\nThe objective function fun from the class HyperLight [SOURCE] is selected next. It implements an interface from PyTorch’s training, validation, and testing methods to spotPython.\n\nfrom spotPython.fun.hyperlight import HyperLight\nfun = HyperLight(log_level=10).fun\n\n\n\n17.8.3 Showing the fun_control Dictionary\n\nimport pprint\npprint.pprint(fun_control)\n\n{'CHECKPOINT_PATH': 'runs/saved_models/',\n 'DATASET_PATH': 'data/',\n 'RESULTS_PATH': 'results/',\n 'TENSORBOARD_PATH': 'runs/',\n '_L_in': 10,\n '_L_out': 1,\n 'accelerator': 'auto',\n 'core_model': &lt;class 'spotPython.light.regression.rnnlightregression.RNNLightRegression'&gt;,\n 'core_model_hyper_dict': {'act_fn': {'class_name': 'spotPython.torch.activation',\n                                      'core_model_parameter_type': 'instance()',\n                                      'default': 'ReLU',\n                                      'levels': ['ReLU'],\n                                      'lower': 0,\n                                      'transform': 'None',\n                                      'type': 'factor',\n                                      'upper': 0},\n                           'batch_size': {'default': 4,\n                                          'lower': 2,\n                                          'transform': 'transform_power_2_int',\n                                          'type': 'int',\n                                          'upper': 6},\n                           'dropout_prob': {'default': 0.01,\n                                            'lower': 0.01,\n                                            'transform': 'None',\n                                            'type': 'float',\n                                            'upper': 0.25},\n                           'epochs': {'default': 4,\n                                      'lower': 7,\n                                      'transform': 'transform_power_2_int',\n                                      'type': 'int',\n                                      'upper': 9},\n                           'initialization': {'core_model_parameter_type': 'str',\n                                              'default': 'Default',\n                                              'levels': ['Default'],\n                                              'lower': 0,\n                                              'transform': 'None',\n                                              'type': 'factor',\n                                              'upper': 0},\n                           'l1': {'default': 3,\n                                  'lower': 3,\n                                  'transform': 'transform_power_2_int',\n                                  'type': 'int',\n                                  'upper': 8},\n                           'lr_mult': {'default': 1.0,\n                                       'lower': 0.5,\n                                       'transform': 'None',\n                                       'type': 'float',\n                                       'upper': 5.0},\n                           'optimizer': {'class_name': 'torch.optim',\n                                         'core_model_parameter_type': 'str',\n                                         'default': 'SGD',\n                                         'levels': ['Adadelta',\n                                                    'Adagrad',\n                                                    'Adam',\n                                                    'Adamax'],\n                                         'lower': 0,\n                                         'transform': 'None',\n                                         'type': 'factor',\n                                         'upper': 3},\n                           'patience': {'default': 2,\n                                        'lower': 3,\n                                        'transform': 'transform_power_2_int',\n                                        'type': 'int',\n                                        'upper': 9}},\n 'counter': 0,\n 'data': None,\n 'data_dir': './data',\n 'data_module': None,\n 'data_set': &lt;spotPython.data.diabetes.Diabetes object at 0x2c4a13e90&gt;,\n 'design': None,\n 'device': 'mps',\n 'devices': 1,\n 'enable_progress_bar': False,\n 'eval': None,\n 'fun_evals': inf,\n 'fun_repeats': 1,\n 'infill_criterion': 'y',\n 'k_folds': 3,\n 'log_level': 10,\n 'loss_function': None,\n 'lower': array([3. , 4. , 1. , 0. , 0. , 0. , 0.1, 2. , 0. ]),\n 'max_time': 1,\n 'metric_params': {},\n 'metric_river': None,\n 'metric_sklearn': None,\n 'metric_torch': None,\n 'model_dict': {},\n 'n_points': 1,\n 'n_samples': None,\n 'noise': False,\n 'num_workers': 0,\n 'ocba_delta': 0,\n 'optimizer': None,\n 'path': None,\n 'prep_model': None,\n 'save_model': False,\n 'seed': 123,\n 'show_batch_interval': 1000000,\n 'show_models': False,\n 'show_progress': True,\n 'shuffle': None,\n 'sigma': 0.0,\n 'spot_tensorboard_path': 'runs/spot_logs/032_p040025_2024-01-09_20-30-49',\n 'spot_writer': &lt;torch.utils.tensorboard.writer.SummaryWriter object at 0x2ca3d9590&gt;,\n 'target_column': None,\n 'task': None,\n 'test': None,\n 'test_seed': 1234,\n 'test_size': 0.1,\n 'tolerance_x': 1.4901161193847656e-08,\n 'train': None,\n 'upper': array([ 8.  ,  9.  ,  4.  ,  1.  , 11.  ,  0.25, 10.  ,  6.  ,  2.  ]),\n 'var_name': ['l1',\n              'epochs',\n              'batch_size',\n              'act_fn',\n              'optimizer',\n              'dropout_prob',\n              'lr_mult',\n              'patience',\n              'initialization'],\n 'var_type': ['int',\n              'int',\n              'int',\n              'factor',\n              'factor',\n              'float',\n              'float',\n              'int',\n              'factor'],\n 'verbosity': 1,\n 'weights': 1.0}\n\n\n\npprint.pprint(design_control)\n\n{'init_size': 5, 'repeats': 1}\n\n\n\npprint.pprint(surrogate_control)\n\n{'max_theta': 3,\n 'min_theta': -3,\n 'model_fun_evals': 10000,\n 'model_optimizer': &lt;function differential_evolution at 0x17132ff60&gt;,\n 'n_p': 1,\n 'n_theta': 2,\n 'noise': True,\n 'optim_p': False,\n 'seed': 124,\n 'theta_init_zero': True,\n 'var_type': None}\n\n\n\n\n17.8.4 Starting the Hyperparameter Tuning\nThe spotPython hyperparameter tuning is started by calling the Spot function [SOURCE].\n\nfrom spotPython.spot import spot\nspot_tuner = spot.Spot(fun=fun,\n                       fun_control=fun_control,\n                       design_control=design_control,\n                       surrogate_control=surrogate_control)\nspot_tuner.run()\n\n\nIn fun(): config:\n{'act_fn': ReLU(),\n 'batch_size': 64,\n 'dropout_prob': 0.19355651674791854,\n 'epochs': 256,\n 'initialization': 'Default',\n 'l1': 16,\n 'lr_mult': 1.5691149440098038,\n 'optimizer': 'Adam',\n 'patience': 32}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 64\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 64\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 5832.97998046875, 'hp_metric': 5832.97998046875}\n\nIn fun(): config:\n{'act_fn': ReLU(),\n 'batch_size': 16,\n 'dropout_prob': 0.09424169914869776,\n 'epochs': 256,\n 'initialization': 'Default',\n 'l1': 128,\n 'lr_mult': 3.35818256351233,\n 'optimizer': 'Adadelta',\n 'patience': 512}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 16\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 3652.889404296875, 'hp_metric': 3652.889404296875}\n\nIn fun(): config:\n{'act_fn': ReLU(),\n 'batch_size': 4,\n 'dropout_prob': 0.21164199382623602,\n 'epochs': 512,\n 'initialization': 'Default',\n 'l1': 128,\n 'lr_mult': 0.9336514668325573,\n 'optimizer': 'Adamax',\n 'patience': 16}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 4\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 4\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 2414.205078125, 'hp_metric': 2414.205078125}\n\nIn fun(): config:\n{'act_fn': ReLU(),\n 'batch_size': 8,\n 'dropout_prob': 0.05728504399550885,\n 'epochs': 128,\n 'initialization': 'Default',\n 'l1': 64,\n 'lr_mult': 4.575980093998586,\n 'optimizer': 'Adam',\n 'patience': 32}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 8\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 8\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 5862.02099609375, 'hp_metric': 5862.02099609375}\n\nIn fun(): config:\n{'act_fn': ReLU(),\n 'batch_size': 16,\n 'dropout_prob': 0.14352914208400058,\n 'epochs': 256,\n 'initialization': 'Default',\n 'l1': 8,\n 'lr_mult': 2.4204853123355816,\n 'optimizer': 'Adagrad',\n 'patience': 128}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 16\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 16\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 3681.71923828125, 'hp_metric': 3681.71923828125}\n\nIn fun(): config:\n{'act_fn': ReLU(),\n 'batch_size': 4,\n 'dropout_prob': 0.21164827556769356,\n 'epochs': 512,\n 'initialization': 'Default',\n 'l1': 128,\n 'lr_mult': 0.9336469468487545,\n 'optimizer': 'Adamax',\n 'patience': 16}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 4\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 4\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 3021.425048828125, 'hp_metric': 3021.425048828125}\nspotPython tuning: 2414.205078125 [########--] 79.57% \n\nIn fun(): config:\n{'act_fn': ReLU(),\n 'batch_size': 4,\n 'dropout_prob': 0.21160083967554538,\n 'epochs': 512,\n 'initialization': 'Default',\n 'l1': 128,\n 'lr_mult': 0.9336847184495153,\n 'optimizer': 'Adamax',\n 'patience': 16}\ntrain_model(): Test set size: 45\ntrain_model(): Train set size: 359\ntrain_model(): Batch size: 4\nLightDataModule: train_dataloader(). Training set size: 359\nLightDataModule: train_dataloader(). batch_size: 4\nLightDataModule: train_dataloader(). num_workers: 0\ntrain_model result: {'val_loss': 3326.468505859375, 'hp_metric': 3326.468505859375}\nspotPython tuning: 2414.205078125 [##########] 100.00% Done...\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     5832.97998046875      │\n│         val_loss          │     5832.97998046875      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3652.889404296875     │\n│         val_loss          │     3652.889404296875     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │      2414.205078125       │\n│         val_loss          │      2414.205078125       │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     5862.02099609375      │\n│         val_loss          │     5862.02099609375      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3681.71923828125      │\n│         val_loss          │     3681.71923828125      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3021.425048828125     │\n│         val_loss          │     3021.425048828125     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3326.468505859375     │\n│         val_loss          │     3326.468505859375     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2d1580d50&gt;",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#sec-tensorboard-32",
    "href": "032_spot_lightning_rnn_diabetes.html#sec-tensorboard-32",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "17.9 Step 9: Tensorboard",
    "text": "17.9 Step 9: Tensorboard\nThe textual output shown in the console (or code cell) can be visualized with Tensorboard.\ntensorboard --logdir=\"runs/\"\nFurther information can be found in the PyTorch Lightning documentation for Tensorboard.",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "032_spot_lightning_rnn_diabetes.html#sec-results-32",
    "href": "032_spot_lightning_rnn_diabetes.html#sec-results-32",
    "title": "17  HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network",
    "section": "17.10 Step 10: Results",
    "text": "17.10 Step 10: Results\nAfter the hyperparameter tuning run is finished, the results can be analyzed.\n\nspot_tuner.plot_progress(log_y=False,\n    filename=\"./figures/\" + PREFIX + \"_progress.png\")\n\n\n\n\nProgress plot. Black dots denote results from the initial design. Red dots illustrate the improvement found by the surrogate model based optimization.\n\n\n\n\n\nfrom spotPython.utils.eda import gen_design_table\nprint(gen_design_table(fun_control=fun_control, spot=spot_tuner))\n\n| name           | type   | default   |   lower |   upper | tuned               | transform             |   importance | stars   |\n|----------------|--------|-----------|---------|---------|---------------------|-----------------------|--------------|---------|\n| l1             | int    | 3         |     3.0 |     8.0 | 7.0                 | transform_power_2_int |         0.00 |         |\n| epochs         | int    | 4         |     7.0 |     9.0 | 9.0                 | transform_power_2_int |         0.00 |         |\n| batch_size     | int    | 4         |     2.0 |     6.0 | 2.0                 | transform_power_2_int |         0.00 |         |\n| act_fn         | factor | ReLU      |     0.0 |     0.0 | ReLU                | None                  |         0.00 |         |\n| optimizer      | factor | SGD       |     0.0 |     3.0 | Adamax              | None                  |       100.00 | ***     |\n| dropout_prob   | float  | 0.01      |    0.01 |    0.25 | 0.21164199382623602 | None                  |         0.00 |         |\n| lr_mult        | float  | 1.0       |     0.5 |     5.0 | 0.9336514668325573  | None                  |         0.00 |         |\n| patience       | int    | 2         |     3.0 |     9.0 | 4.0                 | transform_power_2_int |        31.65 | *       |\n| initialization | factor | Default   |     0.0 |     0.0 | Default             | None                  |         0.00 |         |\n\n\n\nspot_tuner.plot_importance(threshold=0.025,\n    filename=\"./figures/\" + PREFIX + \"_importance.png\")\n\n\n\n\nVariable importance plot, threshold 0.025.\n\n\n\n\n\n17.10.1 Get the Tuned Architecture\n\nfrom spotPython.hyperparameters.values import get_tuned_architecture\nconfig = get_tuned_architecture(spot_tuner, fun_control)\nprint(config)\n\n{'l1': 128, 'epochs': 512, 'batch_size': 4, 'act_fn': ReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.21164199382623602, 'lr_mult': 0.9336514668325573, 'patience': 16, 'initialization': 'Default'}\n\n\n\nTest on the full data set\n\n\nfrom spotPython.light.testmodel import test_model\ntest_model(config, fun_control)\n\nLightDataModule: train_dataloader(). Training set size: 71\nLightDataModule: train_dataloader(). batch_size: 4\nLightDataModule: train_dataloader(). num_workers: 0\nLightDataModule: test_dataloader(). Training set size: 266\nLightDataModule: test_dataloader(). batch_size: 4\nLightDataModule: test_dataloader(). num_workers: 0\ntest_model result: {'val_loss': 3671.13623046875, 'hp_metric': 3671.13623046875}\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃        Test metric        ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3671.13623046875      │\n│         val_loss          │     3671.13623046875      │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n(3671.13623046875, 3671.13623046875)\n\n\n\nfrom spotPython.light.loadmodel import load_light_from_checkpoint\n\nmodel_loaded = load_light_from_checkpoint(config, fun_control)\n\nconfig: {'l1': 128, 'epochs': 512, 'batch_size': 4, 'act_fn': ReLU(), 'optimizer': 'Adamax', 'dropout_prob': 0.21164199382623602, 'lr_mult': 0.9336514668325573, 'patience': 16, 'initialization': 'Default'}\nLoading model with 128_512_4_ReLU_Adamax_0.2116_0.9337_16_Default_TEST from runs/saved_models/128_512_4_ReLU_Adamax_0.2116_0.9337_16_Default_TEST/last.ckpt\nModel: RNNLightRegression(\n  (rnn_layer): RNN(10, 128, batch_first=True)\n  (fc): Linear(in_features=128, out_features=128, bias=True)\n  (output_layer): Linear(in_features=128, out_features=1, bias=True)\n  (dropout1): Dropout(p=0.21164199382623602, inplace=False)\n  (dropout2): Dropout(p=0.0, inplace=False)\n  (dropout3): Dropout(p=0.0, inplace=False)\n  (activation_fct): ReLU()\n)\n\n\n\nfilename = \"./figures/\" + PREFIX\nspot_tuner.plot_important_hyperparameter_contour(filename=filename)\n\noptimizer:  100.0\npatience:  31.653018801863347\n\n\n\n\n\nContour plots.\n\n\n\n\n\n\n17.10.2 Parallel Coordinates Plot\n\nspot_tuner.parallel_plot()\n\n                                                \nParallel coordinates plots\n\n\n\n\n17.10.3 Cross Validation With Lightning\n\nThe KFold class from sklearn.model_selection is used to generate the folds for cross-validation.\nThese mechanism is used to generate the folds for the final evaluation of the model.\nThe CrossValidationDataModule class [SOURCE] is used to generate the folds for the hyperparameter tuning process.\nIt is called from the cv_model function [SOURCE].\n\n\nfrom spotPython.light.cvmodel import cv_model\nset_control_key_value(control_dict=fun_control,\n                        key=\"k_folds\",\n                        value=2,\n                        replace=True)\nset_control_key_value(control_dict=fun_control,\n                        key=\"test_size\",\n                        value=0.1,\n                        replace=True)\ncv_model(config, fun_control)\n\nk: 0\nTrain Dataset Size: 221\nVal Dataset Size: 221\ntrain_model result: {'val_loss': 3144.087158203125, 'hp_metric': 3144.087158203125}\nk: 1\nTrain Dataset Size: 221\nVal Dataset Size: 221\ntrain_model result: {'val_loss': 3290.426513671875, 'hp_metric': 3290.426513671875}\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3144.087158203125     │\n│         val_loss          │     3144.087158203125     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃      Validate metric      ┃       DataLoader 0        ┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│         hp_metric         │     3290.426513671875     │\n│         val_loss          │     3290.426513671875     │\n└───────────────────────────┴───────────────────────────┘\n\n\n\n3217.2568359375\n\n\n\n\n17.10.4 Plot all Combinations of Hyperparameters\n\nWarning: this may take a while.\n\n\nPLOT_ALL = False\nif PLOT_ALL:\n    n = spot_tuner.k\n    for i in range(n-1):\n        for j in range(i+1, n):\n            spot_tuner.plot_contour(i=i, j=j, min_z=min_z, max_z = max_z)\n\n\n\n17.10.5 Visualizing the Activation Distribution (Under Development)\n\n\n\n\n\n\nReference:\n\n\n\n\nThe following code is based on [PyTorch Lightning TUTORIAL 2: ACTIVATION FUNCTIONS], Author: Phillip Lippe, License: [CC BY-SA], Generated: 2023-03-15T09:52:39.179933.\n\n\n\nAfter we have trained the models, we can look at the actual activation values that find inside the model. For instance, how many neurons are set to zero in ReLU? Where do we find most values in Tanh? To answer these questions, we can write a simple function which takes a trained model, applies it to a batch of images, and plots the histogram of the activations inside the network:\n\nfrom spotPython.torch.activation import Sigmoid, Tanh, ReLU, LeakyReLU, ELU, Swish\nact_fn_by_name = {\"sigmoid\": Sigmoid, \"tanh\": Tanh, \"relu\": ReLU, \"leakyrelu\": LeakyReLU, \"elu\": ELU, \"swish\": Swish}\n\n\nfrom spotPython.hyperparameters.values import get_one_config_from_X\nX = spot_tuner.to_all_dim(spot_tuner.min_X.reshape(1,-1))\nconfig = get_one_config_from_X(X, fun_control)\nmodel = fun_control[\"core_model\"](**config, _L_in=64, _L_out=11)\nmodel\n\nRNNLightRegression(\n  (rnn_layer): RNN(64, 128, batch_first=True)\n  (fc): Linear(in_features=128, out_features=128, bias=True)\n  (output_layer): Linear(in_features=128, out_features=11, bias=True)\n  (dropout1): Dropout(p=0.21164199382623602, inplace=False)\n  (dropout2): Dropout(p=0.0, inplace=False)\n  (dropout3): Dropout(p=0.0, inplace=False)\n  (activation_fct): ReLU()\n)\n\n\n\n# from spotPython.utils.eda import visualize_activations\n# visualize_activations(model, color=f\"C{0}\")",
    "crumbs": [
      "Hyperparameter Tuning with PyTorch Lightning",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>HPT PyTorch Lightning: Diabetes Using a Recurrent Neural Network</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html",
    "href": "a_01_intro_to_notebooks.html",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "",
    "text": "A.1 Different Notebook cells\nThere are different cells that the notebook is currently supporting:\nAs a default, every cells in jupyter is set to “code”",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#different-notebook-cells",
    "href": "a_01_intro_to_notebooks.html#different-notebook-cells",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "",
    "text": "code cells\nmarkdown cells\nraw cells\n\n\n\nA.1.1 Code cells\nThe code cells are used to execute the code. They are following the logic of the choosen kernel. Therefore, it is important to keep in mind which programming language is currently used. Otherwise one might yield an error because of the wrong syntax.\nThe code cells are executed my be ▶ Run button (can be found in the header of the notebook).\n\n\nA.1.2 Markdown cells\nThe markdown cells are a usefull tool to comment the written code. Especially with the help of headers can the code be brought in a more readable format. If you are not familiar with the markdown syntax, you can find a usefull cheat sheet here: Markdown Cheat Sheeet\n\n\nA.1.3 Raw cells\nThe “Raw NBConvert” cell type can be used to render different code formats into HTML or LaTeX by Sphinx. This information is stored in the notebook metadata and converted appropriately.\n\nA.1.3.1 Usage\nTo select a desired format from within Jupyter, select the cell containing your special code and choose options from the following dropdown menus:\n\nSelect “Raw NBConvert”\nSwitch the Cell Toolbar to “Raw Cell Format” (The cell toolbar can be found under View)\nChose the appropriate “Raw NBConvert Format” within the cell\n\nData Science is fun",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#install-packages",
    "href": "a_01_intro_to_notebooks.html#install-packages",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "A.2 Install Packages",
    "text": "A.2 Install Packages\nBecause python is a heavily used programming language, there are many different packags that can make your life easier. Sadly, there are only a few standard packages that are already included in your python enviroment. If you have the need to install a new package in your enviroment, you can simply do that by exectuing the following code snippet in a code cell\n!pip install numpy\n\nThe ! is used to run the cell as a shell command\npip is package manager for python packages.\nnumpy is the the package you want to install\n\nHint: It is often usefull to restart the kernel after installing a package, otherwise loading the package could lead to an error.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#load-packages",
    "href": "a_01_intro_to_notebooks.html#load-packages",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "A.3 Load Packages",
    "text": "A.3 Load Packages\nAfter successfully installing the package it is necessary to import them before you can work with them. The import of the packages is done in the following way:\nimport numpy as np\nThe imported packages are often abbreviated. This is because you need to specify where the function is coming from.\nThe most common abbreviations for data science packages are:\n\nAbbreviations for data science packages\n\n\nAbbreviation\nPackage\nImport\n\n\n\n\nnp\nnumpy\nimport numpy as np\n\n\npd\npandas\nimport pandas as pd\n\n\nplt\nmatplotlib\nimport matplotlib.pyplot as plt\n\n\npx\nplotly\nimport plotly.exprss as px\n\n\ntf\ntensorflow\nimport tensorflow as tf\n\n\nsns\nseaborn\nimport seaborn as sns\n\n\ndt\ndatetime\nimport datetime as dt\n\n\npkl\npickle\nimport pickle as pkl",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#functions-in-python",
    "href": "a_01_intro_to_notebooks.html#functions-in-python",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "A.4 Functions in Python",
    "text": "A.4 Functions in Python\nBecause python is not using Semicolon’s it is import to keep track of indentation in your code. The indentation works as a placeholder for the semicolons. This is especially important if your are defining loops, functions, etc. …\nExample: We are defining a function that calculates the squared sum of its input parameters\n\ndef squared_sum(x,y): \n    z = x**2 + y**2\n    return z\n\nIf you are working with something that needs indentation, it will be already done by the notebook.\nHint: Keep in mind that is good practice to use the return parameter. If you are not using return and a function has multiple paramaters that you would like to return, it will only return the last one defined.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_01_intro_to_notebooks.html#list-of-useful-jupyter-notebook-shortcuts",
    "href": "a_01_intro_to_notebooks.html#list-of-useful-jupyter-notebook-shortcuts",
    "title": "Appendix A — Introduction to Jupyter Notebook",
    "section": "A.5 List of Useful Jupyter Notebook Shortcuts",
    "text": "A.5 List of Useful Jupyter Notebook Shortcuts\n\nList of useful Jupyter Notebook Shortcuts\n\n\n\n\n\n\n\nFunction\nKeyboard Shortcut\nMenu Tools\n\n\n\n\nSave notebook\nEsc + s\nFile → Save and Checkpoint\n\n\nCreate new Cell\nEsc + a (above),  Esc + b (below)\nInsert → Cell above; Insert → Cell below\n\n\nRun Cell\nCtrl + enter\nCell → Run Cell\n\n\nCopy Cell\nc\nCopy Key\n\n\nPaste Cell\nv\nPaste Key\n\n\nInterrupt Kernel\nEsc + i i\nKernel → Interrupt\n\n\nRestart Kernel\nEsc + 0 0\nKernel → Restart\n\n\n\nIf you combine everything you can create beautiful graphics\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Generate 100 random data points along 3 dimensions\nx, y, scale = np.random.randn(3, 100)\nfig, ax = plt.subplots()\n\n# Map each onto a scatterplot we'll create with Matplotlib\nax.scatter(x=x, y=y, c=scale, s=np.abs(scale)*500)\nax.set(title=\"Some random data, created with the Jupyter Notebook!\")\nplt.show()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Introduction to Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html",
    "href": "a_02_git_intro_en.html",
    "title": "Appendix B — Git Introduction",
    "section": "",
    "text": "B.1 Learning Objectives\nIn this learning unit, you will learn how to set up Git as a version control system for a project. The most important Git commands will be explained. You will learn how to track and manage changes to your projects with Git. Specifically:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#learning-objectives",
    "href": "a_02_git_intro_en.html#learning-objectives",
    "title": "Appendix B — Git Introduction",
    "section": "",
    "text": "Initializing a repository: git init\nIgnoring files: .gitignore\nAdding files to the staging area: git add\nChecking status changes: git status\nReviewing history: git log\nCreating a new branch: git branch\nSwitching to the current branch: git switch and git checkout\nMerging two branches: git merge\nResolving conflicts\nReverting changes: git revert\nUploading changes to GitLab: git push\nDownloading changes from GitLab: git pull\nAdvanced: git rebase",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#basics-of-git",
    "href": "a_02_git_intro_en.html#basics-of-git",
    "title": "Appendix B — Git Introduction",
    "section": "B.2 Basics of Git",
    "text": "B.2 Basics of Git\n\nB.2.1 Initializing a Repository: git init\nTo set up Git as a version control system for your project, you need to initialize a new Git repository at the top-level folder, which is the working directory of your project. This is done using the git init command.\nAll files in this folder and its subfolders will automatically become part of the repository. Creating a Git repository is similar to adding an all-powerful passive observer of all things to your project. Git sits there, observes, and takes note of even the smallest changes, such as a single character in a file within a repository with hundreds of files. And it will tell you where these changes occurred if you forget. Once Git is initialized, it monitors all changes made within the working directory, and it tracks the history of events from that point forward. For this purpose, a historical timeline is created for your project, referred to as a “branch,” and the initial branch is named main. So, when someone says they are on the main branch or working on the main branch, it means they are in the historical main timeline of the project. The Git repository, often abbreviated as repo, is a virtual representation of your project, including its history and branches, a book, if you will, where you can look up and retrieve the entire history of the project: you work in your working directory, and the Git repository tracks and stores your work.\n\n\nB.2.2 Ignoring Files: .gitignore\nIt’s useful that Git watches and keeps an eye on everything in your project. However, in most projects, there are files and folders that you don’t need or want to keep an eye on. These may include system files, local project settings, libraries with dependencies, and so on.\nYou can exclude any file or folder from your Git repository by including them in the .gitignore file. In the .gitignore file, you create a list of file names, folder names, and other items that Git should not track, and Git will ignore these items. Hence the name “gitignore.” Do you want to track a file that you previously ignored? Simply remove the mention of the file in the gitignore file, and Git will start tracking it again.\n\n\nB.2.3 Adding Changes to the Staging Area: git add\nThe interesting thing about Git as an all-powerful, passive observer of all things is that it’s very passive. As long as you don’t tell Git what to remember, it will passively observe the changes in the project folder but do nothing.\nWhen you make a change to your project that you want Git to include in the project’s history to take a snapshot of so you can refer back to it later, your personal checkpoint, if you will, you need to first stage the changes in the staging area. What is the staging area? The staging area is where you collect changes to files that you want to include in the project’s history.\nThis is done using the git add command. You can specify which files you want to add by naming them, or you can add all of them using -A. By doing this, you’re telling Git that you’ve made changes and want it to remember these particular changes so you can recall them later if needed. This is important because you can choose which changes you want to stage, and those are the changes that will eventually be transferred to the history.\n\nNote: When you run git add, the changes are not transferred to the project’s history. They are only transferred to the staging area.\n\n\n\n\n\n\n\nExample of git add from the beginning\n\n\n\n# Create a new directory for your\n# repository and navigate to that directory:\n\nmkdir my-repo\ncd my-repo\n\n# Initialize the repository with git init:\n\ngit init\n\n# Create a .gitignore file for Python code.\n# You can use a template from GitHub:\n\ncurl https://raw.githubusercontent.com/github/gitignore/master/Python.gitignore -o .gitignore\n\n# Add your files to the repository using git add:\n\ngit add .\nThis adds all files in the current directory to the repository, except for the files listed in the .gitignore file.\n\n\n\n\nB.2.4 Transferring Changes to Memory: git commit\nThe power of Git becomes evident when you start transferring changes to the project history. This is done using the git commit command. When you run git commit, you inform Git that the changes in the staging area should be added to the history of the project so that they can be referenced or retrieved later.\nAdditionally, you can add a commit message with the -m option to explain what changes were made. So when you look back at the project history, you can see that you added a new feature.\ngit commit creates a snapshot, an image of the current state of your project at that specific time, and adds it to the branch you are currently working on.\nAs you work on your project and transfer more snapshots, the branch grows and forms a timeline of events. This means you can now look back at every transfer in the branch and see what your code looked like at that time.\nYou can compare any phase of your code with any other phase of your code to find errors, restore deleted code, or do things that would otherwise not be possible, such as resetting the project to a previous state or creating a new timeline from any point.\nSo how often should you add these commits? My rule of thumb is not to commit too often. It’s better to have a Git repository with too many commits than one with too few commits.\n\n\n\n\n\n\nContinuing the example from above:\n\n\n\nAfter adding your files with git add, you can create a commit to save your changes. Use the git commit command with the -m option to specify your commit message:\ngit commit -m \"My first commit message\"\nThis creates a new commit with the added files and the specified commit message.\n\n\n\n\nB.2.5 Check the Status of Your Repository: git status\nIf you’re wondering what you’ve changed in your project since the last commit snapshot, you can always check the Git status. Git will list every modified file and the current status of each file.\nThis status can be either:\n\nUnchanged (unmodified), meaning nothing has changed since you last transferred it, or\nIt’s been changed (changed) but not staged (staged) to be transferred into the history, or\nSomething has been added to staging (staged) and is ready to be transferred into the history.\n\nWhen you run git status, you get an overview of the current state of your project.\n\n\n\n\n\n\nContinuing the example from above:\n\n\n\nThe git status command displays the status of your working directory and the staging area. It shows you which files have been modified, which files are staged for commit, and which files are not yet being tracked:\ngit status\ngit status is a useful tool to keep track of your changes and ensure that you have added all the desired files for commit.\n\n\n\n\nB.2.6 Review Your Repository’s History: git log\n\n\n\n\n\n\nContinuing the example from above:\n\n\n\nYou can view the history of your commits with the git log command. This command displays a list of all the commits in the current branch, along with information such as the author, date, and commit message:\ngit log\nThere are many options to customize the output of git log. For example, you can use the --pretty option to change the format of the output:\ngit log --pretty=oneline\nThis displays each commit in a single line.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#branches-timelines",
    "href": "a_02_git_intro_en.html#branches-timelines",
    "title": "Appendix B — Git Introduction",
    "section": "B.3 Branches (Timelines)",
    "text": "B.3 Branches (Timelines)\n\nB.3.1 Creating an Alternative Timeline: git branch\nIn the course of developing a project, you often reach a point where you want to add a new feature, but doing so might require changing the existing code in a way that could be challenging to undo later.\nOr maybe you just want to experiment and be able to discard your work if the experiment fails. In such cases, Git allows you to create an alternative timeline called a branch to work in.\nThis new branch has its own name and exists in parallel with the main branch and all other branches in your project.\nDuring development, you can switch between branches and work on different versions of your code concurrently. This way, you can have a stable codebase in the main branch while developing an experimental feature in a separate branch. When you switch from one branch to another, the code you’re working on is automatically reset to the latest commit of the branch you’re currently in.\nIf you’re working in a team, different team members can work on their own branches, creating an entire universe of alternative timelines for your project. When features are completed, they can be seamlessly merged back into the main branch.\n\n\n\n\n\n\nContinuing the example from above:\n\n\n\nTo create a new branch, you can use the git branch command with the name of the new branch as an argument:\ngit branch my-tests\n\n\n\n\nB.3.2 The Pointer to the Current Branch: HEAD\nHow does Git know where you are on the timeline, and how can you keep track of your position?\nYou’re always working at the tip (HEAD) of the currently active branch. The HEAD pointer points there quite literally. In a new project archive with just a single main branch and only new commits being added, HEAD always points to the latest commit in the main branch. That’s where you are.\nHowever, if you’re in a repository with multiple branches, meaning multiple alternative timelines, HEAD will point to the latest commit in the branch you’re currently working on.\n\n\nB.3.3 Switching to an Alternative Timeline: git switch\nAs your project grows, and you have multiple branches, you need to be able to switch between these branches. This is where the switch command comes into play.\nAt any time, you can use the git switch command with the name of the branch you want to switch to, and HEAD moves from your current branch to the one you specified.\nIf you’ve made changes to your code before switching, Git will attempt to carry those changes over to the branch you’re switching to. However, if these changes conflict with the target branch, the switch will be canceled.\nTo resolve this issue without losing your changes, return to the original branch, add and commit your recent changes, and then perform the switch.\n\n\nB.3.4 Switching to an Alternative Timeline and Making Changes: git checkout\nTo switch between branches, you can also use the git checkout command. It works similarly to git switch for this purpose: you pass the name of the branch you want to switch to, and HEAD moves to the beginning of that branch.\nBut checkout can do more than just switch to another timeline. With git checkout, you can also move to any commit point in any timeline. In other words, you can travel back in time and work on code from the past.\nTo do this, use git checkout and provide the commit ID. This is an automatically generated, random combination of letters and numbers that identifies each commit. You can retrieve the commit ID using git log. When you run git log, you get a list of all the commits in your repository, starting with the most recent ones.\nWhen you use git checkout with an older commit ID, you check out a commit in the middle of a branch. This disrupts the timeline, as you’re actively attempting to change history. Git doesn’t want you to do that because, much like in a science fiction movie, altering the past might also alter the future. In our case, it would break the version control branch’s coherence.\nTo prevent you from accidentally disrupting time and altering history, checking out an earlier commit in any branch results in the warning “Detached Head,” which sounds rather ominous. The “Detached Head” warning is appropriate because it accurately describes what’s happening. Git literally detaches the head from the branch and sets it aside.\nNow, you’re working outside of time in a space unbound to any timeline, which again sounds rather threatening but is perfectly fine in reality.\nTo continue working on this past code, all you need to do is reattach it to the timeline. You can use git branch to create a new branch, and the detached head will automatically attach to this new branch.\nInstead of breaking the history, you’ve now created a new alternative timeline that starts in the past, allowing you to work safely. You can continue working on the branch as usual.\n\n\n\n\n\n\nContinuing the example from above:\n\n\n\nTo switch to a new branch, you can use the git checkout command:\ngit checkout meine-tests\nNow you’re using the new branch and can make changes independently from the original branch.\n\n\n\n\nB.3.5 The Difference Between checkout and switch\nWhat is the difference between git switch and git checkout? git switch and git checkout are two different commands that both serve the purpose of switching between branches. You can use both to switch between branches, but they have an important distinction. git switch is a new command introduced with Git 2.23. git checkout is an older command that has existed since Git 1.6.0. So, git switch and git checkout have different origins. git switch was introduced to separate the purposes of git checkout. git checkout has two different purposes: 1. It can be used to switch between branches, and 2. It can be used to reset files to the state of the last commit.\nHere’s an example: In my project, I made a change since the last commit, but I haven’t staged it yet. Then, I realized that I actually don’t want this change. I want to reset the file to the state before the last commit. As long as I haven’t committed my changes, I can do this with git checkout by targeting the specific file. So, if that file is named main.js, I can say: git checkout main.js. And the file will be reset to the state of the last commit, which makes sense. I’m checking out the file from the last commit.\nBut that’s quite different from switching between the beginning of one branch to another. git switch and git restore were introduced to separate these two operations. git switch is for switching between branches, and git restore is for resetting the specified file to the state of the last commit. If you try to restore a file with git switch, it simply won’t work. It’s not intended for that. As I mentioned earlier, it’s about separating concerns.\n:::{.callout-note} #### Difference Between checkout and switch git checkout and git switch are both commands for switching between branches in a Git repository. The main difference between the two commands is that git switch is a newer command specifically designed for branch switching, while git checkout is an older command that can be used for various tasks, including branch switching.\nHere’s an example demonstrating how to initialize a repository and switch between branches:\n# Create a new directory for your repository\n# and navigate to that directory:\nmkdir my-repo\ncd my-repo\n\n# Initialize the repository with git init:\ngit init\n\n# Create a new branch with git branch:\ngit branch my-new-branch\n\n# Switch to the new branch using git switch:\ngit switch my-new-branch\n\n# Alternatively, you can also use git checkout\n# to switch to the new branch:\n\ngit checkout my-new-branch\nBoth commands lead to the same result: You are now on the new branch.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#merging-branches-and-resolving-conflicts",
    "href": "a_02_git_intro_en.html#merging-branches-and-resolving-conflicts",
    "title": "Appendix B — Git Introduction",
    "section": "B.4 Merging Branches and Resolving Conflicts",
    "text": "B.4 Merging Branches and Resolving Conflicts\n\nB.4.1 git merge: Merging Two Timelines\nGit allows you to split your development work into as many branches or alternative timelines as you like, enabling you to work on many different versions of your code simultaneously without losing or overwriting any of your work.\nThis is all well and good, but at some point, you need to bring those various versions of your code back together into one branch. That’s where git merge comes in.\nConsider an example where you have two branches, a main branch and an experimental branch called experimental-branch. In the experimental branch, there is a new feature. To merge these two branches, you set HEAD to the branch where you want to incorporate the code and execute git merge followed by the name of the branch you want to merge. HEAD is a special pointer that points to the current branch. When you run git merge, it combines the code from the branch associated with HEAD with the code from the branch specified by the branch name you provide.\n# Initialize the repository\ngit init\n\n# Create a new branch called \"experimental-branch\"\ngit branch experimental-branch\n\n# Switch to the \"experimental-branch\"\ngit checkout experimental-branch\n\n# Add the new feature here and\n# make a commit\n# ...\n\n# Switch back to the \"main\" branch\ngit checkout main\n\n# Perform the merge\ngit merge experimental-branch\nDuring the merge, matching pieces of code in the branches overlap, and any new code from the branch being merged is added to the project. So now, the main branch also contains the code from the experimental branch, and the events of the two separate timelines have been merged into a single one. What’s interesting is that even though the experimental branch was merged with the main branch, the last commit of the experimental branch remains intact, allowing you to continue working on the experimental branch separately if you wish.\n\n\nB.4.2 Resolving Conflicts When Merging\nMerging branches where there are no code changes at the same place in both branches is a straightforward process. It’s also a rare process. In most cases, there will be some form of conflict between the branches – the same code or the same code area has been modified differently in the different branches. Merging two branches with such conflicts will not work, at least not automatically.\nIn this case, Git doesn’t know how to merge this code. So, when such a situation occurs, it’s marked as a conflict, and the merging process is halted. This might sound more dramatic than it is. When you get a conflict warning, Git is saying there are two different versions here, and Git needs to know which one you want to keep. To help you figure out the conflict, Git combines all the code into a single file and automatically marks the conflicting code as the current change, which is the original code from the branch you’re working on, or as the incoming change, which is the code from the file you’re trying to merge.\nTo resolve this conflict, you’ll edit the file to literally resolve the code conflict. This might mean accepting either the current or incoming change and discarding the other. It could mean combining both changes or something else entirely. It’s up to you. So, you edit the code to resolve the conflict. Once you’ve resolved the conflict by editing the code, you add the new conflict-free version to the staging area with git add and then commit the merged code with git commit. That’s how the conflict is resolved.\nA merge conflict occurs when Git struggles to automatically merge changes from two different branches. This usually happens when changes were made to the same line in the same file in both branches. To resolve a merge conflict, you must manually edit the affected files and choose the desired changes. Git marks the conflict areas in the file with special markings like &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;. You can search for these markings and manually select the desired changes. After resolving the conflicts, you can add the changes with git add and create a new commit with git commit to complete the merge.\nHere’s an example:\n# Perform the merge (this will cause a conflict)\ngit merge experimenteller-branch\n\n# Open the affected file in an editor and manually resolve the conflicts\n# ...\n\n# Add the modified file\ngit add &lt;filename&gt;\n\n# Create a new commit\ngit commit -m \"Resolved conflicts\"\n\n\nB.4.3 git revert: Undoing Something\nOne of the most powerful features of any software tool is the “Undo” button. Make a mistake, press “Undo,” and it’s as if it never happened. However, that’s not quite as simple when an all-powerful, passive observer is watching and recording your project’s history. How do you undo something that you’ve added to the history without rewriting the history?\nThe answer is that you can overwrite the history with the git reset command, but that’s quite risky and not a good practice.\nA better solution is to work with the historical timeline and simply place an older version of your code at the top of the branch. This is done with git revert. To make this work, you need to know the commit ID of the commit you want to go back to.\nThe commit ID is a machine-generated set of random numbers and letters, also known as a hash. To get a list of all the commits in the repository, including the commit ID and commit message, you can run git log.\n# Show the list of all operations in the repository\ngit log\nBy the way, it’s a good idea to leave clear and informative commit messages for this reason. This way, you know what happened in your previous commits. Once you’ve found the commit you want to revert to, call that commit ID with git revert, and then the ID. This will create a new commit at the top of the branch with the code from the reference commit. To transfer the code to the branch, add a commit message and save it. Now, the last commit in your branch matches the commit you’re reverting to, and your project’s history remains intact.\n\n\n\n\n\n\nAn example with git revert\n\n\n\n# Initialize a new repository\ngit init\n\n# Create a new file\necho \"Hello, World\" &gt; file.txt\n\n# Add the file to the repository\ngit add file.txt\n\n# Create a new commit\ngit commit -m \"First commit\"\n\n# Modify the file\necho \"Goodbye, World\" &gt; file.txt\n\n# Add the modified file\ngit add file.txt\n\n# Create a new commit\ngit commit -m \"Second commit\"\n\n# Use git log to find the commit ID of the second commit\ngit log\n\n# Use git revert to undo the changes from the second commit\ngit revert &lt;commit-id&gt;\n\n\nTo download the students branch from the repository git@git-ce.rwth-aachen.de:spotseven-lab/numerische-mathematik-sommersemester2023.git to your local machine, add a file, and upload the changes, you can follow these steps:\n\n\n\n\n\n\nAn example with git clone, git checkout, git add, git commit, git push\n\n\n\n# Clone the repository to your local machine:\ngit clone git@git-ce.rwth-aachen.de:spotseven-lab/numerische-mathematik-sommersemester2023.git\n\n# Change to the cloned repository:\ncd numerische-mathematik-sommersemester2023\n\n# Switch to the students branch:\ngit checkout students\n\n# Create the Test folder if it doesn't exist:\nmkdir Test\n\n# Create the Testdatei.txt file in the Test folder:\ntouch Test/Testdatei.txt\n\n# Add the file with git add:\ngit add Test/Testdatei.txt\n\n# Commit the changes with git commit:\ngit commit -m \"Added Testdatei.txt\"\n\n# Push the changes with git push:\ngit push origin students\nThis will upload the changes to the server and update the students branch in the repository.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#downloading-from-gitlab",
    "href": "a_02_git_intro_en.html#downloading-from-gitlab",
    "title": "Appendix B — Git Introduction",
    "section": "B.5 Downloading from GitLab",
    "text": "B.5 Downloading from GitLab\nTo download changes from a GitLab repository to your local machine, you can use the git pull command. This command downloads the latest changes from the specified remote repository and merges them with your local repository.\nHere is an example:\n\n\n\n\n\n\nAn example with git pull\n\n\n\n\n# Navigate to the local repository\n# linked to the GitHub repository:\ncd my-local-repository\n\n# Make sure you are in the correct branch:\ngit checkout main\n\n# Download the latest changes from GitHub:\ngit pull origin main\nThis downloads the latest changes from the main branch of the remote repository named “origin” and merges them with your local repository.\n\n\n\nIf there are conflicts between the downloaded changes and your local changes, you will need to resolve them manually before proceeding.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#advanced",
    "href": "a_02_git_intro_en.html#advanced",
    "title": "Appendix B — Git Introduction",
    "section": "B.6 Advanced",
    "text": "B.6 Advanced\n\nB.6.1 git rebase: Moving the Base of a Branch\nIn some cases, you may need to “rewrite history.” A common scenario is that you’ve been working on a new feature in a feature branch, and you realize that the work should have actually happened in the main branch.\nTo resolve this issue and make it appear as if the work occurred in the main branch, you can reset the experimental branch. “Rebase” literally means detaching the base of the experimental branch and moving it to the beginning of another branch, giving the branch a new base, thus “rebasing.”\nThis operation is performed from the branch you want to “rebase.” You use git rebase and specify the branch you want to use as the new base. If there are no conflicts between the experimental branch and the branch you want to rebase onto, this process happens automatically.\nIf there are conflicts, Git will guide you through the conflict resolution process for each commit from the rebase branch.\nThis may sound like a lot, but there’s a good reason for it. You are literally rewriting history by transferring commits from one branch to another. To maintain the coherence of the new version history, there should be no conflicts within the commits. So, you need to resolve them one by one until the history is clean. It goes without saying that this can be a fairly labor-intensive process. Therefore, you should not use git rebase frequently.\n\n\n\n\n\n\nAn example with git rebase\n\n\n\ngit rebase is a command used to change the base of a branch. This means that commits from the branch are applied to a new base, which is usually another branch. It can be used to clean up the repository history and avoid merge conflicts.\nHere is an example showing how to use git rebase:\n\nIn this example, we initialize a new Git repository and create a new file. We add the file to the repository and make an initial commit. Then, we create a new branch called “feature” and switch to that branch. We make changes to the file in the feature branch and create a new commit.\nThen, we switch back to the main branch and make changes to the file again. We add the modified file and make another commit.\nTo rebase the feature branch onto the main branch, we first switch to the feature branch and then use the git rebase command with the name of the main branch as an argument. This applies the commits from the feature branch to the main branch and changes the base of the feature branch.\n\n# Initialize a new repository\ngit init\n# Create a new file\necho \"Hello World\" &gt; file.txt\n# Add the file to the repository\ngit add file.txt\n# Create an initial commit\ngit commit -m \"Initial commit\"\n# Create a new branch called \"feature\"\ngit branch feature\n# Switch to the \"feature\" branch\ngit checkout feature\n# Make changes to the file in the \"feature\" branch\necho \"Hello Feature World\" &gt; file.txt\n# Add the modified file\ngit add file.txt\n# Create a new commit in the \"feature\" branch\ngit commit -m \"Feature commit\"\n# Switch back to the \"main\" branch\ngit checkout main\n# Make changes to the file in the \"main\" branch\necho \"Hello Main World\" &gt; file.txt\n# Add the modified file\ngit add file.txt\n# Create a new commit in the \"main\" branch\ngit commit -m \"Main commit\"\n# Use git rebase to rebase the \"feature\" branch\n# onto the \"main\" branch\ngit checkout feature\ngit rebase main",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#exercises",
    "href": "a_02_git_intro_en.html#exercises",
    "title": "Appendix B — Git Introduction",
    "section": "B.7 Exercises",
    "text": "B.7 Exercises\nIn order to be able to carry out this exercise, we provide you with a functional working environment. This can be accessed here. You can log in using your GMID. If you do not have one, you can generate one here. Once you have successfully logged in to the server, you must open a terminal instance. You are now in a position to carry out the exercise.\nAlternatively, you can also carry out the exercise locally on your computer, but then you will need to install git.\n\nB.7.1 Create project folder\nFirst create the test-repo folder via the command line and then navigate to this folder using the corresponding command.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_02_git_intro_en.html#initialize-repo",
    "href": "a_02_git_intro_en.html#initialize-repo",
    "title": "Appendix B — Git Introduction",
    "section": "B.8 Initialize repo",
    "text": "B.8 Initialize repo\nNow initialize the repository so that the future project, which will be saved in the test-repo folder, and all associated files are versioned.\n\nB.8.1 Do not upload / ignore certain file types\nIn order to carry out this exercise, you must first download a file which you then have git ignore. To do this, download the current examination regulations for the Bachelor’s degree program in Electrical Engineering using the following command curl -o pruefungsordnung.pdf https://www.th-koeln.de/mam/downloads/deutsch/studium/studiengaenge/f07/ordnungen_plaene/f07_bpo_ba_ekb_2021_01_04.pdf.\nThe PDF file has been stored in the root directory of your repo and you must now exclude it from being uploaded so that no changes to this file are tracked. Please note that not only this one PDF file should be ignored, but all PDF files in the repo.\n\n\nB.8.2 Create file and stage it\nIn order to be able to commit a change later and thus make it traceable, it must first be staged. However, as we only have a PDF file so far, which is to be ignored by git, we cannot stage anything. Therefore, in this task, a file test.txt with some string as content is to be created and then staged.\n\n\nB.8.3 Create another file and check status\nTo understand the status function, you should create the file test2.txt and then call the status function of git.\n\n\nB.8.4 Commit changes\nAfter the changes to the test.txt file have been staged and these are now to be transferred to the project process, they must be committed. Therefore, in this step you should perform a corresponding commit in the current branch with the message test-commit. Finally, you should also display the history of the commits.\n\n\nB.8.5 Create a new branch and switch to it\nIn this task, you are to create a new branch with the name change-text in which you will later make changes. You should then switch to this branch.\n\n\nB.8.6 Commit changes in the new branch\nTo be able to merge the new branch into the main branch later, you must first make changes to the test.txt file. To do this, open the file and simply change the character string in this file before saving the changes and closing the file. Before you now commit the file, you should reset the file to the status of the last commit for practice purposes and thus undo the change. After you have done this, open the file test.txt again and change the character string again before saving and closing the file. This time you should commit the file test.txt and then commit it with the message test-commit2.\n\n\nB.8.7 Merge branch into main\nAfter you have committed the change to the test.txt file, you should merge the change-text branch including the change into the main branch so that it is also available there.\n\n\nB.8.8 Resolve merge conflict\nTo simulate a merge conflict, you must first change the content of the test.txt file before you commit the change. Then switch to the branch change-text and change the file test.txt there as well before you commit the change. Now you should try to merge the branch change-text into the main branch and solve the problems that occur in order to be able to perform the merge successfully.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Git Introduction</span>"
    ]
  },
  {
    "objectID": "a_03_python_intro_en.html",
    "href": "a_03_python_intro_en.html",
    "title": "Appendix C — Python Introduction",
    "section": "",
    "text": "C.1 Recommendations\nBeginner’s Guide to Python",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Python Introduction</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html",
    "href": "a_04_spot_doc.html",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "",
    "text": "D.1 Example: spot\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom scipy.optimize import shgo\nfrom scipy.optimize import direct\nfrom scipy.optimize import differential_evolution\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#example-spot",
    "href": "a_04_spot_doc.html#example-spot",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "",
    "text": "D.1.1 The Objective Function\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = x^2\\]\n\nfun = analytical().fun_sphere\n\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x)\nplt.figure()\nplt.plot(x,y, \"k\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom spotPython.utils.init import fun_control_init, design_control_init, surrogate_control_init, optimizer_control_init\nspot_1 = spot.Spot(fun=fun,\n                   fun_control=fun_control_init(\n                        lower = np.array([-10]),\n                        upper = np.array([100]),\n                        fun_evals = 7,\n                        fun_repeats = 1,\n                        max_time = inf,\n                        noise = False,\n                        tolerance_x = np.sqrt(np.spacing(1)),\n                        var_type=[\"num\"],\n                        infill_criterion = \"y\",\n                        n_points = 1,\n                        seed=123,\n                        log_level = 50),\n                   design_control=design_control_init(\n                        init_size=5,\n                        repeats=1),\n                   surrogate_control=surrogate_control_init(\n                        noise=False,\n                        min_theta=-4,\n                        max_theta=3,\n                        n_theta=1,\n                        model_optimizer=differential_evolution,\n                        model_fun_evals=10000))\n\nspot’s __init__ method sets the control parameters. There are two parameter groups:\n\nexternal parameters can be specified by the user\ninternal parameters, which are handled by spot.\n\n\n\nD.1.2 External Parameters\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nfun\nobject\nobjective function\n\nyes\n\n\nlower\narray\nlower bound\n\nyes\n\n\nupper\narray\nupper bound\n\nyes\n\n\nfun_evals\nint\nnumber of function evaluations\n15\nno\n\n\nfun_evals\nint\nnumber of function evaluations\n15\nno\n\n\nfun_control\ndict\nnoise etc.\n{}\nn\n\n\nmax_time\nint\nmax run time budget\ninf\nno\n\n\nnoise\nbool\nif repeated evaluations of fun results in different values, then noise should be set to True.\nFalse\nno\n\n\ntolerance_x\nfloat\ntolerance for new x solutions. Minimum distance of new solutions, generated by suggest_new_X, to already existing solutions. If zero (which is the default), every new solution is accepted.\n0\nno\n\n\nvar_type\nlist\nlist of type information, can be either \"num\" or \"factor\"\n[\"num\"]\nno\n\n\ninfill_criterion\nstring\nCan be \"y\", \"s\", \"ei\" (negative expected improvement), or \"all\"\n\"y\"\nno\n\n\nn_points\nint\nnumber of infill points\n1\nno\n\n\nseed\nint\ninitial seed. If Spot.run() is called twice, different results will be generated. To reproduce results, the seed can be used.\n123\nno\n\n\nlog_level\nint\nlog level with the following settings: NOTSET (0), DEBUG (10: Detailed information, typically of interest only when diagnosing problems.), INFO (20: Confirmation that things are working as expected.), WARNING (30: An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.), ERROR (40: Due to a more serious problem, the software has not been able to perform some function.), and CRITICAL (50: A serious error, indicating that the program itself may be unable to continue running.)\n50\nno\n\n\nshow_models\nbool\nPlot model. Currently only 1-dim functions are supported\nFalse\nno\n\n\ndesign\nobject\nexperimental design\nNone\nno\n\n\ndesign_control\ndict\ncontrol parameters\nsee below\nno\n\n\nsurrogate\n\nsurrogate model\nkriging\nno\n\n\nsurrogate_control\ndict\ncontrol parameters\nsee below\nno\n\n\noptimizer\nobject\noptimizer\nsee below\nno\n\n\noptimizer_control\ndict\ncontrol parameters\nsee below\nno\n\n\n\n\nBesides these single parameters, the following parameter dictionaries can be specified by the user:\n\nfun_control\ndesign_control\nsurrogate_control\noptimizer_control",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#the-fun_control-dictionary",
    "href": "a_04_spot_doc.html#the-fun_control-dictionary",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.2 The fun_control Dictionary",
    "text": "D.2 The fun_control Dictionary\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nsigma\nfloat\nnoise: standard deviation\n0\nyes\n\n\nseed\nint\nseed for rng\n124\nyes",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#the-design_control-dictionary",
    "href": "a_04_spot_doc.html#the-design_control-dictionary",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.3 The design_control Dictionary",
    "text": "D.3 The design_control Dictionary\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\ninit_size\nint\ninitial sample size\n10\nyes\n\n\nrepeats\nint\nnumber of repeats of the initial sammples\n1\nyes",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#the-surrogate_control-dictionary",
    "href": "a_04_spot_doc.html#the-surrogate_control-dictionary",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.4 The surrogate_control Dictionary",
    "text": "D.4 The surrogate_control Dictionary\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nnoise\n\n\n\n\n\n\nmodel_optimizer\nobject\noptimizer\ndifferential_evolution\nno\n\n\nmodel_fun_evals\n\n\n\n\n\n\nmin_theta\n\n\n-3.\n\n\n\nmax_theta\n\n\n3.\n\n\n\nn_theta\n\n\n1\n\n\n\nn_p\n\n\n1\n\n\n\noptim_p\n\n\nFalse\n\n\n\ncod_type\n\n\n\"norm\"\n\n\n\nvar_type\n\n\n\n\n\n\nuse_cod_y\nbool\n\nFalse",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#the-optimizer_control-dictionary",
    "href": "a_04_spot_doc.html#the-optimizer_control-dictionary",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.5 The optimizer_control Dictionary",
    "text": "D.5 The optimizer_control Dictionary\n\n\n\n\n\n\n\n\n\n\nexternal parameter\ntype\ndescription\ndefault\nmandatory\n\n\n\n\nmax_iter\nint\nmax number of iterations. Note: these are the cheap evaluations on the surrogate.\n1000\nno",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#run",
    "href": "a_04_spot_doc.html#run",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.6 Run",
    "text": "D.6 Run\n\nspot_1.run()\n\nspotPython tuning: 2.0106521524877827 [#########-] 85.71% \nspotPython tuning: 0.01033163973935242 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2d2da9050&gt;",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#print-the-results",
    "href": "a_04_spot_doc.html#print-the-results",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.7 Print the Results",
    "text": "D.7 Print the Results\n\nspot_1.print_results()\n\nmin y: 0.01033163973935242\nx0: -0.10164467393499976\n\n\n[['x0', -0.10164467393499976]]",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#show-the-progress",
    "href": "a_04_spot_doc.html#show-the-progress",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.8 Show the Progress",
    "text": "D.8 Show the Progress\n\nspot_1.plot_progress()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#visualize-the-surrogate",
    "href": "a_04_spot_doc.html#visualize-the-surrogate",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.9 Visualize the Surrogate",
    "text": "D.9 Visualize the Surrogate\n\nThe plot method of the kriging surrogate is used.\nNote: the plot uses the interval defined by the ranges of the natural variables.\n\n\nspot_1.surrogate.plot()\n\n&lt;Figure size 864x576 with 0 Axes&gt;",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#run-with-a-specific-start-design",
    "href": "a_04_spot_doc.html#run-with-a-specific-start-design",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.10 Run With a Specific Start Design",
    "text": "D.10 Run With a Specific Start Design\n\nspot_x0 = spot.Spot(fun=fun,\n                    fun_control=fun_control_init(\n                        lower = np.array([-10]),\n                        upper = np.array([100]),\n                        fun_evals = 7,\n                        fun_repeats = 1,\n                        max_time = inf,\n                        noise = False,\n                        tolerance_x = np.sqrt(np.spacing(1)),\n                        var_type=[\"num\"],\n                        infill_criterion = \"y\",\n                        n_points = 1,\n                        seed=123,\n                        log_level = 50),\n                    design_control=design_control_init(\n                        init_size=5,\n                        repeats=1),\n                    surrogate_control=surrogate_control_init(\n                        noise=False,\n                        min_theta=-4,\n                        max_theta=3,\n                        n_theta=1,\n                        model_optimizer=differential_evolution,\n                        model_fun_evals=10000))\nspot_x0.run(X_start=np.array([0.5, -0.5]))\nspot_x0.plot_progress()\n\nspotPython tuning: 2.0106521524877827 [#########-] 85.71% \nspotPython tuning: 0.01033163973935242 [##########] 100.00% Done...",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#init-build-initial-design",
    "href": "a_04_spot_doc.html#init-build-initial-design",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.11 Init: Build Initial Design",
    "text": "D.11 Init: Build Initial Design\n\nfrom spotPython.design.spacefilling import spacefilling\nfrom spotPython.build.kriging import Kriging\nfrom spotPython.fun.objectivefunctions import analytical\ngen = spacefilling(2)\nrng = np.random.RandomState(1)\nlower = np.array([-5,-0])\nupper = np.array([10,15])\nfun = analytical().fun_branin\nfun_control = {\"sigma\": 0,\n               \"seed\": 123}\n\nX = gen.scipy_lhd(10, lower=lower, upper = upper)\nprint(X)\ny = fun(X, fun_control=fun_control)\nprint(y)\n\n[[ 8.97647221 13.41926847]\n [ 0.66946019  1.22344228]\n [ 5.23614115 13.78185824]\n [ 5.6149825  11.5851384 ]\n [-1.72963184  1.66516096]\n [-4.26945568  7.1325531 ]\n [ 1.26363761 10.17935555]\n [ 2.88779942  8.05508969]\n [-3.39111089  4.15213772]\n [ 7.30131231  5.22275244]]\n[128.95676449  31.73474356 172.89678121 126.71295908  64.34349975\n  70.16178611  48.71407916  31.77322887  76.91788181  30.69410529]",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#replicability",
    "href": "a_04_spot_doc.html#replicability",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.12 Replicability",
    "text": "D.12 Replicability\nSeed\n\ngen = spacefilling(2, seed=123)\nX0 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=345)\nX1 = gen.scipy_lhd(3)\nX2 = gen.scipy_lhd(3)\ngen = spacefilling(2, seed=123)\nX3 = gen.scipy_lhd(3)\nX0, X1, X2, X3\n\n(array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]),\n array([[0.78373509, 0.86811887],\n        [0.06692621, 0.6058029 ],\n        [0.41374778, 0.00525456]]),\n array([[0.121357  , 0.69043832],\n        [0.41906219, 0.32838498],\n        [0.86742658, 0.52910374]]),\n array([[0.77254938, 0.31539299],\n        [0.59321338, 0.93854273],\n        [0.27469803, 0.3959685 ]]))",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#surrogates",
    "href": "a_04_spot_doc.html#surrogates",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.13 Surrogates",
    "text": "D.13 Surrogates\n\nD.13.1 A Simple Predictor\nThe code below shows how to use a simple model for prediction. Assume that only two (very costly) measurements are available:\n\nf(0) = 0.5\nf(2) = 2.5\n\nWe are interested in the value at \\(x_0 = 1\\), i.e., \\(f(x_0 = 1)\\), but cannot run an additional, third experiment.\n\nfrom sklearn import linear_model\nX = np.array([[0], [2]])\ny = np.array([0.5, 2.5])\nS_lm = linear_model.LinearRegression()\nS_lm = S_lm.fit(X, y)\nX0 = np.array([[1]])\ny0 = S_lm.predict(X0)\nprint(y0)\n\n[1.5]\n\n\nCentral Idea: Evaluation of the surrogate model S_lm is much cheaper (or / and much faster) than running the real-world experiment \\(f\\).",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#demotest-objective-function-fails",
    "href": "a_04_spot_doc.html#demotest-objective-function-fails",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.14 Demo/Test: Objective Function Fails",
    "text": "D.14 Demo/Test: Objective Function Fails\nSPOT expects np.nan values from failed objective function values. These are handled. Note: SPOT’s counter considers only successful executions of the objective function.\n\nimport numpy as np\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nimport numpy as np\nfrom math import inf\n# number of initial points:\nni = 20\n# number of points\nn = 30\n\nfun = analytical().fun_random_error\nfun_control=fun_control_init(\n    lower = np.array([-1]),\n    upper= np.array([1]),\n    fun_evals = n,\n    show_progress=False)\ndesign_control=design_control_init(init_size=ni)\n\nspot_1 = spot.Spot(fun=fun,\n                     fun_control=fun_control,\n                     design_control=design_control)\nspot_1.run()\n# To check whether the run was successfully completed,\n# we compare the number of evaluated points to the specified\n# number of points.\nassert spot_1.y.shape[0] == n\n\n[        nan         nan -0.02203599 -0.21843718  0.78240941         nan\n -0.3923345   0.67234256  0.31802454 -0.68898927 -0.75129705  0.97550354\n  0.41757584         nan  0.82585329         nan -0.49274073         nan\n -0.17991251  0.1481835 ]\n[-1.]\n[nan]\n[-0.14624037]\n[0.166475]\n[nan]\n[-0.3352401]\n[-0.47259301]\n[0.95541987]\n[0.17335968]\n[-0.58552368]\n[-0.20126111]\n[-0.60100809]\n[-0.97897336]\n[-0.2748985]\n[0.8359486]\n[0.99035591]\n[0.01641232]\n[0.5629346]",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "a_04_spot_doc.html#sec-detailed-data-splitting",
    "href": "a_04_spot_doc.html#sec-detailed-data-splitting",
    "title": "Appendix D — Documentation of the Sequential Parameter Optimization",
    "section": "D.15 PyTorch: Detailed Description of the Data Splitting",
    "text": "D.15 PyTorch: Detailed Description of the Data Splitting\n\nD.15.1 Description of the \"train_hold_out\" Setting\nThe \"train_hold_out\" setting is used by default. It uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc(), which is implemented in the file hypertorch.py, calls evaluate_hold_out() as follows:\n\ndf_eval, _ = evaluate_hold_out(\n    model,\n    train_dataset=fun_control[\"train\"],\n    shuffle=self.fun_control[\"shuffle\"],\n    loss_function=self.fun_control[\"loss_function\"],\n    metric=self.fun_control[\"metric_torch\"],\n    device=self.fun_control[\"device\"],\n    show_batch_interval=self.fun_control[\"show_batch_interval\"],\n    path=self.fun_control[\"path\"],\n    task=self.fun_control[\"task\"],\n    writer=self.fun_control[\"writer\"],\n    writerId=config_id,\n)\nNote: Only the data set fun_control[\"train\"] is used for training and validation. It is used in evaluate_hold_out as follows:\ntrainloader, valloader = create_train_val_data_loaders(\n                dataset=train_dataset, batch_size=batch_size_instance, shuffle=shuffle\n            )\ncreate_train_val_data_loaders() splits the train_dataset into trainloader and valloader using torch.utils.data.random_split() as follows:\ndef create_train_val_data_loaders(dataset, batch_size, shuffle, num_workers=0):\n    test_abs = int(len(dataset) * 0.6)\n    train_subset, val_subset = random_split(dataset, [test_abs, len(dataset) - test_abs])\n    trainloader = torch.utils.data.DataLoader(\n        train_subset, batch_size=int(batch_size), shuffle=shuffle, num_workers=num_workers\n    )\n    valloader = torch.utils.data.DataLoader(\n        val_subset, batch_size=int(batch_size), shuffle=shuffle, num_workers=num_workers\n    )\n    return trainloader, valloader\nThe optimizer is set up as follows:\noptimizer_instance = net.optimizer\nlr_mult_instance = net.lr_mult\nsgd_momentum_instance = net.sgd_momentum\noptimizer = optimizer_handler(\n    optimizer_name=optimizer_instance,\n    params=net.parameters(),\n    lr_mult=lr_mult_instance,\n    sgd_momentum=sgd_momentum_instance,\n)\n\nevaluate_hold_out() sets the net attributes such as epochs, batch_size, optimizer, and patience. For each epoch, the methods train_one_epoch() and validate_one_epoch() are called, the former for training and the latter for validation and early stopping. The validation loss from the last epoch (not the best validation loss) is returned from evaluate_hold_out.\nThe method train_one_epoch() is implemented as follows:\n\ndef train_one_epoch(\n    net,\n    trainloader,\n    batch_size,\n    loss_function,\n    optimizer,\n    device,\n    show_batch_interval=10_000,\n    task=None,\n):\n    running_loss = 0.0\n    epoch_steps = 0\n    for batch_nr, data in enumerate(trainloader, 0):\n        input, target = data\n        input, target = input.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = net(input)\n        if task == \"regression\":\n            target = target.unsqueeze(1)\n            if target.shape == output.shape:\n                loss = loss_function(output, target)\n            else:\n                raise ValueError(f\"Shapes of target and output do not match:\n                 {target.shape} vs {output.shape}\")\n        elif task == \"classification\":\n            loss = loss_function(output, target)\n        else:\n            raise ValueError(f\"Unknown task: {task}\")\n        loss.backward()\n        torch.nn.utils.clip_grad_norm_(net.parameters(), max_norm=1.0)\n        optimizer.step()\n        running_loss += loss.item()\n        epoch_steps += 1\n        if batch_nr % show_batch_interval == (show_batch_interval - 1):  \n            print(\n                \"Batch: %5d. Batch Size: %d. Training Loss (running): %.3f\"\n                % (batch_nr + 1, int(batch_size), running_loss / epoch_steps)\n            )\n            running_loss = 0.0\n    return loss.item()\n\nThe method validate_one_epoch() is implemented as follows:\n\ndef validate_one_epoch(net, valloader, loss_function, metric, device, task):\n    val_loss = 0.0\n    val_steps = 0\n    total = 0\n    correct = 0\n    metric.reset()\n    for i, data in enumerate(valloader, 0):\n        # get batches\n        with torch.no_grad():\n            input, target = data\n            input, target = input.to(device), target.to(device)\n            output = net(input)\n            # print(f\"target: {target}\")\n            # print(f\"output: {output}\")\n            if task == \"regression\":\n                target = target.unsqueeze(1)\n                if target.shape == output.shape:\n                    loss = loss_function(output, target)\n                else:\n                    raise ValueError(f\"Shapes of target and output \n                        do not match: {target.shape} vs {output.shape}\")\n                metric_value = metric.update(output, target)\n            elif task == \"classification\":\n                loss = loss_function(output, target)\n                metric_value = metric.update(output, target)\n                _, predicted = torch.max(output.data, 1)\n                total += target.size(0)\n                correct += (predicted == target).sum().item()\n            else:\n                raise ValueError(f\"Unknown task: {task}\")\n            val_loss += loss.cpu().numpy()\n            val_steps += 1\n    loss = val_loss / val_steps\n    print(f\"Loss on hold-out set: {loss}\")\n    if task == \"classification\":\n        accuracy = correct / total\n        print(f\"Accuracy on hold-out set: {accuracy}\")\n    # metric on all batches using custom accumulation\n    metric_value = metric.compute()\n    metric_name = type(metric).__name__\n    print(f\"{metric_name} value on hold-out data: {metric_value}\")\n    return metric_value, loss\n\nD.15.1.1 Description of the \"test_hold_out\" Setting\nIt uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc() calls spotPython.torch.traintest.evaluate_hold_out() similar to the \"train_hold_out\" setting with one exception: It passes an additional test data set to evaluate_hold_out() as follows:\n\ntest_dataset=fun_control[\"test\"]\nevaluate_hold_out() calls create_train_test_data_loaders instead of create_train_val_data_loaders: The two data sets are used in create_train_test_data_loaders as follows:\ndef create_train_test_data_loaders(dataset, batch_size, shuffle, test_dataset, \n        num_workers=0):\n    trainloader = torch.utils.data.DataLoader(\n        dataset, batch_size=int(batch_size), shuffle=shuffle, \n        num_workers=num_workers\n    )\n    testloader = torch.utils.data.DataLoader(\n        test_dataset, batch_size=int(batch_size), shuffle=shuffle, \n        num_workers=num_workers\n    )\n    return trainloader, testloader\n\nThe following steps are identical to the \"train_hold_out\" setting. Only a different data loader is used for testing.\n\n\n\nD.15.1.2 Detailed Description of the \"train_cv\" Setting\nIt uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc() calls spotPython.torch.traintest.evaluate_cv() as follows (Note: Only the data set fun_control[\"train\"] is used for CV.):\n\ndf_eval, _ = evaluate_cv(\n    model,\n    dataset=fun_control[\"train\"],\n    shuffle=self.fun_control[\"shuffle\"],\n    device=self.fun_control[\"device\"],\n    show_batch_interval=self.fun_control[\"show_batch_interval\"],\n    task=self.fun_control[\"task\"],\n    writer=self.fun_control[\"writer\"],\n    writerId=config_id,\n)\n\nIn `evaluate_cv(), the following steps are performed: The optimizer is set up as follows:\n\noptimizer_instance = net.optimizer\nlr_instance = net.lr\nsgd_momentum_instance = net.sgd_momentum\noptimizer = optimizer_handler(optimizer_name=optimizer_instance,\n     params=net.parameters(), lr_mult=lr_mult_instance)\nevaluate_cv() sets the net attributes such as epochs, batch_size, optimizer, and patience. CV is implemented as follows:\ndef evaluate_cv(\n    net,\n    dataset,\n    shuffle=False,\n    loss_function=None,\n    num_workers=0,\n    device=None,\n    show_batch_interval=10_000,\n    metric=None,\n    path=None,\n    task=None,\n    writer=None,\n    writerId=None,\n):\n    lr_mult_instance = net.lr_mult\n    epochs_instance = net.epochs\n    batch_size_instance = net.batch_size\n    k_folds_instance = net.k_folds\n    optimizer_instance = net.optimizer\n    patience_instance = net.patience\n    sgd_momentum_instance = net.sgd_momentum\n    removed_attributes, net = get_removed_attributes_and_base_net(net)\n    metric_values = {}\n    loss_values = {}\n    try:\n        device = getDevice(device=device)\n        if torch.cuda.is_available():\n            device = \"cuda:0\"\n            if torch.cuda.device_count() &gt; 1:\n                print(\"We will use\", torch.cuda.device_count(), \"GPUs!\")\n                net = nn.DataParallel(net)\n        net.to(device)\n        optimizer = optimizer_handler(\n            optimizer_name=optimizer_instance,\n            params=net.parameters(),\n            lr_mult=lr_mult_instance,\n            sgd_momentum=sgd_momentum_instance,\n        )\n        kfold = KFold(n_splits=k_folds_instance, shuffle=shuffle)\n        for fold, (train_ids, val_ids) in enumerate(kfold.split(dataset)):\n            print(f\"Fold: {fold + 1}\")\n            train_subsampler = torch.utils.data.SubsetRandomSampler(train_ids)\n            val_subsampler = torch.utils.data.SubsetRandomSampler(val_ids)\n            trainloader = torch.utils.data.DataLoader(\n                dataset, batch_size=batch_size_instance, \n                sampler=train_subsampler, num_workers=num_workers\n            )\n            valloader = torch.utils.data.DataLoader(\n                dataset, batch_size=batch_size_instance, \n                sampler=val_subsampler, num_workers=num_workers\n            )\n            # each fold starts with new weights:\n            reset_weights(net)\n            # Early stopping parameters\n            best_val_loss = float(\"inf\")\n            counter = 0\n            for epoch in range(epochs_instance):\n                print(f\"Epoch: {epoch + 1}\")\n                # training loss from one epoch:\n                training_loss = train_one_epoch(\n                    net=net,\n                    trainloader=trainloader,\n                    batch_size=batch_size_instance,\n                    loss_function=loss_function,\n                    optimizer=optimizer,\n                    device=device,\n                    show_batch_interval=show_batch_interval,\n                    task=task,\n                )\n                # Early stopping check. Calculate validation loss from one epoch:\n                metric_values[fold], loss_values[fold] = validate_one_epoch(\n                    net, valloader=valloader, loss_function=loss_function, \n                    metric=metric, device=device, task=task\n                )\n                # Log the running loss averaged per batch\n                metric_name = \"Metric\"\n                if metric is None:\n                    metric_name = type(metric).__name__\n                    print(f\"{metric_name} value on hold-out data: \n                        {metric_values[fold]}\")\n                if writer is not None:\n                    writer.add_scalars(\n                        \"evaluate_cv fold:\" + str(fold + 1) + \n                        \". Train & Val Loss and Val Metric\" + writerId,\n                        {\"Train loss\": training_loss, \"Val loss\": \n                        loss_values[fold], metric_name: metric_values[fold]},\n                        epoch + 1,\n                    )\n                    writer.flush()\n                if loss_values[fold] &lt; best_val_loss:\n                    best_val_loss = loss_values[fold]\n                    counter = 0\n                    # save model:\n                    if path is not None:\n                        torch.save(net.state_dict(), path)\n                else:\n                    counter += 1\n                    if counter &gt;= patience_instance:\n                        print(f\"Early stopping at epoch {epoch}\")\n                        break\n        df_eval = sum(loss_values.values()) / len(loss_values.values())\n        df_metrics = sum(metric_values.values()) / len(metric_values.values())\n        df_preds = np.nan\n    except Exception as err:\n        print(f\"Error in Net_Core. Call to evaluate_cv() failed. {err=}, \n            {type(err)=}\")\n        df_eval = np.nan\n        df_preds = np.nan\n    add_attributes(net, removed_attributes)\n    if writer is not None:\n        metric_name = \"Metric\"\n        if metric is None:\n            metric_name = type(metric).__name__\n        writer.add_scalars(\n            \"CV: Val Loss and Val Metric\" + writerId,\n            {\"CV-loss\": df_eval, metric_name: df_metrics},\n            epoch + 1,\n        )\n        writer.flush()\n    return df_eval, df_preds, df_metrics\n\nThe method train_fold() is implemented as shown above.\nThe method validate_one_epoch() is implemented as shown above. In contrast to the hold-out setting, it is called for each of the \\(k\\) folds. The results are stored in a dictionaries metric_values and loss_values. The results are averaged over the \\(k\\) folds and returned as df_eval.\n\n\n\nD.15.1.3 Detailed Description of the \"test_cv\" Setting\nIt uses the loss function specfied in fun_control and the metric specified in fun_control.\n\nFirst, the method HyperTorch().fun_torch is called.\nfun_torc() calls spotPython.torch.traintest.evaluate_cv() as follows:\n\ndf_eval, _ = evaluate_cv(\n    model,\n    dataset=fun_control[\"test\"],\n    shuffle=self.fun_control[\"shuffle\"],\n    device=self.fun_control[\"device\"],\n    show_batch_interval=self.fun_control[\"show_batch_interval\"],\n    task=self.fun_control[\"task\"],\n    writer=self.fun_control[\"writer\"],\n    writerId=config_id,\n)\nNote: The data set fun_control[\"test\"] is used for CV. The rest is the same as for the \"train_cv\" setting.\n\n\nD.15.1.4 Detailed Description of the Final Model Training and Evaluation\nThere are two methods that can be used for the final evaluation of a Pytorch model:\n\n\"train_tuned and\n\"test_tuned\".\n\ntrain_tuned() is just a wrapper to evaluate_hold_out using the train data set. It is implemented as follows:\ndef train_tuned(\n    net,\n    train_dataset,\n    shuffle,\n    loss_function,\n    metric,\n    device=None,\n    show_batch_interval=10_000,\n    path=None,\n    task=None,\n    writer=None,\n):\n    evaluate_hold_out(\n        net=net,\n        train_dataset=train_dataset,\n        shuffle=shuffle,\n        test_dataset=None,\n        loss_function=loss_function,\n        metric=metric,\n        device=device,\n        show_batch_interval=show_batch_interval,\n        path=path,\n        task=task,\n        writer=writer,\n    )\nThe test_tuned() procedure is implemented as follows:\ndef test_tuned(net, shuffle, test_dataset=None, loss_function=None,\n    metric=None, device=None, path=None, task=None):\n    batch_size_instance = net.batch_size\n    removed_attributes, net = get_removed_attributes_and_base_net(net)\n    if path is not None:\n        net.load_state_dict(torch.load(path))\n        net.eval()\n    try:\n        device = getDevice(device=device)\n        if torch.cuda.is_available():\n            device = \"cuda:0\"\n            if torch.cuda.device_count() &gt; 1:\n                print(\"We will use\", torch.cuda.device_count(), \"GPUs!\")\n                net = nn.DataParallel(net)\n        net.to(device)\n        valloader = torch.utils.data.DataLoader(\n            test_dataset, batch_size=int(batch_size_instance),\n            shuffle=shuffle, \n            num_workers=0\n        )\n        metric_value, loss = validate_one_epoch(\n            net, valloader=valloader, loss_function=loss_function,\n            metric=metric, device=device, task=task\n        )\n        df_eval = loss\n        df_metric = metric_value\n        df_preds = np.nan\n    except Exception as err:\n        print(f\"Error in Net_Core. Call to test_tuned() failed. {err=}, \n            {type(err)=}\")\n        df_eval = np.nan\n        df_metric = np.nan\n        df_preds = np.nan\n    add_attributes(net, removed_attributes)\n    print(f\"Final evaluation: Validation loss: {df_eval}\")\n    print(f\"Final evaluation: Validation metric: {df_metric}\")\n    print(\"----------------------------------------------\")\n    return df_eval, df_preds, df_metric",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Documentation of the Sequential Parameter Optimization</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Bartz, Eva, Thomas Bartz-Beielstein, Martin Zaefferer, and Olaf\nMersmann, eds. 2022. Hyperparameter Tuning for\nMachine and Deep Learning with R - A Practical Guide.\nSpringer.\n\n\nBartz-Beielstein, Thomas. 2023. “PyTorch\nHyperparameter Tuning with SPOT: Comparison with Ray\nTuner and Default Hyperparameters on\nCIFAR10.” https://github.com/sequential-parameter-optimization/spotPython/blob/main/notebooks/14_spot_ray_hpt_torch_cifar10.ipynb.\n\n\nForrester, Alexander, András Sóbester, and Andy Keane. 2008. Engineering Design via Surrogate Modelling.\nWiley.\n\n\nSantner, T J, B J Williams, and W I Notz. 2003. The Design and Analysis of Computer\nExperiments. Berlin, Heidelberg, New York: Springer.",
    "crumbs": [
      "Appendices",
      "References"
    ]
  },
  {
    "objectID": "007_num_spot_intro.html",
    "href": "007_num_spot_intro.html",
    "title": "7  Introduction to spotPython",
    "section": "",
    "text": "7.1 Example: Spot and the Sphere Function\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.utils.init import fun_control_init, design_control_init\nfrom spotPython.hyperparameters.values import set_control_key_value\nfrom spotPython.spot import spot\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to `spotPython`</span>"
    ]
  },
  {
    "objectID": "007_num_spot_intro.html#example-spot-and-the-sphere-function",
    "href": "007_num_spot_intro.html#example-spot-and-the-sphere-function",
    "title": "7  Introduction to spotPython",
    "section": "",
    "text": "7.1.1 The Objective Function: Sphere\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[\nf(x) = x^2\n\\]\n\nfun = analytical().fun_sphere\n\nWe can apply the function fun to input values and plot the result:\n\nx = np.linspace(-1,1,100).reshape(-1,1)\ny = fun(x)\nplt.figure()\nplt.plot(x, y, \"k\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n7.1.2 The Spot Method as an Optimization Algorithm Using a Surrogate Model\nWe initialize the fun_control dictionary. The fun_control dictionary contains the parameters for the objective function. The fun_control dictionary is passed to the Spot method.\n\nfun_control=fun_control_init(lower = np.array([-1]),\n                     upper = np.array([1]))\nspot_0 = spot.Spot(fun=fun,\n                   fun_control=fun_control)\nspot_0.run()\n\nspotPython tuning: 1.2026789271012512e-09 [#######---] 73.33% \nspotPython tuning: 1.2026789271012512e-09 [########--] 80.00% \nspotPython tuning: 1.2026789271012512e-09 [#########-] 86.67% \nspotPython tuning: 1.2026789271012512e-09 [#########-] 93.33% \nspotPython tuning: 3.7010904275056666e-10 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2d0950710&gt;\n\n\nPrint the results:\n\nspot_0.print_results()\n\nmin y: 3.7010904275056666e-10\nx0: 1.9238218284201025e-05\n\n\n[['x0', 1.9238218284201025e-05]]\n\n\nPlot the search progress:\n\nspot_0.plot_progress(log_y=True)\n\n\n\n\n\n\n\nFigure 7.1: Visualization of the search progress of the Spot method. The black elements (points and line) represent the initial design, before the surrogate is build. The red elements represent the search on the surrogate.\n\n\n\n\n\n\nspot_0.plot_model()\n\n\n\n\n\n\n\nFigure 7.2: Visualization of the model and the underlying objective function values.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to `spotPython`</span>"
    ]
  },
  {
    "objectID": "007_num_spot_intro.html#spot-parameters-fun_evals-init_size-and-show_models",
    "href": "007_num_spot_intro.html#spot-parameters-fun_evals-init_size-and-show_models",
    "title": "7  Introduction to spotPython",
    "section": "7.2 Spot Parameters: fun_evals, init_size and show_models",
    "text": "7.2 Spot Parameters: fun_evals, init_size and show_models\nWe will modify three parameters:\n\nThe number of function evaluations (fun_evals) will be set to 10 (instead of 15, which is the default value) in the fun_control dictionary.\nThe parameter show_models, which visualizes the search process for each single iteration for 1-dim functions, in the fun_control dictionary.\nThe size of the initial design (init_size) in the design_control dictionary.\n\nThe full list of the Spot parameters is shown in code reference on GitHub, see Spot.\n\nfun_control=fun_control_init(lower = np.array([-1]),\n                     upper = np.array([1]),\n                     fun_evals = 10,\n                     show_models = True)               \ndesign_control = design_control_init(init_size=9)\nspot_1 = spot.Spot(fun=fun,\n                   fun_control=fun_control,\n                   design_control=design_control)\nspot_1.run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspotPython tuning: 1.2031167009156832e-09 [##########] 100.00% Done...",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to `spotPython`</span>"
    ]
  },
  {
    "objectID": "007_num_spot_intro.html#print-the-results",
    "href": "007_num_spot_intro.html#print-the-results",
    "title": "7  Introduction to spotPython",
    "section": "7.3 Print the Results",
    "text": "7.3 Print the Results\n\nspot_1.print_results()\n\nmin y: 1.2031167009156832e-09\nx0: -3.468597268227724e-05\n\n\n[['x0', -3.468597268227724e-05]]",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to `spotPython`</span>"
    ]
  },
  {
    "objectID": "007_num_spot_intro.html#show-the-progress",
    "href": "007_num_spot_intro.html#show-the-progress",
    "title": "7  Introduction to spotPython",
    "section": "7.4 Show the Progress",
    "text": "7.4 Show the Progress\n\nspot_1.plot_progress()",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to `spotPython`</span>"
    ]
  },
  {
    "objectID": "007_num_spot_intro.html#sec-visualizing-tensorboard-01",
    "href": "007_num_spot_intro.html#sec-visualizing-tensorboard-01",
    "title": "7  Introduction to spotPython",
    "section": "7.5 Visualizing the Optimization and Hyperparameter Tuning Process with TensorBoard",
    "text": "7.5 Visualizing the Optimization and Hyperparameter Tuning Process with TensorBoard\nspotPython supports the visualization of the hyperparameter tuning process with TensorBoard. The following example shows how to use TensorBoard with spotPython.\nFirst, we define an “PREFIX” to identify the hyperparameter tuning process. The PREFIX is used to create a directory for the TensorBoard files.\n\nfun_control = fun_control_init(\n    PREFIX = \"01\",\n    lower = np.array([-1]),\n    upper = np.array([2]))\ndesign_control = design_control_init(init_size=5)\n\nCreated spot_tensorboard_path: runs/spot_logs/01_p040025_2024-01-10_22-10-14 for SummaryWriter()\n\n\nSince the spot_tensorboard_path is defined, spotPython will log the optimization process in the TensorBoard files.\n\nspot_tuner = spot.Spot(fun=fun,\n                   fun_control=fun_control,\n                   design_control=design_control)\nspot_tuner.run()\nspot_tuner.print_results()\n\nspotPython tuning: 2.7705278094872058e-05 [####------] 40.00% \nspotPython tuning: 8.061545220547415e-07 [#####-----] 46.67% \nspotPython tuning: 7.385022589686283e-07 [#####-----] 53.33% \nspotPython tuning: 3.677917685242894e-07 [######----] 60.00% \nspotPython tuning: 4.911502304103013e-09 [#######---] 66.67% \nspotPython tuning: 4.911502304103013e-09 [#######---] 73.33% \nspotPython tuning: 4.911502304103013e-09 [########--] 80.00% \nspotPython tuning: 4.911502304103013e-09 [#########-] 86.67% \nspotPython tuning: 4.911502304103013e-09 [#########-] 93.33% \nspotPython tuning: 4.911502304103013e-09 [##########] 100.00% Done...\n\nmin y: 4.911502304103013e-09\nx0: -7.008211115615035e-05\n\n\n[['x0', -7.008211115615035e-05]]\n\n\nNow we can start TensorBoard in the background. The TensorBoard process will read the TensorBoard files and visualize the hyperparameter tuning process. From the terminal, we can start TensorBoard with the following command:\ntensorboard --logdir=\"./runs\"\nlogdir is the directory where the TensorBoard files are stored. In our case, the TensorBoard files are stored in the directory ./runs.\nTensorBoard will start a web server on port 6006. We can access the TensorBoard web server with the following URL:\nhttp://localhost:6006/\nThe first TensorBoard visualization shows the objective function values plotted against the wall time. The wall time is the time that has passed since the start of the hyperparameter tuning process. The five initial design points are shown in the upper left region of the plot. The line visualizes the optimization process. \nThe second TensorBoard visualization shows the input values, i.e., \\(x_0\\), plotted against the wall time. \nThe third TensorBoard plot illustrates how spotPython can be used as a microscope for the internal mechanisms of the surrogate-based optimization process. Here, one important parameter, the learning rate \\(\\theta\\) of the Kriging surrogate is plotted against the number of optimization steps.\n\n\n\nTensorBoard visualization of the spotPython process.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to `spotPython`</span>"
    ]
  },
  {
    "objectID": "007_num_spot_intro.html#jupyter-notebook",
    "href": "007_num_spot_intro.html#jupyter-notebook",
    "title": "7  Introduction to spotPython",
    "section": "7.6 Jupyter Notebook",
    "text": "7.6 Jupyter Notebook\n\n\n\n\n\n\nNote\n\n\n\n\nThe Jupyter-Notebook of this lecture is available on GitHub in the Hyperparameter-Tuning-Cookbook Repository",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Introduction to `spotPython`</span>"
    ]
  },
  {
    "objectID": "008_num_spot_multidim.html",
    "href": "008_num_spot_multidim.html",
    "title": "8  Multi-dimensional Functions",
    "section": "",
    "text": "8.1 Example: Spot and the 3-dim Sphere Function\nimport numpy as np\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.utils.init import fun_control_init, surrogate_control_init\nfrom spotPython.spot import spot",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Multi-dimensional Functions</span>"
    ]
  },
  {
    "objectID": "008_num_spot_multidim.html#example-spot-and-the-3-dim-sphere-function",
    "href": "008_num_spot_multidim.html#example-spot-and-the-3-dim-sphere-function",
    "title": "8  Multi-dimensional Functions",
    "section": "",
    "text": "8.1.1 The Objective Function: 3-dim Sphere\nThe spotPython package provides several classes of objective functions. We will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x) = \\sum_i^k x_i^2 \\]. It is avaliable as fun_sphere in the analytical class.\n\nfun = analytical().fun_sphere\n\nHere we will use problem dimension \\(k=3\\).\n\nThe size of the lower bound array determines the problem dimension.\nHere we will use -1.0 * np.ones(3), i.e., a three-dim function.\nWe will use three different theta values (one for each dimension), i.e., we set n_theta=3 in the surrogate_control.\n\nSimilar to the one-dimensional case, which was introduced in Section Section 7.5, we can use TensorBoard to monitor the progress of the optimization. We will use the same code, only the prefix is different:\n\nfun_control = fun_control_init(\n              PREFIX=\"01\",\n              lower = -1.0*np.ones(3),\n              upper = np.ones(3),\n              var_name=[\"Pressure\", \"Temp\", \"Lambda\"],\n              show_progress=True)\nsurrogate_control = surrogate_control_init(n_theta=3)\nspot_3 = spot.Spot(fun=fun,\n                  fun_control=fun_control,\n                  surrogate_control=surrogate_control)\nspot_3.run()\n\nCreated spot_tensorboard_path: runs/spot_logs/01_p040025_2024-01-10_22-10-29 for SummaryWriter()\nspotPython tuning: 0.03443324167631616 [#######---] 73.33% \nspotPython tuning: 0.03134655155643102 [########--] 80.00% \nspotPython tuning: 0.0009630181526749273 [#########-] 86.67% \nspotPython tuning: 8.570154459856623e-05 [#########-] 93.33% \nspotPython tuning: 6.496172516667557e-05 [##########] 100.00% Done...\n\n\n\n&lt;spotPython.spot.spot.Spot at 0x2c8b0aad0&gt;\n\n\n\n\n\n\n\n\nNote\n\n\n\nNow we can start TensorBoard in the background with the following command:\ntensorboard --logdir=\"./runs\"\nand can access the TensorBoard web server with the following URL:\nhttp://localhost:6006/\n\n\n\n\n8.1.2 Results\n\nspot_3.print_results()\n\nmin y: 6.496172516667557e-05\nPressure: 0.005280070995399376\nTemp: 0.0019490323308060742\nLambda: 0.005769215581315232\n\n\n[['Pressure', 0.005280070995399376],\n ['Temp', 0.0019490323308060742],\n ['Lambda', 0.005769215581315232]]\n\n\n\nspot_3.plot_progress()\n\n\n\n\n\n\n\n\n\n\n8.1.3 A Contour Plot\nWe can select two dimensions, say \\(i=0\\) and \\(j=1\\), and generate a contour plot as follows.\n\n\n\n\n\n\nNote:\n\n\n\nWe have specified identical min_z and max_z values to generate comparable plots.\n\n\n\nspot_3.plot_contour(i=0, j=1, min_z=0, max_z=2.25)\n\n\n\n\n\n\n\n\n\nIn a similar manner, we can plot dimension \\(i=0\\) and \\(j=2\\):\n\n\nspot_3.plot_contour(i=0, j=2, min_z=0, max_z=2.25)\n\n\n\n\n\n\n\n\n\nThe final combination is \\(i=1\\) and \\(j=2\\):\n\n\nspot_3.plot_contour(i=1, j=2, min_z=0, max_z=2.25)\n\n\n\n\n\n\n\n\n\nThe three plots look very similar, because the fun_sphere is symmetric.\nThis can also be seen from the variable importance:\n\n\nspot_3.print_importance()\n\nPressure:  95.79368533570627\nTemp:  99.99999999999999\nLambda:  87.19542775477797\n\n\n[['Pressure', 95.79368533570627],\n ['Temp', 99.99999999999999],\n ['Lambda', 87.19542775477797]]\n\n\n\n\n8.1.4 TensorBoard\n\n\n\nTensorBoard visualization of the spotPython process. Objective function values plotted against wall time.\n\n\nThe second TensorBoard visualization shows the input values, i.e., \\(x_0, \\ldots, x_2\\), plotted against the wall time. \nThe third TensorBoard plot illustrates how spotPython can be used as a microscope for the internal mechanisms of the surrogate-based optimization process. Here, one important parameter, the learning rate \\(\\theta\\) of the Kriging surrogate is plotted against the number of optimization steps.\n\n\n\nTensorBoard visualization of the spotPython surrogate model.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Multi-dimensional Functions</span>"
    ]
  },
  {
    "objectID": "008_num_spot_multidim.html#conclusion",
    "href": "008_num_spot_multidim.html#conclusion",
    "title": "8  Multi-dimensional Functions",
    "section": "8.2 Conclusion",
    "text": "8.2 Conclusion\nBased on this quick analysis, we can conclude that all three dimensions are equally important (as expected, because the analytical function is known).",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Multi-dimensional Functions</span>"
    ]
  },
  {
    "objectID": "008_num_spot_multidim.html#exercises",
    "href": "008_num_spot_multidim.html#exercises",
    "title": "8  Multi-dimensional Functions",
    "section": "8.3 Exercises",
    "text": "8.3 Exercises\n\nImportant:\n\nResults from these exercises should be added to this document, i.e., you should submit an updated version of this notebook.\nPlease combine your results using this notebook.\nOnly one notebook from each group!\nPresentation is based on this notebook. No addtional slides are required!\nspotPython version 0.16.11 (or greater) is required\n\n\n\n8.3.1 The Three Dimensional fun_cubed\n\nThe input dimension is 3. The search range is \\(-1 \\leq x \\leq 1\\) for all dimensions.\nGenerate contour plots\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?\n\n\n\n\n\n8.3.2 The Ten Dimensional fun_wing_wt\n\nThe input dimension is 10. The search range is \\(0 \\leq x \\leq 1\\) for all dimensions.\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?\n\nGenerate contour plots for the three most important variables. Do they confirm your selection?\n\n\n\n\n8.3.3 The Three Dimensional fun_runge\n\nThe input dimension is 3. The search range is \\(-5 \\leq x \\leq 5\\) for all dimensions.\nGenerate contour plots\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?\n\n\n\n\n\n8.3.4 The Three Dimensional fun_linear\n\nThe input dimension is 3. The search range is \\(-5 \\leq x \\leq 5\\) for all dimensions.\nGenerate contour plots\nCalculate the variable importance.\nDiscuss the variable importance:\n\nAre all variables equally important?\nIf not:\n\nWhich is the most important variable?\nWhich is the least important variable?",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Multi-dimensional Functions</span>"
    ]
  },
  {
    "objectID": "008_num_spot_multidim.html#jupyter-notebook",
    "href": "008_num_spot_multidim.html#jupyter-notebook",
    "title": "8  Multi-dimensional Functions",
    "section": "8.4 Jupyter Notebook",
    "text": "8.4 Jupyter Notebook\n\n\n\n\n\n\nNote\n\n\n\n\nThe Jupyter-Notebook of this lecture is available on GitHub in the Hyperparameter-Tuning-Cookbook Repository",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Multi-dimensional Functions</span>"
    ]
  },
  {
    "objectID": "009_num_spot_anisotropic.html",
    "href": "009_num_spot_anisotropic.html",
    "title": "9  Isotropic and Anisotropic Kriging",
    "section": "",
    "text": "9.1 Example: Isotropic Spot Surrogate and the 2-dim Sphere Function\nimport numpy as np\nfrom math import inf\nfrom spotPython.fun.objectivefunctions import analytical\nfrom spotPython.spot import spot\nfrom spotPython.utils.init import fun_control_init, surrogate_control_init\nPREFIX=\"003\"",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Isotropic and Anisotropic Kriging</span>"
    ]
  },
  {
    "objectID": "009_num_spot_anisotropic.html#example-isotropic-spot-surrogate-and-the-2-dim-sphere-function",
    "href": "009_num_spot_anisotropic.html#example-isotropic-spot-surrogate-and-the-2-dim-sphere-function",
    "title": "9  Isotropic and Anisotropic Kriging",
    "section": "",
    "text": "9.1.1 The Objective Function: 2-dim Sphere\n\nThe spotPython package provides several classes of objective functions.\nWe will use an analytical objective function, i.e., a function that can be described by a (closed) formula: \\[f(x, y) = x^2 + y^2\\]\nThe size of the lower bound vector determines the problem dimension.\nHere we will use np.array([-1, -1]), i.e., a two-dim function.\n\n\nfun = analytical().fun_sphere\nfun_control = fun_control_init(PREFIX=PREFIX,\n                               lower = np.array([-1, -1]),\n                               upper = np.array([1, 1]))\n\n\nAlthough the default spot surrogate model is an isotropic Kriging model, we will explicitly set the theta parameter to a value of 1 for both dimensions. This is done to illustrate the difference between isotropic and anisotropic Kriging models.\n\n\nsurrogate_control=surrogate_control_init(n_theta=1)\n\n\nspot_2 = spot.Spot(fun=fun,\n                   fun_control=fun_control,\n                   surrogate_control=surrogate_control)\n\nspot_2.run()\n\n\n\n9.1.2 Results\n\nspot_2.print_results()\n\n\nspot_2.plot_progress(log_y=True)",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Isotropic and Anisotropic Kriging</span>"
    ]
  },
  {
    "objectID": "009_num_spot_anisotropic.html#example-with-anisotropic-kriging",
    "href": "009_num_spot_anisotropic.html#example-with-anisotropic-kriging",
    "title": "9  Isotropic and Anisotropic Kriging",
    "section": "9.2 Example With Anisotropic Kriging",
    "text": "9.2 Example With Anisotropic Kriging\n\nThe default parameter setting of spotPython’s Kriging surrogate uses the same theta value for every dimension.\nThis is referred to as “using an isotropic kernel”.\nIf different theta values are used for each dimension, then an anisotropic kernel is used\nTo enable anisotropic models in spotPython, the number of theta values should be larger than one.\nWe can use surrogate_control={\"n_theta\": 2} to enable this behavior (2 is the problem dimension).\n\n\nsurrogate_control = surrogate_control_init(n_theta=2)\nspot_2_anisotropic = spot.Spot(fun=fun,\n                    fun_control=fun_control,\n                    surrogate_control=surrogate_control)\nspot_2_anisotropic.run()\n\n\nThe search progress of the optimization with the anisotropic model can be visualized:\n\n\nspot_2_anisotropic.plot_progress(log_y=True)\n\n\nspot_2_anisotropic.print_results()\n\n\nspot_2_anisotropic.surrogate.plot()\n\n\n9.2.1 Taking a Look at the theta Values\n\n9.2.1.1 theta Values from the spot Model\n\nWe can check, whether one or several theta values were used.\nThe theta values from the surrogate can be printed as follows:\n\n\nspot_2_anisotropic.surrogate.theta\n\n\nSince the surrogate from the isotropic setting was stored as spot_2, we can also take a look at the theta value from this model:\n\n\nspot_2.surrogate.theta\n\n\n\n9.2.1.2 TensorBoard\nNow we can start TensorBoard in the background with the following command:\ntensorboard --logdir=\"./runs\"\nWe can access the TensorBoard web server with the following URL:\nhttp://localhost:6006/\nThe TensorBoard plot illustrates how spotPython can be used as a microscope for the internal mechanisms of the surrogate-based optimization process. Here, one important parameter, the learning rate \\(\\theta\\) of the Kriging surrogate is plotted against the number of optimization steps.\n\n\n\nTensorBoard visualization of the spotPython surrogate model.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Isotropic and Anisotropic Kriging</span>"
    ]
  },
  {
    "objectID": "009_num_spot_anisotropic.html#exercises",
    "href": "009_num_spot_anisotropic.html#exercises",
    "title": "9  Isotropic and Anisotropic Kriging",
    "section": "9.3 Exercises",
    "text": "9.3 Exercises\n\n9.3.1 fun_branin\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-5 \\leq x_1 \\leq 10\\) and \\(0 \\leq x_2 \\leq 15\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion: instead of the number of evaluations (which is specified via fun_evals), the time should be used as the termination criterion. This can be done as follows (max_time=1 specifies a run time of one minute):\n\n\nfun_evals=inf,\nmax_time=1,\n\n\n\n9.3.2 fun_sin_cos\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-2\\pi \\leq x_1 \\leq 2\\pi\\) and \\(-2\\pi \\leq x_2 \\leq 2\\pi\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin.\n\n\n\n9.3.3 fun_runge\n\nDescribe the function.\n\nThe input dimension is 2. The search range is \\(-5 \\leq x_1 \\leq 5\\) and \\(-5 \\leq x_2 \\leq 5\\).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin.\n\n\n\n9.3.4 fun_wingwt\n\nDescribe the function.\n\nThe input dimension is 10. The search ranges are between 0 and 1 (values are mapped internally to their natural bounds).\n\nCompare the results from spotPython run a) with isotropic and b) anisotropic surrogate models.\nModify the termination criterion (max_time instead of fun_evals) as described for fun_branin.",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Isotropic and Anisotropic Kriging</span>"
    ]
  },
  {
    "objectID": "009_num_spot_anisotropic.html#jupyter-notebook",
    "href": "009_num_spot_anisotropic.html#jupyter-notebook",
    "title": "9  Isotropic and Anisotropic Kriging",
    "section": "9.4 Jupyter Notebook",
    "text": "9.4 Jupyter Notebook\n\n\n\n\n\n\nNote\n\n\n\n\nThe Jupyter-Notebook of this lecture is available on GitHub in the Hyperparameter-Tuning-Cookbook Repository",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Isotropic and Anisotropic Kriging</span>"
    ]
  },
  {
    "objectID": "011_num_spot_sklearn_gaussian.html",
    "href": "011_num_spot_sklearn_gaussian.html",
    "title": "11  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "",
    "text": "11.1 Gaussian Processes Regression: Basic Introductory scikit-learn Example",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Sequential Parameter Optimization:  Gaussian Process Models</span>"
    ]
  },
  {
    "objectID": "011_num_spot_sklearn_gaussian.html#gaussian-processes-regression-basic-introductory-scikit-learn-example",
    "href": "011_num_spot_sklearn_gaussian.html#gaussian-processes-regression-basic-introductory-scikit-learn-example",
    "title": "11  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "",
    "text": "This is the example from scikit-learn: https://scikit-learn.org/stable/auto_examples/gaussian_process/plot_gpr_noisy_targets.html\nAfter fitting our model, we see that the hyperparameters of the kernel have been optimized.\nNow, we will use our kernel to compute the mean prediction of the full dataset and plot the 95% confidence interval.\n\n\n11.1.1 Train and Test Data\n\nX = np.linspace(start=0, stop=10, num=1_000).reshape(-1, 1)\ny = np.squeeze(X * np.sin(X))\nrng = np.random.RandomState(1)\ntraining_indices = rng.choice(np.arange(y.size), size=6, replace=False)\nX_train, y_train = X[training_indices], y[training_indices]\n\n\n\n11.1.2 Building the Surrogate With Sklearn\n\nThe model building with sklearn consisits of three steps:\n\nInstantiating the model, then\nfitting the model (using fit), and\nmaking predictions (using predict)\n\n\n\nkernel = 1 * RBF(length_scale=1.0, length_scale_bounds=(1e-2, 1e2))\ngaussian_process = GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)\ngaussian_process.fit(X_train, y_train)\nmean_prediction, std_prediction = gaussian_process.predict(X, return_std=True)\n\n\n\n11.1.3 Plotting the SklearnModel\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    mean_prediction - 1.96 * std_prediction,\n    mean_prediction + 1.96 * std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"sk-learn Version: Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n\n\n\n\n\n11.1.4 The spotPython Version\n\nThe spotPython version is very similar:\n\nInstantiating the model, then\nfitting the model and\nmaking predictions (using predict).\n\n\n\nS = Kriging(name='kriging',  seed=123, log_level=50, cod_type=\"norm\")\nS.fit(X_train, y_train)\nS_mean_prediction, S_std_prediction, S_ei = S.predict(X, return_val=\"all\")\n\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, S_mean_prediction, label=\"Mean prediction\")\nplt.fill_between(\n    X.ravel(),\n    S_mean_prediction - 1.96 * S_std_prediction,\n    S_mean_prediction + 1.96 * S_std_prediction,\n    alpha=0.5,\n    label=r\"95% confidence interval\",\n)\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"spotPython Version: Gaussian process regression on noise-free dataset\")\n\n\n\n\n\n\n\n\n\n\n11.1.5 Visualizing the Differences Between the spotPython and the sklearn Model Fits\n\nplt.plot(X, y, label=r\"$f(x) = x \\sin(x)$\", linestyle=\"dotted\")\nplt.scatter(X_train, y_train, label=\"Observations\")\nplt.plot(X, S_mean_prediction, label=\"spotPython Mean prediction\")\nplt.plot(X, mean_prediction, label=\"Sklearn Mean Prediction\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Comparing Mean Predictions\")",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Sequential Parameter Optimization:  Gaussian Process Models</span>"
    ]
  },
  {
    "objectID": "011_num_spot_sklearn_gaussian.html#exercises",
    "href": "011_num_spot_sklearn_gaussian.html#exercises",
    "title": "11  Sequential Parameter Optimization: Gaussian Process Models",
    "section": "11.2 Exercises",
    "text": "11.2 Exercises\n\n11.2.1 Schonlau Example Function\n\nThe Schonlau Example Function is based on sample points only (there is no analytical function description available):\n\n\nX = np.linspace(start=0, stop=13, num=1_000).reshape(-1, 1)\nX_train = np.array([1., 2., 3., 4., 12.]).reshape(-1,1)\ny_train = np.array([0., -1.75, -2, -0.5, 5.])\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Since there is no analytical function available, you might be interested in adding some points and describe the effects.\n\n\n\n11.2.2 Forrester Example Function\n\nThe Forrester Example Function is defined as follows:\nf(x) = (6x- 2)^2 sin(12x-4) for x in [0,1].\nData points are generated as follows:\n\n\nfrom spotPython.utils.init import fun_control_init\nX = np.linspace(start=-0.5, stop=1.5, num=1_000).reshape(-1, 1)\nX_train = np.array([0.0, 0.175, 0.225, 0.3, 0.35, 0.375, 0.5,1]).reshape(-1,1)\nfun = analytical().fun_forrester\nfun_control = fun_control_init(sigma = 0.1)\ny = fun(X, fun_control=fun_control)\ny_train = fun(X_train, fun_control=fun_control)\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Modify the noise level (\"sigma\"), e.g., use a value of 0.2, and compare the two models.\n\n\nfun_control = fun_control_init(sigma = 0.2)\n\n\n\n11.2.3 fun_runge Function (1-dim)\n\nThe Runge function is defined as follows:\nf(x) = 1/ (1 + sum(x_i))^2\nData points are generated as follows:\n\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nlower = np.array([-10])\nupper = np.array([10])\nfun = analytical().fun_runge\nfun_control = fun_control_init(sigma = 0.025)\nX_train = gen.scipy_lhd(10, lower=lower, upper = upper).reshape(-1,1)\ny_train = fun(X, fun_control=fun_control)\nX = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\ny = fun(X, fun_control=fun_control)\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Modify the noise level (\"sigma\"), e.g., use a value of 0.05, and compare the two models.\n\n\nfun_control = fun_control_init(sigma = 0.5)\n\n\n\n11.2.4 fun_cubed (1-dim)\n\nThe Cubed function is defined as follows:\nnp.sum(X[i]** 3)\nData points are generated as follows:\n\n\ngen = spacefilling(1)\nrng = np.random.RandomState(1)\nfun_control = fun_control_init(sigma = 0.025,\n                lower = np.array([-10]),\n                upper = np.array([10]))\nfun = analytical().fun_cubed\nX_train = gen.scipy_lhd(10, lower=lower, upper = upper).reshape(-1,1)\ny_train = fun(X, fun_control=fun_control)\nX = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\ny = fun(X, fun_control=fun_control)\n\n\nDescribe the function.\nCompare the two models that were build using the spotPython and the sklearn surrogate.\nNote: Modify the noise level (\"sigma\"), e.g., use a value of 0.05, and compare the two models.\n\n\nfun_control = fun_control_init(sigma = 0.025)\n\n\n\n11.2.5 The Effect of Noise\nHow does the behavior of the spotPython fit changes when the argument noise is set to True, i.e.,\nS = Kriging(name='kriging',  seed=123, n_theta=1, noise=True)\nis used?",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Sequential Parameter Optimization:  Gaussian Process Models</span>"
    ]
  },
  {
    "objectID": "012_num_spot_ei.html#modifying-lambda-search-space",
    "href": "012_num_spot_ei.html#modifying-lambda-search-space",
    "title": "12  Expected Improvement",
    "section": "12.13 Modifying Lambda Search Space",
    "text": "12.13 Modifying Lambda Search Space\n\nS = Kriging(name='kriging',\n            seed=123,\n            log_level=50,\n            n_theta=1,\n            noise=True,\n            min_Lambda=0.1,\n            max_Lambda=10)\nS.fit(X_train, y_train)\n\nprint(f\"Lambda: {S.Lambda}\")\n\nLambda: 0.1\n\n\n\nX_axis = np.linspace(start=-13, stop=13, num=1000).reshape(-1, 1)\nmean_prediction, std_prediction, ei = S.predict(X_axis, return_val=\"all\")\n\nplt.scatter(X_train, y_train, label=\"Observations\")\n#plt.plot(X, ei, label=\"Expected Improvement\")\nplt.plot(X_axis, mean_prediction, label=\"mue\")\nplt.legend()\nplt.xlabel(\"$x$\")\nplt.ylabel(\"$f(x)$\")\n_ = plt.title(\"Gaussian process regression with nugget on noisy dataset\")",
    "crumbs": [
      "Numerical Methods",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Expected Improvement</span>"
    ]
  }
]